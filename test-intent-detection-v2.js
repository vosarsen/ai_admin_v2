// test-intent-detection-v2.js
// –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –≤ AI Admin v2

require('dotenv').config();
const AIAdminV2 = require('./src/services/ai-admin-v2');
const logger = require('./src/utils/logger');

// –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤
const testCases = [
  // –ò–Ω—Ç–µ–Ω—Ç: –ó–∞–ø–∏—Å—å
  {
    category: '–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É',
    tests: [
      { message: '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É?', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–∑–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω—è –∫ –±–∞—Ä–±–µ—Ä—É', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞', expectedCommand: 'SEARCH_SLOTS' },
      { message: '—Ö–æ—á—É –ø—Ä–∏–π—Ç–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä', expectedCommand: 'SEARCH_SLOTS' }
    ]
  },
  // –ò–Ω—Ç–µ–Ω—Ç: –û—Ç–º–µ–Ω–∞
  {
    category: '–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏',
    tests: [
      { message: '—Ö–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', expectedCommand: 'none', expectedText: '–æ—Ç–º–µ–Ω' },
      { message: '–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏', expectedCommand: 'none', expectedText: '–æ—Ç–º–µ–Ω' },
      { message: '–æ—Ç–º–µ–Ω—è—é –≤—Å—Ç—Ä–µ—á—É', expectedCommand: 'none', expectedText: '–æ—Ç–º–µ–Ω' },
      { message: '–Ω–µ –ø—Ä–∏–¥—É', expectedCommand: 'none', expectedText: '–æ—Ç–º–µ–Ω' },
      { message: '–æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ', expectedCommand: 'none', expectedText: '–æ—Ç–º–µ–Ω' }
    ]
  },
  // –ò–Ω—Ç–µ–Ω—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  {
    category: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤',
    tests: [
      { message: '—Å–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞?', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–µ—Å—Ç—å –≤—Ä–µ–º—è –≤ –ø—è—Ç–Ω–∏—Ü—É?', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–ø–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞', expectedCommand: 'SEARCH_SLOTS' },
      { message: '—á—Ç–æ –µ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?', expectedCommand: 'SEARCH_SLOTS' }
    ]
  },
  // –ò–Ω—Ç–µ–Ω—Ç: –¶–µ–Ω—ã
  {
    category: '–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω',
    tests: [
      { message: '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?', expectedCommand: 'SHOW_PRICES' },
      { message: '–∫–∞–∫–∏–µ —Ü–µ–Ω—ã?', expectedCommand: 'SHOW_PRICES' },
      { message: '–ø—Ä–∞–π—Å-–ª–∏—Å—Ç', expectedCommand: 'SHOW_PRICES' },
      { message: '—Ü–µ–Ω–∞ –º–∞–Ω–∏–∫—é—Ä–∞', expectedCommand: 'SHOW_PRICES' }
    ]
  },
  // –ò–Ω—Ç–µ–Ω—Ç: –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  {
    category: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
    tests: [
      { message: '–ø–æ–∫–∞–∂–∏ —Ä–∞–±–æ—Ç—ã', expectedCommand: 'SHOW_PORTFOLIO' },
      { message: '—Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç –º–∞—Å—Ç–µ—Ä–∞', expectedCommand: 'SHOW_PORTFOLIO' },
      { message: '–ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∏–∂–µ–∫', expectedCommand: 'SHOW_PORTFOLIO' },
      { message: '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', expectedCommand: 'SHOW_PORTFOLIO' },
      { message: '–µ—Å—Ç—å —Ñ–æ—Ç–æ?', expectedCommand: 'SHOW_PORTFOLIO' }
    ]
  },
  // –°–ª–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã
  {
    category: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
    tests: [
      { message: '–º–æ–∂–Ω–æ –≤ –ø—è—Ç–Ω–∏—Ü—É —É—Ç—Ä–æ–º?', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–∑–∞–ø–∏—à–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–≤–µ—á–µ—Ä–æ–º —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–±–æ–¥–Ω–æ?', expectedCommand: 'SEARCH_SLOTS' }
    ]
  },
  // –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å
  {
    category: '–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å',
    tests: [
      { message: '—á–µ –ø–æ —Ü–µ–Ω–∞–º?', expectedCommand: 'SHOW_PRICES' },
      { message: '—Å–∫–æ–∫ —â–∞—Å —Å—Ç—Ä–∏–∂–∫–∞?', expectedCommand: 'SHOW_PRICES' },
      { message: '–∑–∞–ø–∏—à–∏ –ø–ª–∑', expectedCommand: 'SEARCH_SLOTS' },
      { message: '–∫–∞–¥–∞ –º–æ–∂–Ω–∞ –ø—Ä–∏–π—Ç–∏?', expectedCommand: 'SEARCH_SLOTS' }
    ]
  }
];

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runIntentTests() {
  console.log(`\n${colors.cyan}=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤ AI Admin v2 ===${colors.reset}\n`);
  
  let totalTests = 0;
  let passedTests = 0;
  let failedTests = 0;
  let failedCases = [];
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI Admin v2
  const aiAdmin = new AIAdminV2();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  for (const category of testCases) {
    console.log(`\n${colors.blue}üìã ${category.category}:${colors.reset}`);
    
    for (const test of category.tests) {
      totalTests++;
      
      try {
        // –í—ã–∑—ã–≤–∞–µ–º processMessage –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = await aiAdmin.processMessage(
          test.message,
          '79000000001', // —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
          509113 // ID —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        let passed = false;
        let detectedCommand = 'none';
        
        if (result.executedCommands && result.executedCommands.length > 0) {
          detectedCommand = result.executedCommands[0].command;
          passed = detectedCommand === test.expectedCommand;
        } else if (test.expectedCommand === 'none') {
          // –î–ª—è –∫–æ–º–∞–Ω–¥ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
          if (test.expectedText && result.response.toLowerCase().includes(test.expectedText)) {
            passed = true;
          }
        } else {
          passed = false;
        }
        
        if (passed) {
          passedTests++;
          console.log(`  ${colors.green}‚úì${colors.reset} "${test.message}" ‚Üí ${detectedCommand}`);
        } else {
          failedTests++;
          failedCases.push({
            message: test.message,
            expected: test.expectedCommand,
            actual: detectedCommand,
            response: result.response.substring(0, 100) + '...'
          });
          console.log(`  ${colors.red}‚úó${colors.reset} "${test.message}" ‚Üí ${detectedCommand} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expectedCommand})`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        failedTests++;
        console.log(`  ${colors.red}‚úó${colors.reset} "${test.message}" ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(`\n${colors.cyan}=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===${colors.reset}`);
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
  console.log(`${colors.green}–£—Å–ø–µ—à–Ω—ã—Ö: ${passedTests} (${Math.round(passedTests/totalTests*100)}%)${colors.reset}`);
  console.log(`${colors.red}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests} (${Math.round(failedTests/totalTests*100)}%)${colors.reset}`);
  
  // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  if (failedCases.length > 0) {
    console.log(`\n${colors.yellow}‚ö†Ô∏è  –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:${colors.reset}`);
    failedCases.forEach((fail, index) => {
      console.log(`\n${index + 1}. –°–æ–æ–±—â–µ–Ω–∏–µ: "${fail.message}"`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${fail.expected}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${fail.actual}`);
      console.log(`   –û—Ç–≤–µ—Ç AI: ${fail.response}`);
    });
  }
  
  // –û—Ü–µ–Ω–∫–∞
  const score = Math.round(passedTests / totalTests * 10);
  console.log(`\n${colors.magenta}–û—Ü–µ–Ω–∫–∞: ${score}/10${colors.reset}`);
  
  if (score >= 9) {
    console.log(`${colors.green}‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ —Ö–æ—Ä–æ—à–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Ç—ã.${colors.reset}`);
  } else if (score >= 7) {
    console.log(`${colors.yellow}‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å.${colors.reset}`);
  } else {
    console.log(`${colors.red}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤.${colors.reset}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runIntentTests().catch(console.error);