#!/usr/bin/env node

const axios = require('axios');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤
const testScenarios = [
  {
    name: "–û–ø–µ—á–∞—Ç–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö",
    messages: [
      "—Ö–∞—á—É –∑–∞–ø–∏—Å–∞—Ü—Ü–∞",           // –æ–ø–µ—á–∞—Ç–∫–∞ –≤ "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
      "—Ö–æ—á—É –∑–∞–ø–∏—Å—Ç–∞—å—Å—è",          // –æ–ø–µ—á–∞—Ç–∫–∞
      "–∑–∞–ø–∏—Å—Ç—å –º–µ–Ω—è –ø–∂–ª—Å—Ç–∞",      // —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø–µ—á–∞—Ç–∫–∏
      "–∑–∞–ø—Å—å –Ω–∞ –º–∞–Ω–∏–∫—Ä",          // —Å–∏–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
      "—Å—Ç—Ä—á–∫",                    // –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å "—Å—Ç—Ä–∏–∂–∫–∞"
      "–º–Ω–∫—Ä",                     // –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å "–º–∞–Ω–∏–∫—é—Ä"
    ]
  },
  {
    name: "–ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    messages: [
      "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è",               // –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏
      "—Ö–æ—á—É –∑–∞–≤—Ç—Ä–∞",              // –±–µ–∑ —É—Å–ª—É–≥–∏
      "–Ω–∞ 15:00",                 // –±–µ–∑ –¥–∞—Ç—ã –∏ —É—Å–ª—É–≥–∏
      "–∫ –û–ª—å–≥–µ",                  // —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä
      "–º–∞–Ω–∏–∫—é—Ä",                  // —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∞
      "–≤ –ø—è—Ç–Ω–∏—Ü—É",                // –¥–µ–Ω—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    ]
  },
  {
    name: "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
    messages: [
      "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∏ —Å—Ç—Ä–∏–∂–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ 15:00",
      "–∑–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –≤—á–µ—Ä–∞ –Ω–∞ 10 —É—Ç—Ä–∞",
      "—Ö–æ—á—É –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –Ω–æ —á—Ç–æ–±—ã –±–µ–∑ –º–∞–Ω–∏–∫—é—Ä–∞",
      "–∫ –û–ª—å–≥–µ –Ω–æ –Ω–µ –∫ –û–ª—å–≥–µ",
      "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ",
      "—É—Ç—Ä–æ–º –≤ 23:00",
    ]
  },
  {
    name: "–°–ø–∞–º –∏ –ø–æ–≤—Ç–æ—Ä—ã",
    messages: [
      "!!!!!!!!!",
      "–ó–ê–ü–ò–®–ò –ú–ï–ù–Ø –°–†–û–ß–ù–û!!!",
      "–∞",
      "–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞",
      "123123123123123",
      "—Ç–µ—Å—Ç —Ç–µ—Å—Ç —Ç–µ—Å—Ç —Ç–µ—Å—Ç —Ç–µ—Å—Ç",
    ]
  }
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const API_URL = 'http://46.149.70.219:3000';
const TEST_PHONE = '79001234567';
const COMPANY_ID = 962302;
const SECRET_KEY = process.env.SECRET_KEY || 'defaultSecretKey123';

async function sendMessage(phone, message) {
  try {
    const payload = {
      messages: [{
        from: phone,
        body: message,
        type: 'chat',
        timestamp: new Date().toISOString()
      }],
      companyId: COMPANY_ID
    };

    const response = await axios.post(
      `${API_URL}/webhook/whatsapp/ai-admin`,
      payload,
      {
        headers: {
          'Content-Type': 'application/json',
          'X-Hub-Signature': 'test-signature'
        }
      }
    );

    return response.data;
  } catch (error) {
    return { error: error.message };
  }
}

async function waitForResponse(phone, timeout = 10000) {
  console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (${timeout/1000}—Å)...`);
  
  const startTime = Date.now();
  while (Date.now() - startTime < timeout) {
    try {
      const { exec } = require('child_process');
      const command = `ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "tail -20 /root/.pm2/logs/ai-admin-worker-v2-out.log | grep -A5 'ü§ñ Bot response to ${phone}'"`;
      
      const result = await new Promise((resolve) => {
        exec(command, (error, stdout) => {
          resolve(stdout || '');
        });
      });
      
      if (result && result.includes('ü§ñ Bot response')) {
        return result;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return 'Timeout - no response';
}

async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è AI Admin v2\n');
  console.log('=' .repeat(80));

  for (const scenario of testScenarios) {
    console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log('-'.repeat(80));

    for (const message of scenario.messages) {
      console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞: "${message}"`);
      
      const result = await sendMessage(TEST_PHONE, message);
      
      if (result.error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
      } else {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        const response = await waitForResponse(TEST_PHONE);
        
        if (response && response !== 'Timeout - no response') {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
          const responseMatch = response.match(/ü§ñ Bot response to \d+: (.*?)(\n|$)/);
          if (responseMatch) {
            console.log(`ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: ${responseMatch[1]}`);
          } else {
            console.log(`üìù –õ–æ–≥: ${response.substring(0, 200)}...`);
          }
        } else {
          console.log(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç - –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω`);
        }
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  console.log('\n' + '='.repeat(80));
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);