#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ v2
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–Ω–µ–¥—Ä—ë–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
 */

const contextService = require('./src/services/context/context-service-v2');
const smartCache = require('./src/services/cache/smart-cache');
const { metrics } = require('./src/utils/performance-metrics');
const dataLoader = require('./src/services/ai-admin-v2/modules/data-loader');
const logger = require('./src/utils/logger');

const TEST_PHONE = '79001234567';
const TEST_COMPANY_ID = 962302;

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[36m',
  reset: '\x1b[0m'
};

class ContextSystemTestsV2 {
  constructor() {
    this.testResults = [];
    this.testCount = 0;
    this.passedCount = 0;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAll() {
    console.log(`${colors.blue}üß™ Starting Context System v2 Tests${colors.reset}\n`);
    
    await this.testDataLoaderValidation();
    await this.testPhoneFormatConsistency();
    await this.testMemoryFallbackCache();
    await this.testMetadataSizeLimit();
    await this.testHealthCheck();
    await this.testUsageStats();
    await this.testRaceConditionProtection();
    
    this.printSummary();
  }

  /**
   * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è validateInput –≤ data-loader
   */
  async testDataLoaderValidation() {
    this.testCount++;
    console.log(`${colors.blue}Test 1: Data Loader Validation${colors.reset}`);
    
    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ companyId
      const validCompanyId = dataLoader.validateInput(TEST_COMPANY_ID, 'companyId');
      if (validCompanyId !== TEST_COMPANY_ID) {
        throw new Error('Valid companyId validation failed');
      }
      
      // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ companyId
      try {
        dataLoader.validateInput('invalid', 'companyId');
        throw new Error('Should have thrown for invalid companyId');
      } catch (e) {
        if (!e.message.includes('Invalid')) {
          throw e;
        }
      }
      
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const validPhone = dataLoader.validateInput('+79001234567', 'phone');
      if (!validPhone) {
        throw new Error('Valid phone validation failed');
      }
      
      // –¢–µ—Å—Ç saveContext —Å validateInput
      const testContext = {
        currentMessage: 'Test message',
        conversation: []
      };
      
      const testResult = {
        response: 'Test response',
        executedCommands: []
      };
      
      // –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
      await dataLoader.saveContext(TEST_PHONE, TEST_COMPANY_ID, testContext, testResult);
      
      console.log(`${colors.green}‚úÖ Data Loader validation works correctly${colors.reset}`);
      this.passedCount++;
      this.testResults.push({ test: 'DataLoaderValidation', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Data Loader validation failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'DataLoaderValidation', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
   */
  async testPhoneFormatConsistency() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 2: Phone Format Consistency${colors.reset}`);
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      const formats = [
        '79001234567',
        '+79001234567',
        '79001234567@c.us',
        '+79001234567@c.us'
      ];
      
      const keys = new Set();
      
      for (const format of formats) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const key = contextService._getKey('test', TEST_COMPANY_ID, format);
        keys.add(key);
      }
      
      // –í—Å–µ –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
      if (keys.size !== 1) {
        throw new Error(`Inconsistent keys generated: ${Array.from(keys).join(', ')}`);
      }
      
      const normalizedKey = Array.from(keys)[0];
      console.log(`  Normalized key format: ${normalizedKey}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç + –∏ @c.us
      if (normalizedKey.includes('+') || normalizedKey.includes('@')) {
        throw new Error('Key contains special characters that should be normalized');
      }
      
      console.log(`${colors.green}‚úÖ Phone format consistency maintained${colors.reset}`);
      this.passedCount++;
      this.testResults.push({ test: 'PhoneFormatConsistency', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Phone format test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'PhoneFormatConsistency', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ memory fallback cache
   */
  async testMemoryFallbackCache() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 3: Memory Fallback Cache${colors.reset}`);
    
    try {
      const testKey = 'test_memory_fallback';
      const testData = { test: true, timestamp: Date.now() };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ memory cache –Ω–∞–ø—Ä—è–º—É—é
      smartCache._saveToMemoryCache(testKey, testData, 5000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ memory cache
      const retrieved = smartCache._getFromMemoryCache(testKey);
      
      if (!retrieved || retrieved.test !== testData.test) {
        throw new Error('Memory cache save/retrieve failed');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      await new Promise(resolve => setTimeout(resolve, 5100));
      const expiredData = smartCache._getFromMemoryCache(testKey);
      
      if (expiredData !== null) {
        throw new Error('Memory cache TTL not working');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
      const oldMaxSize = smartCache.memoryCacheMaxSize;
      smartCache.memoryCacheMaxSize = 5;
      
      for (let i = 0; i < 10; i++) {
        smartCache._saveToMemoryCache(`test_${i}`, { i }, 60000);
      }
      
      if (smartCache.memoryCache.size > 5) {
        throw new Error('Memory cache size limit not enforced');
      }
      
      smartCache.memoryCacheMaxSize = oldMaxSize;
      
      console.log(`${colors.green}‚úÖ Memory fallback cache works correctly${colors.reset}`);
      console.log(`  Memory cache size: ${smartCache.memoryCache.size}`);
      console.log(`  Fallback used count: ${smartCache.stats.memoryFallbackUsed}`);
      
      this.passedCount++;
      this.testResults.push({ test: 'MemoryFallbackCache', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Memory cache test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'MemoryFallbackCache', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ metadata
   */
  async testMetadataSizeLimit() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 4: Metadata Size Limit${colors.reset}`);
    
    try {
      // –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–æ–π metadata –æ–±—ä–µ–∫—Ç (–±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
      const largeString = 'x'.repeat(500);
      const largeMetadata = {
        bigString: largeString,
        anotherBigString: 'y'.repeat(400),
        normalField: 'normal',
        objectField: { nested: { deep: 'value' } },
        arrayField: [1, 2, 3, 4, 5]
      };
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å –±–æ–ª—å—à–∏–º metadata
      metrics._recordMetric('test_metric', {
        duration: 100,
        success: true,
        metadata: largeMetadata,
        timestamp: new Date().toISOString()
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—É—é –º–µ—Ç—Ä–∏–∫—É
      const metric = metrics.metrics.get('test_metric');
      const lastEntry = metric.history[metric.history.length - 1];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ metadata –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
      if (!lastEntry.metadata._truncated) {
        throw new Error('Large metadata was not truncated');
      }
      
      if (lastEntry.metadata.bigString.length > 103) { // 100 + '...'
        throw new Error('String field was not truncated properly');
      }
      
      if (lastEntry.metadata.anotherBigString && lastEntry.metadata.anotherBigString.length > 103) {
        throw new Error('Second string field was not truncated properly');
      }
      
      if (lastEntry.metadata.objectField !== '[object]') {
        throw new Error('Object field was not replaced');
      }
      
      console.log(`${colors.green}‚úÖ Metadata size limiting works${colors.reset}`);
      console.log(`  Original string length: ${largeString.length}`);
      console.log(`  Truncated string length: ${lastEntry.metadata.bigString.length}`);
      
      this.passedCount++;
      this.testResults.push({ test: 'MetadataSizeLimit', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Metadata limit test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'MetadataSizeLimit', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
   */
  async testHealthCheck() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 5: Health Check${colors.reset}`);
    
    try {
      const health = await contextService.healthCheck();
      
      if (!health.status || !health.checks) {
        throw new Error('Health check returned invalid structure');
      }
      
      console.log(`  Overall status: ${health.status}`);
      console.log(`  Redis status: ${health.checks.redis.status}`);
      
      if (health.checks.redis.status === 'healthy') {
        console.log(`    Response time: ${health.checks.redis.responseTime}`);
      }
      
      if (health.checks.memory) {
        console.log(`  Memory status: ${health.checks.memory.status}`);
        console.log(`    Usage: ${health.checks.memory.usage}`);
        console.log(`    Total keys: ${health.checks.memory.totalKeys}`);
      }
      
      if (health.checks.performance) {
        console.log(`  Performance status: ${health.checks.performance.status}`);
        console.log(`    Write time: ${health.checks.performance.writeTime}`);
        console.log(`    Read time: ${health.checks.performance.readTime}`);
      }
      
      console.log(`${colors.green}‚úÖ Health check system works${colors.reset}`);
      this.passedCount++;
      this.testResults.push({ test: 'HealthCheck', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Health check test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'HealthCheck', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ usage stats
   */
  async testUsageStats() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 6: Usage Statistics${colors.reset}`);
    
    try {
      // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await contextService.updateDialogContext(TEST_PHONE, TEST_COMPANY_ID, {
        state: 'test',
        selection: { service: 'test' }
      });
      
      await contextService.saveClientCache(TEST_PHONE, TEST_COMPANY_ID, {
        id: 1,
        name: 'Test Client'
      });
      
      await contextService.addMessage(TEST_PHONE, TEST_COMPANY_ID, {
        role: 'user',
        content: 'Test message'
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await contextService.getUsageStats(TEST_COMPANY_ID);
      
      if (!stats) {
        throw new Error('Usage stats returned null');
      }
      
      console.log(`  Total contexts: ${stats.totalContexts}`);
      console.log(`  Active dialogs: ${stats.activeDialogs}`);
      console.log(`  Cached clients: ${stats.cachedClients}`);
      console.log(`  Message histories: ${stats.messageHistories}`);
      console.log(`  Average context size: ${stats.avgContextSize} bytes`);
      
      if (stats.totalContexts === 0) {
        throw new Error('No contexts found in usage stats');
      }
      
      console.log(`${colors.green}‚úÖ Usage statistics collection works${colors.reset}`);
      this.passedCount++;
      this.testResults.push({ test: 'UsageStats', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Usage stats test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'UsageStats', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç race conditions
   */
  async testRaceConditionProtection() {
    this.testCount++;
    console.log(`\n${colors.blue}Test 7: Race Condition Protection${colors.reset}`);
    
    try {
      const updates = [];
      const updateCount = 10;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      for (let i = 0; i < updateCount; i++) {
        updates.push(
          contextService.updateDialogContext(TEST_PHONE, TEST_COMPANY_ID, {
            state: `state_${i}`,
            selection: {
              service: `service_${i}`,
              staff: i
            }
          })
        );
      }
      
      const results = await Promise.allSettled(updates);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const successful = results.filter(r => r.status === 'fulfilled' && r.value.success);
      
      console.log(`  Parallel updates: ${updateCount}`);
      console.log(`  Successful updates: ${successful.length}`);
      
      if (successful.length < updateCount * 0.8) {
        throw new Error('Too many updates failed due to race conditions');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const finalContext = await contextService.getDialogContext(TEST_PHONE, TEST_COMPANY_ID);
      
      if (!finalContext) {
        throw new Error('Final context is null after updates');
      }
      
      console.log(`  Final state: ${finalContext.state}`);
      console.log(`  Final selection service: ${finalContext.selection?.service}`);
      
      console.log(`${colors.green}‚úÖ Race condition protection works${colors.reset}`);
      this.passedCount++;
      this.testResults.push({ test: 'RaceConditionProtection', status: 'PASS' });
      
    } catch (error) {
      console.error(`${colors.red}‚ùå Race condition test failed:${colors.reset}`, error.message);
      this.testResults.push({ test: 'RaceConditionProtection', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  printSummary() {
    console.log(`\n${'='.repeat(50)}`);
    console.log(`${colors.blue}üìä Test Results Summary${colors.reset}`);
    console.log(`${'='.repeat(50)}`);
    
    this.testResults.forEach(result => {
      const icon = result.status === 'PASS' ? '‚úÖ' : '‚ùå';
      const color = result.status === 'PASS' ? colors.green : colors.red;
      console.log(`${icon} ${result.test}: ${color}${result.status}${colors.reset}`);
      if (result.error) {
        console.log(`   Error: ${result.error}`);
      }
    });
    
    console.log(`\n${'='.repeat(50)}`);
    const successRate = Math.round((this.passedCount / this.testCount) * 100);
    const summaryColor = successRate === 100 ? colors.green : 
                         successRate >= 80 ? colors.yellow : 
                         colors.red;
    
    console.log(`Total: ${this.passedCount}/${this.testCount} tests passed`);
    console.log(`Success Rate: ${summaryColor}${successRate}%${colors.reset}`);
    
    if (successRate === 100) {
      console.log(`\n${colors.green}üéâ All tests passed! Context system v2 improvements are working correctly.${colors.reset}`);
    } else if (successRate >= 80) {
      console.log(`\n${colors.yellow}‚ö†Ô∏è Most tests passed, but some issues need attention.${colors.reset}`);
    } else {
      console.log(`\n${colors.red}‚ö†Ô∏è Multiple tests failed. Please review the errors above.${colors.reset}`);
    }
    
    console.log(`${'='.repeat(50)}\n`);
    
    // Cleanup
    this.cleanup();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
   */
  async cleanup() {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await contextService.clearDialogContext(TEST_PHONE, TEST_COMPANY_ID);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
      metrics.stop();
      
      console.log(`${colors.blue}Cleanup completed${colors.reset}`);
    } catch (error) {
      console.error('Cleanup error:', error);
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    process.exit(this.passedCount === this.testCount ? 0 : 1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new ContextSystemTestsV2();
  await tester.runAll();
}

main().catch(error => {
  console.error(`${colors.red}Fatal error:${colors.reset}`, error);
  process.exit(1);
});