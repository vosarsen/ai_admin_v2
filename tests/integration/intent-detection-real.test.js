require('dotenv').config();
const AIAdminV2 = require('../../src/services/ai-admin-v2');
const logger = require('../../src/utils/logger');

// –†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å AI Admin v2
describe('AI Admin v2 - Real Intent Detection', () => {
  let aiAdmin;
  const testPhone = '79000000001'; // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
  const testCompanyId = process.env.TEST_COMPANY_ID || 509113; // ID —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

  beforeAll(async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI Admin v2
    aiAdmin = new AIAdminV2();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    const companyInfo = await aiAdmin.yclientsService.getCompanyInfo(testCompanyId);
    expect(companyInfo).toBeDefined();
    expect(companyInfo.id).toBe(testCompanyId);
    
    logger.info(`–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π: ${companyInfo.title}`);
  });

  describe('1. –ë–∞–∑–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π', () => {
    test('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞: –∑–∞–ø–∏—Å—å', async () => {
      const testMessages = [
        '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        '–∑–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
        '–Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É',
        '—Ö–æ—á—É –ø—Ä–∏–π—Ç–∏ –∫ –≤–∞–º'
      ];

      for (const message of testMessages) {
        console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –ø–æ–Ω—è–ª –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
        expect(response.toLowerCase()).toMatch(/–∑–∞–ø–∏—Å|—É—Å–ª—É–≥|–º–∞—Å—Ç–µ—Ä|–≤—Ä–µ–º—è|–∫–æ–≥–¥–∞|—Å–≤–æ–±–æ–¥–Ω/);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏
        expect(response.toLowerCase()).not.toMatch(/–Ω–µ –ø–æ–Ω—è–ª|–Ω–µ –ø–æ–Ω–∏–º–∞—é|–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ/);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞: –æ—Ç–º–µ–Ω–∞', async () => {
      const testMessages = [
        '–Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
        '—Ö–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å',
        '–Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏',
        '–æ—Ç–º–µ–Ω–∏—Ç–µ –º–æ—é –∑–∞–ø–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
      ];

      for (const message of testMessages) {
        console.log(`\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –ø–æ–Ω—è–ª –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–∏—Ç—å
        expect(response.toLowerCase()).toMatch(/–æ—Ç–º–µ–Ω|–∑–∞–ø–∏—Å|–Ω–µ –Ω–∞–π–¥–µ–Ω|–Ω–µ—Ç.*–∑–∞–ø–∏—Å/);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ + –¥–∞—Ç–∞', async () => {
      const testMessages = [
        '—Å–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞?',
        '–µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?',
        '–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        '–ø–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö'
      ];

      for (const message of testMessages) {
        console.log(`\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è/—Å–ª–æ—Ç—ã
        expect(response).toMatch(/\d{1,2}:\d{2}|–≤—Ä–µ–º—è|—Å–ª–æ—Ç|—Å–≤–æ–±–æ–¥–Ω|–¥–æ—Å—Ç—É–ø–Ω|–º–æ–∂–µ—Ç–µ.*–∑–∞–ø–∏—Å/i);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∞—Ç
        if (message.includes('–∑–∞–≤—Ç—Ä–∞')) {
          expect(response.toLowerCase()).toMatch(/–∑–∞–≤—Ç—Ä–∞/);
        }
        if (message.includes('–≤—ã—Ö–æ–¥–Ω')) {
          expect(response.toLowerCase()).toMatch(/—Å—É–±–±–æ—Ç|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω|–≤—ã—Ö–æ–¥–Ω/);
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });

    test('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞: —Ü–µ–Ω—ã (—Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏)', async () => {
      const testMessages = [
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?',
        '–∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–Ω—ã?',
        '–ø—Ä–∞–π—Å –ª–∏—Å—Ç',
        '—Å–∫–æ–∫ —Å—Ç–æ–∏—Ç –ø–æ–∫—Ä–∞—Å–∫–∞', // –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –æ–ø–µ—á–∞—Ç–∫–∞
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω–∏–∫—é—Ä–∞'
      ];

      for (const message of testMessages) {
        console.log(`\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã
        expect(response).toMatch(/\d+.*—Ä—É–±|—Ü–µ–Ω|—Å—Ç–æ–∏–º–æ—Å—Ç|–ø—Ä–∞–π—Å|—Å—Ç–æ–∏—Ç/i);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });
  });

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π', () => {
    test('–ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç', async () => {
      const testCases = [
        { message: '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞?', shouldContain: ['–∑–∞–≤—Ç—Ä–∞'] },
        { message: '–µ—Å—Ç—å –≤—Ä–µ–º—è –≤ –ø—è—Ç–Ω–∏—Ü—É?', shouldContain: ['–ø—è—Ç–Ω–∏—Ü'] },
        { message: '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –º–æ–∂–Ω–æ?', shouldContain: ['–Ω–µ–¥–µ–ª'] },
        { message: '–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω–æ?', shouldContain: ['—Å—É–±–±–æ—Ç', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω', '–≤—ã—Ö–æ–¥–Ω'] }
      ];

      for (const { message, shouldContain } of testCases) {
        console.log(`\nüóìÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const containsExpected = shouldContain.some(word => 
          response.toLowerCase().includes(word.toLowerCase())
        );
        expect(containsExpected).toBe(true);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });

    test('–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', async () => {
      const testMessages = [
        '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 15:00?',
        '–µ—Å—Ç—å –≤—Ä–µ–º—è –∫ 3 —á–∞—Å–∞–º –¥–Ω—è?',
        '—Å–≤–æ–±–æ–¥–Ω–æ –≤ 10 —É—Ç—Ä–∞?',
        '–º–æ–∂–Ω–æ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ 18:00?'
      ];

      for (const message of testMessages) {
        console.log(`\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        expect(response).toMatch(/\d{1,2}:\d{2}|—á–∞—Å|—É—Ç—Ä|–≤–µ—á–µ—Ä|–≤—Ä–µ–º—è/i);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });
  });

  describe('–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏', () => {
    test('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const testCases = [
        {
          message: '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞ –∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞?',
          shouldMatch: [/\d+.*—Ä—É–±|—Ü–µ–Ω|—Å—Ç–æ–∏—Ç/, /–∑–∞–≤—Ç—Ä–∞|–≤—Ä–µ–º—è|–∑–∞–ø–∏—Å/]
        },
        {
          message: '–ø–æ–∫–∞–∂–∏ —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ú–∞—Ä–∏–Ω–µ',
          shouldMatch: [/–º–∞–Ω–∏–∫—é—Ä/, /–ú–∞—Ä–∏–Ω|–º–∞—Å—Ç–µ—Ä/]
        }
      ];

      for (const { message, shouldMatch } of testCases) {
        console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 200)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for (const pattern of shouldMatch) {
          expect(response).toMatch(pattern);
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });

    test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', async () => {
      const testMessages = [
        'asdfghjkl',
        '123456789',
        '—ã—ã—ã—ã—ã'
      ];

      for (const message of testMessages) {
        console.log(`\n‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ: "${message}"`);
        
        const response = await aiAdmin.processMessage(message, testPhone, testCompanyId);
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.substring(0, 150)}...`);
        
        // AI –¥–æ–ª–∂–µ–Ω –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–º–æ—â—å
        expect(response).toMatch(/–ø–æ–º–æ—á—å|—É—Å–ª—É–≥|–∑–∞–ø–∏—Å|—É—Ç–æ—á–Ω–∏—Ç|–Ω–µ –ø–æ–Ω—è–ª/i);
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    });
  });

  afterAll(() => {
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  });
});