#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ YClients
 */

const companyInfoSync = require('./src/sync/company-info-sync');
const { supabase } = require('./src/database/supabase');

async function testCompanySync() {
  console.log('üîÑ Testing company info sync from YClients...\n');

  const companyId = 962302; // ID —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    console.log('üìä Checking current data in database...');
    const { data: currentData, error: fetchError } = await supabase
      .from('companies')
      .select('*')
      .eq('company_id', companyId)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') {
      throw fetchError;
    }

    if (currentData) {
      console.log('‚úÖ Found existing company data:');
      console.log(`   Title: ${currentData.title}`);
      console.log(`   Address: ${currentData.address}`);
      console.log(`   Phone: ${currentData.phone}`);
      console.log(`   Timezone: ${currentData.timezone}`);
      console.log(`   Updated: ${currentData.updated_at}\n`);
    } else {
      console.log('‚ùå No company data found in database\n');
    }

    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ YClients
    console.log('üîÑ Syncing data from YClients API...');
    const syncedData = await companyInfoSync.syncCompanyInfo(companyId);

    console.log('\n‚úÖ Successfully synced company data:');
    console.log(`   Title: ${syncedData.title}`);
    console.log(`   Address: ${syncedData.address}`);
    console.log(`   Phone: ${syncedData.phone}`);
    console.log(`   Timezone: ${syncedData.timezone}`);
    console.log(`   Business Type: ${syncedData.business_type}`);
    
    if (syncedData.working_hours) {
      console.log('\nüìÖ Working Hours:');
      const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
      days.forEach(day => {
        if (syncedData.working_hours[day]) {
          const hours = syncedData.working_hours[day];
          console.log(`   ${day}: ${hours.start} - ${hours.end}`);
        }
      });
    }

    if (syncedData.social_links) {
      console.log('\nüåê Social Links:');
      Object.entries(syncedData.social_links).forEach(([platform, link]) => {
        if (link) {
          console.log(`   ${platform}: ${link}`);
        }
      });
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ data-loader
    console.log('\n\nüß™ Testing auto-sync through data-loader...');
    const dataLoader = require('./src/services/ai-admin-v2/modules/data-loader');
    
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
    console.log('üóëÔ∏è  Temporarily deleting company data...');
    await supabase
      .from('companies')
      .delete()
      .eq('company_id', companyId);

    console.log('üì• Loading company through data-loader (should trigger sync)...');
    const loadedData = await dataLoader.loadCompany(companyId);

    console.log('‚úÖ Data loaded successfully:');
    console.log(`   Title: ${loadedData.title}`);
    console.log(`   Auto-synced: ${loadedData.updated_at ? 'Yes' : 'No'}`);

    console.log('\n‚ú® Company sync test completed successfully!');

  } catch (error) {
    console.error('\n‚ùå Error during test:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCompanySync();