// test/cleanup-test-data.js
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const Redis = require('ioredis');
const config = require('../src/config');
const logger = require('../src/utils/logger');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class TestDataCleaner {
  constructor() {
    this.testPhonePrefix = process.env.TEST_CLIENT_PHONE || '79999999999';
    this.yclientsApi = axios.create({
      baseURL: 'https://api.yclients.com/api/v1',
      headers: {
        'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.yclients.v2+json'
      }
    });
    
    // Initialize connections
    this.redis = new Redis(config.redis.url, {
      password: config.redis.password
    });
    
    this.supabase = createClient(
      config.database.supabaseUrl,
      config.database.supabaseKey
    );
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ YClients —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
   */
  async cleanYClientsBookings() {
    console.log('üßπ Cleaning YClients test bookings...');
    
    try {
      // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const today = new Date();
      const weekAgo = new Date(today);
      weekAgo.setDate(weekAgo.getDate() - 7);
      
      const response = await this.yclientsApi.get(`/records/${config.yclients.companyId}`, {
        params: {
          start_date: weekAgo.toISOString().split('T')[0],
          end_date: today.toISOString().split('T')[0]
        }
      });
      
      const testRecords = response.data.data.filter(record => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        return record.client && record.client.phone && 
               record.client.phone.includes(this.testPhonePrefix.slice(-10));
      });
      
      console.log(`Found ${testRecords.length} test bookings`);
      
      // –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      for (const record of testRecords) {
        try {
          await this.yclientsApi.delete(`/records/${config.yclients.companyId}/${record.id}`);
          console.log(`‚ùå Cancelled booking #${record.id}`);
        } catch (error) {
          console.error(`Failed to cancel booking #${record.id}:`, error.message);
        }
      }
      
    } catch (error) {
      console.error('Error cleaning YClients bookings:', error.message);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
   */
  async cleanRedisData() {
    console.log('üßπ Cleaning Redis test data...');
    
    try {
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const patterns = [
        `context:${this.testPhonePrefix}*`,
        `messages:${this.testPhonePrefix}*`,
        `client:${this.testPhonePrefix}*`,
        `booking:${this.testPhonePrefix}*`,
        'test-*' // –õ—é–±—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
      ];
      
      for (const pattern of patterns) {
        const keys = await this.redis.keys(pattern);
        if (keys.length > 0) {
          await this.redis.del(...keys);
          console.log(`üóëÔ∏è  Deleted ${keys.length} keys matching pattern: ${pattern}`);
        }
      }
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—á–µ—Ä–µ–¥–∏
      const testQueues = ['test-whatsapp-messages', 'test-reminders'];
      for (const queueName of testQueues) {
        const queueKeys = await this.redis.keys(`bull:${queueName}:*`);
        if (queueKeys.length > 0) {
          await this.redis.del(...queueKeys);
          console.log(`üóëÔ∏è  Cleaned queue: ${queueName}`);
        }
      }
      
    } catch (error) {
      console.error('Error cleaning Redis data:', error.message);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
   */
  async cleanSupabaseData() {
    console.log('üßπ Cleaning Supabase test data...');
    
    try {
      // –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
      const { data: clients, error: clientError } = await this.supabase
        .from('clients')
        .delete()
        .match({ phone: this.testPhonePrefix });
      
      if (clientError) throw clientError;
      
      console.log(`üóëÔ∏è  Deleted test clients`);
      
      // –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      const { data: bookings, error: bookingError } = await this.supabase
        .from('bookings')
        .delete()
        .like('client_phone', `${this.testPhonePrefix}%`);
      
      if (bookingError) throw bookingError;
      
      console.log(`üóëÔ∏è  Deleted test bookings`);
      
    } catch (error) {
      console.error('Error cleaning Supabase data:', error.message);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
   */
  async showStats() {
    console.log('\nüìä Test Data Statistics:');
    console.log('=' . repeat(50));
    
    // Redis stats
    const redisKeys = await this.redis.dbsize();
    console.log(`Redis keys: ${redisKeys}`);
    
    // Queue stats
    const messageQueue = await this.redis.keys('bull:test-whatsapp-messages:*');
    const reminderQueue = await this.redis.keys('bull:test-reminders:*');
    console.log(`Test message queue items: ${messageQueue.length}`);
    console.log(`Test reminder queue items: ${reminderQueue.length}`);
    
    console.log('');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É
   */
  async cleanAll() {
    console.log('üöÄ Starting test data cleanup...');
    console.log(`üì± Test phone pattern: ${this.testPhonePrefix}`);
    console.log('');
    
    await this.showStats();
    
    // –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const answer = await new Promise(resolve => {
      readline.question('\n‚ö†Ô∏è  This will delete all test data. Continue? (y/N): ', resolve);
    });
    
    readline.close();
    
    if (answer.toLowerCase() !== 'y') {
      console.log('‚ùå Cleanup cancelled');
      return;
    }
    
    console.log('');
    
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
    await this.cleanRedisData();
    await this.cleanSupabaseData();
    await this.cleanYClientsBookings();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n‚úÖ Cleanup completed!');
    await this.showStats();
    
    // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await this.redis.quit();
  }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
if (require.main === module) {
  const cleaner = new TestDataCleaner();
  
  cleaner.cleanAll()
    .then(() => {
      console.log('\nüëç All done!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Fatal error:', error);
      process.exit(1);
    });
}

module.exports = TestDataCleaner;