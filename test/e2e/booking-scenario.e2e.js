#!/usr/bin/env node

// test/e2e/booking-scenario.e2e.js
const axios = require('axios');
const crypto = require('crypto');
const { spawn } = require('child_process');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || 'test-secret';
const API_KEY = process.env.API_KEY || 'test-api-key';

// –£—Ç–∏–ª–∏—Ç—ã
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const generateSignature = (payload) => {
  return 'sha256=' + crypto
    .createHmac('sha256', WEBHOOK_SECRET)
    .update(JSON.stringify(payload))
    .digest('hex');
};

// –ö–ª–∞—Å—Å –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class BookingE2ETest {
  constructor() {
    this.apiClient = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'X-API-Key': API_KEY
      }
    });
    
    this.testPhone = '79999999999'; // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
    this.testPhoneWhatsApp = `${this.testPhone}@c.us`;
    this.processes = [];
  }

  async startServices() {
    console.log('üöÄ Starting services...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    const apiProcess = spawn('npm', ['start'], {
      cwd: path.join(__dirname, '../..'),
      env: { ...process.env, NODE_ENV: 'test' }
    });
    
    this.processes.push(apiProcess);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º worker
    const workerProcess = spawn('npm', ['run', 'worker:v2'], {
      cwd: path.join(__dirname, '../..'),
      env: { ...process.env, NODE_ENV: 'test' }
    });
    
    this.processes.push(workerProcess);
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    await sleep(5000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    try {
      const health = await this.apiClient.get('/health');
      console.log('‚úÖ Services started:', health.data);
    } catch (error) {
      throw new Error('Services failed to start');
    }
  }

  async stopServices() {
    console.log('üõë Stopping services...');
    
    for (const process of this.processes) {
      process.kill('SIGTERM');
    }
    
    await sleep(2000);
  }

  async sendWebhook(message, type = 'chat') {
    const payload = {
      id: `msg-${Date.now()}`,
      from: this.testPhoneWhatsApp,
      body: message,
      type: type,
      timestamp: Math.floor(Date.now() / 1000)
    };
    
    const response = await this.apiClient.post('/webhook/whatsapp', payload, {
      headers: {
        'X-Hub-Signature': generateSignature(payload)
      }
    });
    
    return response.data;
  }

  async waitForProcessing(jobId, maxAttempts = 30) {
    console.log(`‚è≥ Waiting for job ${jobId} to complete...`);
    
    for (let i = 0; i < maxAttempts; i++) {
      const metrics = await this.apiClient.get('/api/metrics');
      
      if (metrics.data.metrics.active === 0 && metrics.data.metrics.waiting === 0) {
        console.log('‚úÖ Job processed');
        return true;
      }
      
      await sleep(1000);
    }
    
    throw new Error('Job processing timeout');
  }

  async runScenario(name, steps) {
    console.log(`\nüìã Running scenario: ${name}`);
    console.log('‚ïê'.repeat(50));
    
    const results = [];
    
    for (const [index, step] of steps.entries()) {
      console.log(`\nüìç Step ${index + 1}: ${step.description}`);
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const webhookResult = await this.sendWebhook(step.message, step.type);
        console.log('  ‚úÖ Webhook accepted:', webhookResult);
        
        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (webhookResult.jobId) {
          await this.waitForProcessing(webhookResult.jobId);
        }
        
        // –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if (step.wait) {
          await sleep(step.wait);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        if (step.validate) {
          await step.validate();
          console.log('  ‚úÖ Validation passed');
        }
        
        results.push({
          step: index + 1,
          success: true,
          description: step.description
        });
        
      } catch (error) {
        console.error(`  ‚ùå Step failed:`, error.message);
        results.push({
          step: index + 1,
          success: false,
          description: step.description,
          error: error.message
        });
        
        if (!step.continueOnError) {
          break;
        }
      }
    }
    
    return results;
  }
}

// –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const scenarios = {
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  newClientBooking: {
    name: 'New Client Booking',
    steps: [
      {
        description: 'Send greeting',
        message: '–ü—Ä–∏–≤–µ—Ç!',
        validate: async () => {
          // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API –∏–ª–∏ –ë–î
          console.log('  üì® Bot should respond with greeting');
        }
      },
      {
        description: 'Request booking',
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä',
        wait: 2000,
        validate: async () => {
          console.log('  üì® Bot should show available services');
        }
      },
      {
        description: 'Select service',
        message: '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
        wait: 2000,
        validate: async () => {
          console.log('  üì® Bot should show available time slots');
        }
      },
      {
        description: 'Select time',
        message: '–ó–∞–≤—Ç—Ä–∞ –≤ 15:00',
        wait: 2000,
        validate: async () => {
          console.log('  üì® Bot should confirm booking');
        }
      }
    ]
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
  cancelBooking: {
    name: 'Cancel Booking',
    steps: [
      {
        description: 'Request cancellation',
        message: '–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
        validate: async () => {
          console.log('  üì® Bot should show active bookings');
        }
      },
      {
        description: 'Confirm cancellation',
        message: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
        wait: 2000,
        validate: async () => {
          console.log('  üì® Bot should confirm cancellation');
        }
      }
    ]
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  errorHandling: {
    name: 'Error Handling',
    steps: [
      {
        description: 'Send invalid message type',
        message: '',
        type: 'location',
        continueOnError: true,
        validate: async () => {
          console.log('  üì® Bot should handle location gracefully');
        }
      },
      {
        description: 'Send voice message',
        message: '',
        type: 'ptt',
        continueOnError: true,
        validate: async () => {
          console.log('  üì® Bot should explain voice not supported');
        }
      },
      {
        description: 'Request non-existent service',
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂',
        validate: async () => {
          console.log('  üì® Bot should suggest available services');
        }
      }
    ]
  },

  // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ë–∞—Ç—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  batchedMessages: {
    name: 'Batched Messages',
    steps: [
      {
        description: 'Send multiple messages quickly',
        message: '–ü—Ä–∏–≤–µ—Ç',
        wait: 100
      },
      {
        description: 'Second message',
        message: '–ö–∞–∫ –¥–µ–ª–∞?',
        wait: 100
      },
      {
        description: 'Third message',
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        wait: 5000, // –ñ–¥–µ–º –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        validate: async () => {
          console.log('  üì® Bot should process all messages as batch');
        }
      }
    ]
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runE2ETests() {
  console.log('üß™ AI Admin v2 E2E Test Suite');
  console.log('‚ïê'.repeat(50));
  
  const tester = new BookingE2ETest();
  const results = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await tester.startServices();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    for (const [key, scenario] of Object.entries(scenarios)) {
      const scenarioResults = await tester.runScenario(scenario.name, scenario.steps);
      results.push({
        scenario: scenario.name,
        results: scenarioResults
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
      await sleep(3000);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä Test Results Summary');
    console.log('‚ïê'.repeat(50));
    
    for (const result of results) {
      const passed = result.results.filter(r => r.success).length;
      const total = result.results.length;
      const status = passed === total ? '‚úÖ' : '‚ùå';
      
      console.log(`${status} ${result.scenario}: ${passed}/${total} passed`);
      
      for (const step of result.results) {
        if (!step.success) {
          console.log(`  ‚ùå Step ${step.step}: ${step.error}`);
        }
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå E2E Test Failed:', error);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await tester.stopServices();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runE2ETests().catch(console.error);
}

module.exports = { BookingE2ETest, scenarios };