#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
 * - –í—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */

const axios = require('axios');
const { YclientsClient } = require('./src/integrations/yclients/client');
const logger = require('./src/utils/logger');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const API_URL = process.env.AI_ADMIN_API_URL || 'http://46.149.70.219:3000';
const SECRET_KEY = process.env.SECRET_KEY || 'test-secret-key-2024';
const TEST_PHONE = process.env.TEST_PHONE || '79001234567';
const COMPANY_ID = 962302;

// –ö–ª–∏–µ–Ω—Ç YClients –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const yclientsClient = new YclientsClient();

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendTestMessage(message) {
  try {
    const crypto = require('crypto');
    const timestamp = Date.now();
    const data = JSON.stringify({
      phone: TEST_PHONE,
      message: message,
      timestamp: timestamp
    });
    
    const signature = crypto
      .createHmac('sha256', SECRET_KEY)
      .update(data)
      .digest('hex');
    
    logger.info(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}"`);
    
    const response = await axios.post(
      `${API_URL}/webhook/whatsapp/batched`,
      {
        phone: TEST_PHONE,
        message: message,
        timestamp: timestamp
      },
      {
        headers: {
          'X-Signature': signature,
          'Content-Type': 'application/json'
        }
      }
    );
    
    logger.info('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.data);
    return response.data;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
 */
async function createTestBooking() {
  logger.info('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...');
  
  const bookingData = {
    phone: TEST_PHONE,
    fullname: '–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç',
    email: 'test@example.com',
    comment: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞',
    appointments: [{
      id: 1,
      services: [18356010], // –ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê
      staff_id: 2895125, // –°–µ—Ä–≥–µ–π
      datetime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString() // –ß–µ—Ä–µ–∑ 2 –¥–Ω—è
    }]
  };
  
  const result = await yclientsClient.createBooking(bookingData, COMPANY_ID);
  
  if (result.success) {
    logger.info('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', result.data);
    return result.data?.[0]?.id || result.data?.id;
  } else {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å:', result.error);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
 */
async function runTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏...\n');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏
    logger.info('=== –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ ===');
    await sendTestMessage('–•–æ—á—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 16:00');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
    logger.info('\n=== –¢–ï–°–¢ 2: –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è ===');
    await sendTestMessage('–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –º–æ—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 15:00');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–Ω–æ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    logger.info('\n=== –¢–ï–°–¢ 3: –ü–µ—Ä–µ–Ω–æ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ===');
    await sendTestMessage('–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å?');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    logger.info('\n=== –¢–ï–°–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏ ===');
    const bookingId = await createTestBooking();
    if (bookingId) {
      logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å: ${bookingId}`);
    }
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–Ω–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    logger.info('\n=== –¢–ï–°–¢ 5: –ü–µ—Ä–µ–Ω–æ—Å —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π ===');
    await sendTestMessage('–•–æ—á—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç 6: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    logger.info('\n=== –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–∞–∑ ===');
    const testPhrases = [
      '–ò–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 17:00',
      '–ú–æ–∂–Ω–æ –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è? –ó–∞–≤—Ç—Ä–∞ –≤ 14:00',
      '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤—Ä–µ–º—è, –¥–∞–≤–∞–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å',
      '–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤–∏–∑–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é'
    ];
    
    for (const phrase of testPhrases) {
      logger.info(`\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É: "${phrase}"`);
      await sendTestMessage(phrase);
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    logger.info('\n=== –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===');
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ reminder —Å–µ—Ä–≤–∏—Å–∞
    logger.info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ reminder —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
  
  logger.info('\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  logger.info('\nüìã –ò—Ç–æ–≥–∏ —É–ª—É—á—à–µ–Ω–∏–π:');
  logger.info('1. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º');
  logger.info('2. ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö');
  logger.info('3. ‚úÖ –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ AI');
  logger.info('4. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ');
  logger.info('5. ‚è≥ –í –ø–ª–∞–Ω–∞—Ö: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ');
  logger.info('6. ‚è≥ –í –ø–ª–∞–Ω–∞—Ö: –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);