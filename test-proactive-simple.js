#!/usr/bin/env node
// test-proactive-simple.js - –¢–µ—Å—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ AI –±–µ–∑ Redis

// –ú–æ–∫ Smart Cache –±–µ–∑ Redis
const mockSmartCache = {
  async getOrCompute(key, computeFn, options = {}) {
    // –í—Å–µ–≥–¥–∞ –≤—ã—á–∏—Å–ª—è–µ–º, –Ω–µ –∫—ç—à–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
    return await computeFn();
  }
};

// –ü–æ–¥–º–µ–Ω—è–µ–º smart-cache
require.cache[require.resolve('./src/services/cache/smart-cache')] = {
  exports: mockSmartCache
};

const proactiveSuggestions = require('./src/services/ai/proactive-suggestions');

async function testProactiveSimple() {
  console.log('ü§ñ Testing Proactive AI (Simple Mode)...\n');

  try {
    // –¢–µ—Å—Ç 1: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    console.log('üîç Test 1: No Available Slots');
    
    const context1 = {
      originalRequest: {
        service_id: 18356041,
        service_name: '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π',
        staff_id: 2895125,
        staff_name: '–°–µ—Ä–≥–µ–π',
        requested_date: '2024-07-05',
        requested_time: '15:00'
      },
      noSlotsReason: 'staff_busy',
      availableSlots: [
        { time: '16:00', staff_name: '–°–µ—Ä–≥–µ–π', date: '2024-07-05' },
        { time: '10:00', staff_name: '–ë–∞—Ä–∏', date: '2024-07-05' },
        { time: '14:00', staff_name: '–†–∞–º–∑–∞–Ω', date: '2024-07-06' }
      ],
      client: {
        last_services: [
          { service_name: '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', staff_name: '–°–µ—Ä–≥–µ–π' }
        ],
        favorite_staff_ids: [2895125],
        preferred_time_slots: ['15:00', '16:00']
      },
      companyId: '962302'
    };

    const suggestions1 = await proactiveSuggestions.generateSuggestions(context1);
    const text1 = proactiveSuggestions.formatSuggestionsAsText(suggestions1);
    
    console.log('‚úÖ Generated suggestions:');
    console.log(text1);
    console.log('\nüìä Suggestions structure:');
    console.log('- Primary:', !!suggestions1.primary);
    console.log('- Alternatives:', suggestions1.alternatives.length);
    console.log('- Additional:', suggestions1.additional.length);
    console.log('- Urgent:', suggestions1.urgent.length);

    // –¢–µ—Å—Ç 2: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    console.log('\nüîç Test 2: Fully Booked Day');
    
    const context2 = {
      originalRequest: {
        service_id: 18356100,
        service_name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        requested_date: '2024-07-05',
        requested_time: '14:00'
      },
      noSlotsReason: 'fully_booked',
      availableSlots: [
        { time: '11:00', staff_name: '–ê–Ω–Ω–∞', date: '2024-07-06' },
        { time: '15:00', staff_name: '–ú–∞—Ä–∏—è', date: '2024-07-06' }
      ],
      client: null, // –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
      companyId: '962302'
    };

    const suggestions2 = await proactiveSuggestions.generateSuggestions(context2);
    const text2 = proactiveSuggestions.formatSuggestionsAsText(suggestions2);
    
    console.log('‚úÖ Generated suggestions for new client:');
    console.log(text2);

    // –¢–µ—Å—Ç 3: –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    console.log('\nüîç Test 3: No Working Hours');
    
    const context3 = {
      originalRequest: {
        service_id: 18356041,
        service_name: '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π',
        requested_date: '2024-07-05',
        requested_time: '22:00' // –ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º
      },
      noSlotsReason: 'no_working_hours',
      availableSlots: [
        { time: '09:00', staff_name: '–°–µ—Ä–≥–µ–π', date: '2024-07-06' },
        { time: '19:00', staff_name: '–ë–∞—Ä–∏', date: '2024-07-05' }
      ],
      client: {
        preferred_time_slots: ['18:00', '19:00']
      },
      companyId: '962302'
    };

    const suggestions3 = await proactiveSuggestions.generateSuggestions(context3);
    const text3 = proactiveSuggestions.formatSuggestionsAsText(suggestions3);
    
    console.log('‚úÖ Generated suggestions for after hours:');
    console.log(text3);

    // –¢–µ—Å—Ç 4: VIP –∫–ª–∏–µ–Ω—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    console.log('\nüîç Test 4: VIP Client with History');
    
    const context4 = {
      originalRequest: {
        service_id: 18356102,
        service_name: '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã',
        staff_id: 3413963,
        staff_name: '–ë–∞—Ä–∏',
        requested_date: '2024-07-05',
        requested_time: '12:00'
      },
      noSlotsReason: 'staff_busy',
      availableSlots: [
        { time: '13:00', staff_name: '–ë–∞—Ä–∏', date: '2024-07-05' },
        { time: '12:00', staff_name: '–†–∞–º–∑–∞–Ω', date: '2024-07-05' }
      ],
      client: {
        last_services: [
          { service_name: '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã', staff_name: '–ë–∞—Ä–∏' },
          { service_name: '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', staff_name: '–ë–∞—Ä–∏' }
        ],
        favorite_staff_ids: [3413963],
        preferred_time_slots: ['12:00', '13:00'],
        visit_count: 15,
        loyalty_level: 'Gold'
      },
      companyId: '962302'
    };

    const suggestions4 = await proactiveSuggestions.generateSuggestions(context4);
    const text4 = proactiveSuggestions.formatSuggestionsAsText(suggestions4);
    
    console.log('‚úÖ Generated suggestions for VIP client:');
    console.log(text4);

    // –¢–µ—Å—Ç 5: Performance Test
    console.log('\nüèÉ Test 5: Performance Test');
    
    const performanceStart = Date.now();
    const tests = [];
    
    for (let i = 0; i < 10; i++) {
      const start = Date.now();
      const suggestions = await proactiveSuggestions.generateSuggestions(context1);
      const time = Date.now() - start;
      tests.push({ test: i + 1, time, suggestionsCount: suggestions.alternatives.length });
    }
    
    const totalTime = Date.now() - performanceStart;
    const avgTime = totalTime / tests.length;
    
    console.log('‚úÖ Performance Results:');
    tests.forEach(t => {
      console.log(`Test ${t.test}: ${t.time}ms (${t.suggestionsCount} suggestions)`);
    });
    
    console.log(`\nüìà Performance Summary:`);
    console.log(`Total time: ${totalTime}ms`);
    console.log(`Average time: ${Math.round(avgTime)}ms`);
    console.log(`Suggestions per second: ${Math.round(1000 / avgTime)}`);

    // –¢–µ—Å—Ç 6: –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    console.log('\nüé≠ Test 6: Different Scenarios');
    
    const scenarios = [
      { name: 'Busy staff', reason: 'staff_busy' },
      { name: 'Service unavailable', reason: 'service_unavailable' },
      { name: 'Fully booked', reason: 'fully_booked' },
      { name: 'No working hours', reason: 'no_working_hours' }
    ];
    
    for (const scenario of scenarios) {
      const testContext = { ...context1, noSlotsReason: scenario.reason };
      const suggestions = await proactiveSuggestions.generateSuggestions(testContext);
      
      console.log(`${scenario.name}:`);
      console.log(`  Primary: "${suggestions.primary?.substring(0, 60)}..."`);
      console.log(`  Alternatives: ${suggestions.alternatives.length}`);
      console.log('');
    }

    console.log('‚úÖ Proactive AI test completed successfully!');
    
    // –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ê–ö–¢–ò–í–ù–û–ì–û AI:');
    
    if (avgTime < 100) {
      console.log('üöÄ Performance: –û–¢–õ–ò–ß–ù–û (< 100ms average)');
    } else if (avgTime < 500) {
      console.log('‚úÖ Performance: –•–û–†–û–®–û (< 500ms average)');
    } else {
      console.log('‚ö†Ô∏è Performance: –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
    }
    
    console.log('ü§ñ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –†–ê–ë–û–¢–ê–ï–¢ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)');
    console.log('üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢ (—É—á–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π)');
    console.log('üí° –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –†–ê–ë–û–¢–ê–Æ–¢ (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await proactiveSuggestions.getStats();
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`- –®–∞–±–ª–æ–Ω–æ–≤: ${stats.templates}`);
    console.log(`- –¢–∏–ø–æ–≤ –∫—ç—à–∞: ${stats.cacheKeys.length}`);

  } catch (error) {
    console.error('‚ùå Proactive AI test failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testProactiveSimple().then(() => {
    console.log('\nüéâ –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π AI –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('\nü§ñ –ì–û–¢–û–í–ù–û–°–¢–¨ –ü–†–û–ê–ö–¢–ò–í–ù–û–ì–û AI:');
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ Performance - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('\nüèÜ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö PRODUCTION!');
    console.log('AI-First + Smart Caching + Rapid-Fire + Proactive AI = üí™');
    process.exit(0);
  }).catch(error => {
    console.error('üí• Proactive AI test failed:', error);
    process.exit(1);
  });
}

module.exports = testProactiveSimple;