require('dotenv').config();
const { supabase } = require('./src/database/supabase');
const { getSyncManager } = require('./src/sync/sync-manager');

async function testCleanSync() {
  console.log('üßπ –¢–ï–°–¢ –ß–ò–°–¢–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('='.repeat(50));
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
  const { count: beforeCount } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true });
  
  const { count: beforeWithSpent } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .gt('total_spent', 0);
    
  console.log(`\nüìä –î–û –û–ß–ò–°–¢–ö–ò:`);
  console.log(`   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${beforeCount}`);
  console.log(`   –° –ø–æ–∫—É–ø–∫–∞–º–∏ (total_spent > 0): ${beforeWithSpent}`);
  
  // 2. –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  console.log('\nüóëÔ∏è  –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É clients...');
  const { error: deleteError } = await supabase
    .from('clients')
    .delete()
    .gte('id', 0); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    
  if (deleteError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', deleteError);
    process.exit(1);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
  const { count: emptyCount } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true });
    
  console.log(`   –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: ${emptyCount}`);
  
  // 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ sync-manager
  console.log('\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ sync-manager...');
  console.log(`   SYNC_CLIENT_VISITS = ${process.env.SYNC_CLIENT_VISITS}`);
  
  const syncManager = getSyncManager();
  const result = await syncManager.syncClients({ 
    syncVisitHistory: process.env.SYNC_CLIENT_VISITS === 'true' 
  });
  
  console.log(`\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
  console.log(`   –û—à–∏–±–æ–∫: ${result.errors}`);
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { count: afterCount } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true });
    
  const { count: afterWithSpent } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .gt('total_spent', 0);
    
  console.log(`\nüìä –ü–û–°–õ–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:`);
  console.log(`   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${afterCount}`);
  console.log(`   –° –ø–æ–∫—É–ø–∫–∞–º–∏ (total_spent > 0): ${afterWithSpent}`);
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, phone, total_spent, visit_count')
    .order('total_spent', { ascending: false })
    .limit(5);
    
  console.log('\nüí∞ –¢–û–ü-5 –∫–ª–∏–µ–Ω—Ç–æ–≤:');
  topClients.forEach((client, i) => {
    console.log(`   ${i+1}. ${client.name}: ${client.total_spent} —Ä—É–± (${client.visit_count} –≤–∏–∑–∏—Ç–æ–≤)`);
  });
  
  console.log('\n' + '='.repeat(50));
  console.log('üìà –ò–¢–û–ì:');
  console.log(`   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1422 –∫–ª–∏–µ–Ω—Ç–∞ –∏ ~1222 —Å –ø–æ–∫—É–ø–∫–∞–º–∏`);
  console.log(`   –ü–æ–ª—É—á–∏–ª–æ—Å—å: ${afterCount} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ ${afterWithSpent} —Å –ø–æ–∫—É–ø–∫–∞–º–∏`);
  
  if (afterWithSpent > 1000) {
    console.log('   ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û\!');
  } else {
    console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –º–∞–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–∫—É–ø–∫–∞–º–∏');
  }
  
  process.exit(0);
}

testCleanSync().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});
