const { supabase } = require('./src/database/supabase');

async function checkFinalData() {
  console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302);
  
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
  const { data: clientsWithData } = await supabase
    .from('clients')
    .select('id, name, visit_history, last_services, favorite_staff_ids')
    .eq('company_id', 962302)
    .not('visit_history', 'is', null)
    .not('last_services', 'is', null)
    .limit(10);
  
  console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}`);
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${totalVisits}\n`);
  
  if (!clientsWithData || clientsWithData.length === 0) {
    console.log('‚ùå –ù–ï–¢ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ –≤ visit_history
    const { data: anyData } = await supabase
      .from('clients')
      .select('id, name, visit_history, last_services')
      .eq('company_id', 962302)
      .limit(5);
    
    console.log('–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ clients:');
    for (const client of anyData || []) {
      console.log(`\n${client.name} (ID: ${client.id}):`);
      console.log(`  visit_history: ${JSON.stringify(client.visit_history)}`);
      console.log(`  last_services: ${JSON.stringify(client.last_services)}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å visits -> clients
    const { data: visitsWithClients } = await supabase
      .from('visits')
      .select('client_id, service_names, visit_date')
      .not('client_id', 'is', null)
      .limit(5);
    
    console.log('\n\n–ü—Ä–∏–º–µ—Ä—ã –≤–∏–∑–∏—Ç–æ–≤ —Å client_id:');
    for (const visit of visitsWithClients || []) {
      console.log(`  Client ID ${visit.client_id}: ${visit.service_names?.join(', ')} (${visit.visit_date})`);
    }
    
  } else {
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
    for (const client of clientsWithData) {
      console.log(`\n${client.name}:`);
      console.log(`  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: ${client.visit_history?.length || 0} –≤–∏–∑–∏—Ç–æ–≤`);
      console.log(`  ‚Ä¢ –£—Å–ª—É–≥–∏: ${client.last_services?.slice(0,2).join(', ')}`);
      console.log(`  ‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞: ${client.favorite_staff_ids?.length || 0}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const { data: topClient } = await supabase
    .from('clients')
    .select('*')
    .eq('company_id', 962302)
    .order('visit_count', { ascending: false })
    .limit(1)
    .single();
  
  if (topClient) {
    console.log(`\n\nüîç –¢–û–ü –ö–õ–ò–ï–ù–¢: ${topClient.name} (visit_count: ${topClient.visit_count})`);
    console.log(`  visit_history: ${topClient.visit_history ? topClient.visit_history.length + ' –∑–∞–ø–∏—Å–µ–π' : '–ø—É—Å—Ç–æ'}`);
    console.log(`  last_services: ${topClient.last_services || '–ø—É—Å—Ç–æ'}`);
    console.log(`  favorite_staff_ids: ${topClient.favorite_staff_ids || '–ø—É—Å—Ç–æ'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∏–∑–∏—Ç—ã
    const { count: hisVisits } = await supabase
      .from('visits')
      .select('*', { count: 'exact', head: true })
      .eq('client_id', topClient.id);
    
    console.log(`  –í–∏–∑–∏—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ visits: ${hisVisits}`);
  }
}

checkFinalData().catch(console.error);