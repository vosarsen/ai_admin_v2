#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

const contextService = require('./src/services/context/context-service-v2');
const smartCache = require('./src/services/cache/smart-cache');
const { CircuitBreakerFactory } = require('./src/utils/circuit-breaker');
const { metrics } = require('./src/utils/performance-metrics');
const dataLoader = require('./src/services/ai-admin-v2/modules/data-loader');
const logger = require('./src/utils/logger');

const TEST_PHONE = '79001234567';
const TEST_COMPANY_ID = 962302;

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

class ContextImprovementTests {
  constructor() {
    this.testResults = [];
    this.dataLoader = dataLoader;
  }

  /**
   * –¢–µ—Å—Ç 1: Pipeline –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤ getFullContext
   */
  async testPipelineOptimization() {
    console.log('\nüß™ Test 1: Pipeline Optimization');
    
    const startTime = Date.now();
    
    try {
      // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –±–µ–∑ –∫—ç—à–∞
      const context1 = await metrics.measure('getFullContext_first', 
        () => contextService.getFullContext(TEST_PHONE, TEST_COMPANY_ID)
      );
      
      const firstCallTime = Date.now() - startTime;
      console.log(`‚úÖ First call (no cache): ${firstCallTime}ms`);
      
      // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - —Å –∫—ç—à–µ–º
      const startTime2 = Date.now();
      const context2 = await metrics.measure('getFullContext_cached',
        () => contextService.getFullContext(TEST_PHONE, TEST_COMPANY_ID)
      );
      
      const secondCallTime = Date.now() - startTime2;
      console.log(`‚úÖ Second call (cached): ${secondCallTime}ms`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (firstCallTime < 1000 && secondCallTime < 50) {
        console.log('‚úÖ Pipeline optimization working!');
        this.testResults.push({ test: 'Pipeline', status: 'PASS' });
      } else {
        console.log(`‚ö†Ô∏è Pipeline may not be optimized: first=${firstCallTime}ms, second=${secondCallTime}ms`);
        this.testResults.push({ test: 'Pipeline', status: 'WARN' });
      }
      
    } catch (error) {
      console.error('‚ùå Pipeline test failed:', error);
      this.testResults.push({ test: 'Pipeline', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 2: Race condition protection –≤ updateDialogContext
   */
  async testRaceConditionProtection() {
    console.log('\nüß™ Test 2: Race Condition Protection');
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const updates = [];
      for (let i = 0; i < 5; i++) {
        updates.push(
          contextService.updateDialogContext(TEST_PHONE, TEST_COMPANY_ID, {
            selection: {
              service: i,
              staff: i * 10
            }
          })
        );
      }
      
      const results = await Promise.allSettled(updates);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
      const successful = results.filter(r => r.status === 'fulfilled' && r.value.success);
      
      if (successful.length === results.length) {
        console.log(`‚úÖ All ${results.length} concurrent updates succeeded!`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const dialog = await contextService.redis.hgetall(
          contextService._getKey('dialog', TEST_COMPANY_ID, '+' + TEST_PHONE)
        );
        if (dialog && dialog.selection) {
          console.log('Final selection:', JSON.parse(dialog.selection));
        }
        
        this.testResults.push({ test: 'RaceCondition', status: 'PASS' });
      } else {
        console.log(`‚ö†Ô∏è Some updates failed: ${successful.length}/${results.length} succeeded`);
        this.testResults.push({ test: 'RaceCondition', status: 'WARN' });
      }
      
    } catch (error) {
      console.error('‚ùå Race condition test failed:', error);
      this.testResults.push({ test: 'RaceCondition', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 3: Circuit Breaker –¥–ª—è Redis
   */
  async testCircuitBreaker() {
    console.log('\nüß™ Test 3: Circuit Breaker');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Circuit Breaker'–æ–≤
      const stats = CircuitBreakerFactory.getAllStats();
      console.log('Circuit Breaker stats:', Object.keys(stats));
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
      for (let i = 0; i < 3; i++) {
        await contextService.getFullContext(`test${i}`, TEST_COMPANY_ID);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤
      const newStats = CircuitBreakerFactory.getAllStats();
      
      let hasRedisBreaker = false;
      Object.entries(newStats).forEach(([name, stat]) => {
        if (name.includes('redis')) {
          hasRedisBreaker = true;
          console.log(`‚úÖ Found Redis Circuit Breaker: ${name}`);
          console.log(`   State: ${stat.currentState}, Success Rate: ${stat.successRate}`);
        }
      });
      
      if (hasRedisBreaker) {
        this.testResults.push({ test: 'CircuitBreaker', status: 'PASS' });
      } else {
        console.log('‚ö†Ô∏è No Redis Circuit Breaker found');
        this.testResults.push({ test: 'CircuitBreaker', status: 'WARN' });
      }
      
    } catch (error) {
      console.error('‚ùå Circuit Breaker test failed:', error);
      this.testResults.push({ test: 'CircuitBreaker', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ memory leak –≤ SmartCache
   */
  async testSmartCacheMemoryLeak() {
    console.log('\nüß™ Test 4: SmartCache Memory Leak Fix');
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π (—É–º–µ–Ω—å—à–∞–µ–º –¥–æ 150 –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã —Ç–µ—Å—Ç–∞)
      for (let i = 0; i < 150; i++) {
        await smartCache.getOrCompute(
          `test_key_${i}`,
          async () => ({ data: `value_${i}` }),
          { ttl: 60 }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = smartCache.getStats();
      console.log(`Popular keys count: ${stats.popularKeys.length}`);
      
      if (stats.popularKeys.length <= 100) {
        console.log('‚úÖ Memory leak fixed! Popular keys limited to 100');
        this.testResults.push({ test: 'MemoryLeak', status: 'PASS' });
      } else {
        console.log(`‚ùå Too many keys in memory: ${stats.popularKeys.length}`);
        this.testResults.push({ test: 'MemoryLeak', status: 'FAIL' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cache hit rate
      console.log(`Cache stats: ${stats.hitRate} hit rate, ${stats.hits} hits, ${stats.misses} misses`);
      
    } catch (error) {
      console.error('‚ùå SmartCache test failed:', error);
      this.testResults.push({ test: 'MemoryLeak', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–¥–∫–æ–¥–∞ –∏–∑ DataLoader
   */
  async testDataLoaderNoHardcode() {
    console.log('\nüß™ Test 5: DataLoader No Hardcode');
    
    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å –æ—à–∏–±–∫–æ–π
      const invalidCompanyData = await this.dataLoader.loadCompany(999999999);
      
      console.log('Fallback company data:', {
        title: invalidCompanyData.title,
        address: invalidCompanyData.address,
        timezone: invalidCompanyData.timezone
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
      if (invalidCompanyData.title !== '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã' || 
          invalidCompanyData.address !== '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω') {
        console.log('‚úÖ Hardcode removed, using config values');
        this.testResults.push({ test: 'NoHardcode', status: 'PASS' });
      } else {
        console.log('‚ö†Ô∏è Still using some hardcoded values');
        this.testResults.push({ test: 'NoHardcode', status: 'WARN' });
      }
      
    } catch (error) {
      console.error('‚ùå DataLoader test failed:', error);
      this.testResults.push({ test: 'NoHardcode', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –¢–µ—Å—Ç 6: –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async testPerformanceMetrics() {
    console.log('\nüß™ Test 6: Performance Metrics');
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º
      for (let i = 0; i < 10; i++) {
        await metrics.measure('test_operation', async () => {
          await sleep(Math.random() * 100);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = metrics.getStats('test_operation');
      
      if (stats && stats.count === 10) {
        console.log('‚úÖ Performance metrics working!');
        console.log(`   Avg: ${stats.avgDuration}ms, P95: ${stats.p95}ms, Success: ${stats.successRate}%`);
        this.testResults.push({ test: 'Metrics', status: 'PASS' });
      } else {
        console.log('‚ùå Metrics not collected properly');
        this.testResults.push({ test: 'Metrics', status: 'FAIL' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Prometheus —ç–∫—Å–ø–æ—Ä—Ç
      const prometheusData = metrics.exportPrometheus();
      if (prometheusData.includes('test_operation')) {
        console.log('‚úÖ Prometheus export working');
      }
      
    } catch (error) {
      console.error('‚ùå Metrics test failed:', error);
      this.testResults.push({ test: 'Metrics', status: 'FAIL', error: error.message });
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests() {
    console.log('üöÄ Starting Context Improvement Tests...\n');
    
    await this.testPipelineOptimization();
    await this.testRaceConditionProtection();
    await this.testCircuitBreaker();
    await this.testSmartCacheMemoryLeak();
    await this.testDataLoaderNoHardcode();
    await this.testPerformanceMetrics();
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await contextService.clearDialogContext(TEST_PHONE, TEST_COMPANY_ID);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    this.printReport();
  }

  /**
   * –í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö
   */
  printReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä TEST RESULTS SUMMARY');
    console.log('='.repeat(60));
    
    const passed = this.testResults.filter(r => r.status === 'PASS').length;
    const warned = this.testResults.filter(r => r.status === 'WARN').length;
    const failed = this.testResults.filter(r => r.status === 'FAIL').length;
    
    this.testResults.forEach(result => {
      const icon = result.status === 'PASS' ? '‚úÖ' : 
                   result.status === 'WARN' ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${result.test}: ${result.status}`);
      if (result.error) {
        console.log(`   Error: ${result.error}`);
      }
    });
    
    console.log('\n' + '-'.repeat(60));
    console.log(`Total: ${this.testResults.length} tests`);
    console.log(`‚úÖ Passed: ${passed}`);
    console.log(`‚ö†Ô∏è Warnings: ${warned}`);
    console.log(`‚ùå Failed: ${failed}`);
    
    const successRate = Math.round((passed / this.testResults.length) * 100);
    console.log(`\nüéØ Success Rate: ${successRate}%`);
    
    if (failed === 0) {
      console.log('\nüéâ All critical improvements are working!');
    } else {
      console.log('\n‚ö†Ô∏è Some improvements need attention');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
const tester = new ContextImprovementTests();
tester.runAllTests()
  .then(() => {
    console.log('\n‚úÖ Tests completed');
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics.stop();
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Test suite failed:', error);
    process.exit(1);
  });