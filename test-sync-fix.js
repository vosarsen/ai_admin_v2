#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
 */

require('dotenv').config();
const { ServicesSync } = require('./src/sync/services-sync');
const { StaffSync } = require('./src/sync/staff-sync');
const { supabase } = require('./src/database/supabase');
const logger = require('./src/utils/logger').child({ module: 'test-sync-fix' });

async function testServicesSync() {
  logger.info('üß™ Testing services sync fix...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –≤ –ë–î
  const { data: beforeSync } = await supabase
    .from('services')
    .select('id, title, yclients_id, declensions')
    .eq('company_id', 962302)
    .limit(5);
  
  logger.info('üìö Services BEFORE sync:', {
    total: beforeSync?.length,
    withDeclensions: beforeSync?.filter(s => s.declensions !== null).length || 0
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  const servicesSync = new ServicesSync();
  const result = await servicesSync.sync();
  
  logger.info('‚úÖ Sync result:', result);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { data: afterSync } = await supabase
    .from('services')
    .select('id, title, yclients_id, declensions')
    .eq('company_id', 962302)
    .limit(5);
  
  logger.info('üìö Services AFTER sync:', {
    total: afterSync?.length,
    withDeclensions: afterSync?.filter(s => s.declensions !== null).length || 0
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
  let preserved = 0;
  let lost = 0;
  
  for (const service of afterSync || []) {
    const before = beforeSync?.find(s => s.id === service.id);
    if (before) {
      if (before.declensions && !service.declensions) {
        logger.error(`‚ùå Lost declensions for: ${service.title}`);
        lost++;
      } else if (before.declensions && service.declensions) {
        logger.info(`‚úÖ Preserved declensions for: ${service.title}`);
        preserved++;
      }
    }
  }
  
  return { preserved, lost };
}

async function testStaffSync() {
  logger.info('üß™ Testing staff sync fix...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –≤ –ë–î
  const { data: beforeSync } = await supabase
    .from('staff')
    .select('id, name, yclients_id, declensions')
    .eq('company_id', 962302)
    .limit(5);
  
  logger.info('üë• Staff BEFORE sync:', {
    total: beforeSync?.length,
    withDeclensions: beforeSync?.filter(s => s.declensions !== null).length || 0
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  const staffSync = new StaffSync();
  const result = await staffSync.sync();
  
  logger.info('‚úÖ Sync result:', result);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { data: afterSync } = await supabase
    .from('staff')
    .select('id, name, yclients_id, declensions')
    .eq('company_id', 962302)
    .limit(5);
  
  logger.info('üë• Staff AFTER sync:', {
    total: afterSync?.length,
    withDeclensions: afterSync?.filter(s => s.declensions !== null).length || 0
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
  let preserved = 0;
  let lost = 0;
  
  for (const staff of afterSync || []) {
    const before = beforeSync?.find(s => s.id === staff.id);
    if (before) {
      if (before.declensions && !staff.declensions) {
        logger.error(`‚ùå Lost declensions for: ${staff.name}`);
        lost++;
      } else if (before.declensions && staff.declensions) {
        logger.info(`‚úÖ Preserved declensions for: ${staff.name}`);
        preserved++;
      }
    }
  }
  
  return { preserved, lost };
}

async function main() {
  try {
    logger.info('üöÄ Starting sync fix test...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏
    const servicesResult = await testServicesSync();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    const staffResult = await testStaffSync();
    
    // –ò—Ç–æ–≥–∏
    logger.info('üìä TEST RESULTS:');
    logger.info('Services:', servicesResult);
    logger.info('Staff:', staffResult);
    
    if (servicesResult.lost > 0 || staffResult.lost > 0) {
      logger.error('‚ùå TEST FAILED: Some declensions were lost during sync!');
      process.exit(1);
    } else {
      logger.info('‚úÖ TEST PASSED: All declensions preserved!');
      process.exit(0);
    }
    
  } catch (error) {
    logger.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

main();