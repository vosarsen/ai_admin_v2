// test-production-batching.js
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
const API_URL = 'http://46.149.70.219:3000';
const TEST_PHONE = '79001234567';
const SECRET_KEY = 'sk_venom_webhook_3553'; // –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
function createSignature(method, path, timestamp, body) {
  const crypto = require('crypto');
  const payload = `${method}:${path}:${timestamp}:${JSON.stringify(body)}`;
  const hmac = crypto.createHmac('sha256', SECRET_KEY);
  hmac.update(payload);
  return hmac.digest('hex');
}

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function sendMessage(message, delay = 0) {
  if (delay > 0) {
    await sleep(delay);
  }

  const payload = {
    from: TEST_PHONE,
    message: message,
    timestamp: new Date().toISOString()
  };

  const timestamp = Date.now();
  const path = '/webhook/whatsapp/batched';
  const signature = createSignature('POST', path, timestamp, payload);

  try {
    const response = await axios.post(`${API_URL}${path}`, payload, {
      headers: {
        'x-signature': signature,
        'x-timestamp': timestamp,
        'Content-Type': 'application/json'
      }
    });

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: "${message}"`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ "${message}":`, error.response?.data || error.message);
    return null;
  }
}

async function checkBatchStats() {
  try {
    const response = await axios.get(`${API_URL}/webhook/whatsapp/batched/stats`);
    return response.data.stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    return null;
  }
}

async function testProductionBatching() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –±–∞—Ç—á–∏–Ω–≥–∞ –Ω–∞ PRODUCTION —Å–µ—Ä–≤–µ—Ä–µ\n');
  console.log(`üìû –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${TEST_PHONE}`);
  console.log(`üåê API URL: ${API_URL}`);
  console.log('');

  // –¢–µ—Å—Ç rapid-fire —Å–æ–æ–±—â–µ–Ω–∏–π
  console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 8 —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–±–∏—Ç–æ–≥–æ –≤–≤–æ–¥–∞):\n');

  const messages = [
    '–ü—Ä–∏–≤–µ—Ç,',
    '–∑–∞–ø–∏—à–∏—Ç–µ',
    '–º–µ–Ω—è –Ω–∞',
    '—Å—Ç—Ä–∏–∂–∫—É',
    '–∫ –ë–∞—Ä–∏',
    '–Ω–∞ –∑–∞–≤—Ç—Ä–∞',
    '–≤ 8',
    '–≤–µ—á–µ—Ä–∞'
  ];

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  for (let i = 0; i < messages.length; i++) {
    await sendMessage(messages[i], i === 0 ? 0 : 100);
  }

  console.log('\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞...\n');
  await sleep(2000);

  let stats = await checkBatchStats();
  if (stats) {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–µ–π:');
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π: ${stats.pendingBatches}`);
    if (stats.batches.length > 0) {
      stats.batches.forEach(batch => {
        console.log(`   - Phone ${batch.phone}: ${batch.size} —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑—Ä–∞—Å—Ç: ${batch.lastMessageAge}ms`);
      });
    }
  }

  console.log('\n‚è≥ –ñ–¥–µ–º –µ—â–µ 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞...\n');
  await sleep(4000);

  stats = await checkBatchStats();
  if (stats) {
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π: ${stats.pendingBatches}`);
    if (stats.pendingBatches === 0) {
      console.log('‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    }
  }

  console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ worker-–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:');
  console.log('   ssh root@46.149.70.219 "pm2 logs ai-admin-worker-v2 --lines 50 | grep \\"isRapidFireBatch\\""');
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProductionBatching().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});