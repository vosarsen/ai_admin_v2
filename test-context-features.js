#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */

const contextService = require('./src/services/context');
const logger = require('./src/utils/logger').child({ module: 'test-context' });

async function testContextFeatures() {
  const testPhone = '79001234567';
  const companyId = 962302;
  
  logger.info('üß™ Testing context features...');
  
  try {
    // 1. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    logger.info('\n1Ô∏è‚É£ Testing preferences...');
    
    const preferences = {
      favoriteService: '–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
      favoriteStaff: '–°–µ—Ä–≥–µ–π',
      preferredTime: 'evening',
      notes: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç–∏—Ö—É—é –º—É–∑—ã–∫—É'
    };
    
    const saveResult = await contextService.savePreferences(testPhone, companyId, preferences);
    logger.info('Save preferences result:', saveResult);
    
    const loadedPrefs = await contextService.getPreferences(testPhone, companyId);
    logger.info('Loaded preferences:', loadedPrefs);
    
    // 2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    logger.info('\n2Ô∏è‚É£ Testing conversation continuation...');
    
    const canContinue = await contextService.canContinueConversation(testPhone, companyId);
    logger.info('Can continue conversation:', canContinue);
    
    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
    logger.info('\n3Ô∏è‚É£ Testing conversation summary...');
    
    const summary = await contextService.getConversationSummary(testPhone, companyId);
    logger.info('Conversation summary:', JSON.stringify(summary, null, 2));
    
    // 4. –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    logger.info('\n4Ô∏è‚É£ Testing set context...');
    
    const contextData = {
      state: 'active',
      data: {
        currentStep: 'booking',
        selectedService: '–°—Ç—Ä–∏–∂–∫–∞'
      }
    };
    
    const setResult = await contextService.setContext(testPhone, companyId, contextData);
    logger.info('Set context result:', setResult);
    
    // 5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    logger.info('\n5Ô∏è‚É£ Testing context update...');
    
    const updateData = {
      lastMessage: {
        role: 'user',
        content: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞'
      },
      clientInfo: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç'
      },
      lastAction: 'SEARCH_SLOTS',
      actionResult: { found: 5 }
    };
    
    const updateResult = await contextService.updateContext(testPhone, companyId, updateData);
    logger.info('Update context result:', updateResult);
    
    // 6. –¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ –¥–ª—è follow-up
    logger.info('\n6Ô∏è‚É£ Testing follow-up marking...');
    
    const followUpResult = await contextService.markForFollowUp(
      testPhone,
      companyId,
      '–ö–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏',
      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    );
    logger.info('Follow-up mark result:', followUpResult);
    
    // 7. –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    logger.info('\n7Ô∏è‚É£ Testing metrics...');
    
    const metrics = await contextService.getMetrics();
    logger.info('Context service metrics:', metrics);
    
    // 8. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (dry run)
    logger.info('\n8Ô∏è‚É£ Testing old contexts cleanup (dry run)...');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    const oldPhone = '79009999999';
    await contextService.setContext(oldPhone, companyId, { state: 'old' });
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É (–Ω–µ —É–¥–∞–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ)
    logger.info('Would clear contexts older than 30 days...');
    
    logger.info('\n‚úÖ All tests completed!');
    
  } catch (error) {
    logger.error('‚ùå Test failed:', error);
  }
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testContextFeatures();