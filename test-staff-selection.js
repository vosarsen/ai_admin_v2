// Test script to verify staff selection from history
const NLUService = require('./src/services/nlu');
const logger = require('./src/utils/logger');

// Mock AI service
const mockAIService = {
  _callAI: async (prompt) => {
    console.log('\n=== AI PROMPT ===');
    console.log(prompt);
    console.log('=================\n');
    
    // Simulate AI response for booking with time "4"
    if (prompt.includes('–∑–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ 4 —Å–µ–≥–æ–¥–Ω—è')) {
      return JSON.stringify({
        intent: "booking",
        entities: {
          service: "–ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê",
          staff: "–ë–∞—Ä–∏", // Should select Bari from history
          date: "2025-07-10",
          time: "16:00"
        },
        confidence: 0.95,
        reasoning: "User wants booking at 16:00, Bari is available"
      });
    }
    
    return JSON.stringify({
      intent: "other", 
      entities: {},
      confidence: 0.9,
      reasoning: "Default response"
    });
  }
};

async function testStaffSelection() {
  const nlu = new NLUService(mockAIService);
  
  console.log('Testing staff selection from conversation history...\n');
  
  // Context with slots shown for Bari only
  const context = {
    phone: '79936363848@c.us',
    companyId: '962302',
    lastMessages: [
      {
        user: '–æ—Ç–ª–∏—á–Ω–æ',
        assistant: `–ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê —Å–µ–≥–æ–¥–Ω—è:

üë§ –ë–∞—Ä–∏:
  ‚Ä¢ 15:20
  ‚Ä¢ 15:30
  ‚Ä¢ 16:00

üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: 3`,
        timestamp: new Date().toISOString()
      }
    ]
  };
  
  const result = await nlu.processMessage('–∑–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ 4 —Å–µ–≥–æ–¥–Ω—è', context);
  console.log('Message: "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ 4 —Å–µ–≥–æ–¥–Ω—è"');
  console.log('Result:');
  console.log('  Intent:', result.intent);
  console.log('  Action:', result.action);
  console.log('  Entities:', JSON.stringify(result.entities, null, 2));
  console.log('  Response:', result.response);
  
  // Verify staff selection
  if (result.entities.staff === '–ë–∞—Ä–∏') {
    console.log('\n‚úÖ SUCCESS: Correctly selected Bari from conversation history');
  } else {
    console.log(`\n‚ùå FAIL: Selected ${result.entities.staff} instead of B–∞—Ä–∏`);
  }
  
  // Cleanup
  nlu.destroy();
}

testStaffSelection().catch(console.error);