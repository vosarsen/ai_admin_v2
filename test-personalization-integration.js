#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ command-handler
 */

require('dotenv').config();
const commandHandler = require('./src/services/ai-admin-v2/modules/command-handler');
const logger = require('./src/utils/logger').child({ module: 'test-integration' });

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const services = [
  { id: 42, yclients_id: 42, title: '–ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', price: 2000, duration: 60 },
  { id: 73, yclients_id: 73, title: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', price: 1800, duration: 60 },
  { id: 44, yclients_id: 44, title: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô | 1 –ù–ê–°–ê–î–ö–ê', price: 1200, duration: 30 },
  { id: 46, yclients_id: 46, title: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', price: 2800, duration: 60 },
  { id: 50, yclients_id: 50, title: '–ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –ë–û–†–û–î–´', price: 2000, duration: 45 },
  { id: 47, yclients_id: 47, title: '–°–¢–†–ò–ñ–ö–ê + –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –ë–û–†–û–î–´', price: 3800, duration: 90 },
];

// –ö–ª–∏–µ–Ω—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥
const premiumClient = {
  name: '–ò–≤–∞–Ω –ü—Ä–µ–º–∏—É–º',
  phone: '+79001234567',
  gender: 'male',
  visits: [
    { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-07-01') },
    { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-07-15') },
    { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-08-01') },
  ],
  favorite_services: [46],
  average_check: 2800
};

// –ö–ª–∏–µ–Ω—Ç —Å –¥–µ—Ç—Å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏
const parentClient = {
  name: '–ü–µ—Ç—Ä –†–æ–¥–∏—Ç–µ–ª—å',
  phone: '+79002345678',
  gender: 'male',
  visits: [
    { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-06-15') },
    { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-07-15') },
    { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-08-01') },
  ],
  favorite_services: [73],
  average_check: 1800
};

async function testPersonalizedPrices() {
  console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SHOW_PRICES\n');
  console.log('=' .repeat(60));
  
  // –¢–µ—Å—Ç 1: –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∏–∂–∫–∏
  console.log('\nüìù –¢–µ—Å—Ç 1: –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã');
  const context1 = {
    services,
    message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —Å—Ç—Ä–∏–∂–∫–∏?',
    client: premiumClient
  };
  
  const prices1 = await commandHandler.getPrices({ service_name: '—Å—Ç—Ä–∏–∂–∫–∞' }, context1);
  
  console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${prices1.category}`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: ${prices1.count}`);
  console.log('   –¢–æ–ø-3 —É—Å–ª—É–≥–∏:');
  prices1.prices.slice(0, 3).forEach((p, i) => {
    console.log(`     ${i + 1}. ${p.title}: ${p.price_min}‚ÇΩ`);
  });
  
  const firstService = prices1.prices[0];
  if (firstService.title === '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò') {
    console.log('   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –ª—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞ –ø–µ—Ä–≤–∞—è!');
  } else {
    console.log('   ‚ö†Ô∏è  –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
  }
  
  // –¢–µ—Å—Ç 2: –†–æ–¥–∏—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã
  console.log('\nüìù –¢–µ—Å—Ç 2: –†–æ–¥–∏—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã');
  const context2 = {
    services,
    message: '–ü–æ–∫–∞–∂–∏ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∏–∂–∫–∏',
    client: parentClient
  };
  
  const prices2 = await commandHandler.getPrices({ service_name: '—Å—Ç—Ä–∏–∂–∫–∞' }, context2);
  
  console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${prices2.category}`);
  console.log('   –¢–æ–ø-3 —É—Å–ª—É–≥–∏:');
  prices2.prices.slice(0, 3).forEach((p, i) => {
    console.log(`     ${i + 1}. ${p.title}: ${p.price_min}‚ÇΩ`);
  });
  
  if (prices2.prices[0].title === '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê') {
    console.log('   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥–µ—Ç—Å–∫–∞—è —É—Å–ª—É–≥–∞ –ø–µ—Ä–≤–∞—è!');
  }
  
  // –¢–µ—Å—Ç 3: –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
  console.log('\nüìù –¢–µ—Å—Ç 3: –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏');
  const context3 = {
    services,
    message: '–¶–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∏–∂–∫–∏',
    client: null
  };
  
  const prices3 = await commandHandler.getPrices({ service_name: '—Å—Ç—Ä–∏–∂–∫–∞' }, context3);
  
  console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${prices3.category}`);
  console.log('   –¢–æ–ø-3 —É—Å–ª—É–≥–∏:');
  prices3.prices.slice(0, 3).forEach((p, i) => {
    console.log(`     ${i + 1}. ${p.title}: ${p.price_min}‚ÇΩ`);
  });
  console.log('   ‚ÑπÔ∏è  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
}

async function testPersonalizedSearch() {
  console.log('\n\nüß™ –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SEARCH_SLOTS\n');
  console.log('=' .repeat(60));
  
  // –ú–æ–∫–∞–µ–º YClients API —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const originalSearchSlots = commandHandler.searchSlots;
  commandHandler.searchSlots = async function(params, context) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
    let service;
    if (context.client) {
      const serviceMatcher = require('./src/services/ai-admin-v2/modules/service-matcher');
      const matches = serviceMatcher.findTopMatchesWithPersonalization(
        params.service_name || '',
        context.services,
        context.client,
        1
      );
      service = matches[0] || null;
    } else {
      const serviceMatcher = require('./src/services/ai-admin-v2/modules/service-matcher');
      service = serviceMatcher.findBestMatch(
        params.service_name || '', 
        context.services
      );
    }
    
    return {
      service: service ? { id: service.id, title: service.title } : null,
      slots: ['10:00', '11:00', '12:00'] // –ú–æ–∫ —Å–ª–æ—Ç–æ–≤
    };
  };
  
  // –¢–µ—Å—Ç 1: –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å–ª–æ—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏
  console.log('\nüìù –¢–µ—Å—Ç 1: –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å–ª–æ—Ç—ã');
  const context1 = {
    services,
    client: premiumClient
  };
  
  const result1 = await commandHandler.searchSlots(
    { service_name: '—Å—Ç—Ä–∏–∂–∫–∞' },
    context1
  );
  
  console.log(`   –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: ${result1.service?.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  if (result1.service?.title === '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò') {
    console.log('   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—ã–±—Ä–∞–Ω–∞ –ª—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞!');
  }
  
  // –¢–µ—Å—Ç 2: –†–æ–¥–∏—Ç–µ–ª—å –∏—â–µ—Ç —Å–ª–æ—Ç—ã
  console.log('\nüìù –¢–µ—Å—Ç 2: –†–æ–¥–∏—Ç–µ–ª—å –∏—â–µ—Ç —Å–ª–æ—Ç—ã');
  const context2 = {
    services,
    client: parentClient
  };
  
  const result2 = await commandHandler.searchSlots(
    { service_name: '—Å—Ç—Ä–∏–∂–∫–∞' },
    context2
  );
  
  console.log(`   –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: ${result2.service?.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  if (result2.service?.title === '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê') {
    console.log('   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—ã–±—Ä–∞–Ω–∞ –¥–µ—Ç—Å–∫–∞—è —É—Å–ª—É–≥–∞!');
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  commandHandler.searchSlots = originalSearchSlots;
}

async function testTimeBasedRecommendations() {
  console.log('\n\nüïê –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫\n');
  console.log('=' .repeat(60));
  
  const serviceMatcher = require('./src/services/ai-admin-v2/modules/service-matcher');
  
  // –ú–æ–∫–∞–µ–º —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
  const originalDate = global.Date;
  
  // –£—Ç—Ä–æ - –±—ã—Å—Ç—Ä—ã–µ —É—Å–ª—É–≥–∏
  console.log('\nüìù –£—Ç—Ä–æ (8:00) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–µ —É—Å–ª—É–≥–∏');
  const morningDate = new Date('2025-08-18T08:00:00');
  global.Date = class extends originalDate {
    constructor() { return morningDate; }
    static now() { return morningDate.getTime(); }
  };
  
  const morningRecs = serviceMatcher.getTimeBasedRecommendations(services);
  console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  morningRecs.slice(0, 3).forEach((s, i) => {
    console.log(`     ${i + 1}. ${s.title} (${s.duration || '?'} –º–∏–Ω) - ${s.time_reason || '–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}`);
  });
  
  // –í–µ—á–µ—Ä –ø—è—Ç–Ω–∏—Ü—ã - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏
  console.log('\nüìù –í–µ—á–µ—Ä –ø—è—Ç–Ω–∏—Ü—ã (18:00) - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏');
  const fridayEvening = new Date('2025-08-16T18:00:00'); // Friday
  global.Date = class extends originalDate {
    constructor() { return fridayEvening; }
    static now() { return fridayEvening.getTime(); }
  };
  
  const eveningRecs = serviceMatcher.getTimeBasedRecommendations(services);
  console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  eveningRecs.slice(0, 3).forEach((s, i) => {
    console.log(`     ${i + 1}. ${s.title} - ${s.time_reason || '–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}`);
  });
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
  global.Date = originalDate;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n');
  
  await testPersonalizedPrices();
  await testPersonalizedSearch();
  await testTimeBasedRecommendations();
  
  console.log('\n' + '=' .repeat(60));
  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n');
}

runAllTests().catch(console.error);