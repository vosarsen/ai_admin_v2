#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Qwen3-30B-A3B —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π DashScope API
 */

const axios = require('axios');

// API –∫–ª—é—á –¥–ª—è DashScope
const DASHSCOPE_API_KEY = 'sk-5903551cd419422cbf47ac6f9c6fa4ac';

// –ü—Ä–æ–º–ø—Ç –∏–∑ AI Admin v2
const AI_ADMIN_PROMPT = `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ "–°—Ç–∏–ª—å".

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ê–õ–û–ù–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: –ë–∞—Ä–±–µ—Ä—à–æ–ø "–°—Ç–∏–ª—å"
–ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞ 1, –ú–æ—Å–∫–≤–∞
–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00-20:00

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò:
- –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è (id: 45) - 1500 —Ä—É–±., 30 –º–∏–Ω
- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã (id: 46) - 800 —Ä—É–±., 20 –º–∏–Ω
- –ö–æ–º–ø–ª–µ–∫—Å —Å—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞ (id: 47) - 2000 —Ä—É–±., 45 –º–∏–Ω

–ú–ê–°–¢–ï–†–ê:
- –ò–≤–∞–Ω (id: 101) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10:00 –¥–æ 20:00
- –ü–µ—Ç—Ä (id: 102) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 12:00 –¥–æ 18:00

–í–ê–ñ–ù–û: –í—Å—Ç—Ä–∞–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]:
- [SEARCH_SLOTS date:"2025-08-03" service_ids:[45]] - –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
- [CREATE_BOOKING date:"2025-08-03" time:"15:00" service_id:45 staff_id:101] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
- [SHOW_PRICES] - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ.`;

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const TEST_SCENARIOS = [
  {
    name: '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å',
    message: '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞'
  },
  {
    name: '–ó–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–µ–º',
    message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ò–≤–∞–Ω—É –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00'
  },
  {
    name: '–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω',
    message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞ –∏ –±–æ—Ä–æ–¥–∞?'
  }
];

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ DashScope API
async function callDashScopeNative(message) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π endpoint DashScope
  const url = 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation';
  
  try {
    const requestBody = {
      model: 'qwen3-30b-a3b',
      input: {
        messages: [
          {
            role: 'system',
            content: AI_ADMIN_PROMPT
          },
          {
            role: 'user',
            content: message
          }
        ]
      },
      parameters: {
        temperature: 0.7,
        top_p: 0.8,
        max_tokens: 1000,
        enable_thinking: false  // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º false –¥–ª—è non-streaming
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É API...');
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(requestBody.parameters, null, 2));
    
    const response = await axios.post(url, requestBody, {
      headers: {
        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,
        'Content-Type': 'application/json',
        'X-DashScope-DataInspection': 'enable' // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      },
      timeout: 30000
    });
    
    return {
      success: true,
      text: response.data.output.text || response.data.output.choices?.[0]?.message?.content,
      usage: response.data.usage,
      model: response.data.model
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.response?.data?.message || error.response?.data?.error?.message || error.message,
      code: error.response?.data?.code || error.response?.data?.error?.code,
      details: error.response?.data
    };
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ Generation.call —Ñ–æ—Ä–º–∞—Ç
async function callDashScopeGeneration(message) {
  const url = 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation';
  
  try {
    const requestBody = {
      model: 'qwen3-30b-a3b',
      prompt: `${AI_ADMIN_PROMPT}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${message}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:`,
      parameters: {
        temperature: 0.7,
        top_p: 0.8,
        max_tokens: 1000
      }
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å (Generation format)...');
    
    const response = await axios.post(url, requestBody, {
      headers: {
        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    return {
      success: true,
      text: response.data.output.text,
      usage: response.data.usage
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.response?.data?.message || error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function extractCommands(text) {
  const regex = /\[([A-Z_]+)(?:\s+([^\]]+))?\]/g;
  const commands = [];
  let match;
  
  while ((match = regex.exec(text)) !== null) {
    commands.push(match[0]);
  }
  
  return commands;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Qwen3-30B-A3B —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π DashScope API\n');
  console.log('–ú–æ–¥–µ–ª—å: MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (30.5B total, 3.3B active)\n');
  console.log('=' .repeat(80));
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
  console.log('\nüîß –¢–µ—Å—Ç 1: –ù–∞—Ç–∏–≤–Ω—ã–π API —Å enable_thinking: false\n');
  
  for (const scenario of TEST_SCENARIOS) {
    console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`);
    console.log('-'.repeat(60));
    
    const result = await callDashScopeNative(scenario.message);
    
    if (result.success) {
      const commands = extractCommands(result.text);
      console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${result.text}`);
      console.log(`üéØ –ö–æ–º–∞–Ω–¥—ã: ${commands.join(', ') || '–Ω–µ—Ç'}`);
      console.log(`üìä –¢–æ–∫–µ–Ω—ã: ${result.usage?.total_tokens || '–Ω/–¥'}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      if (result.code) console.log(`   –ö–æ–¥: ${result.code}`);
      if (result.details) console.log(`   –î–µ—Ç–∞–ª–∏:`, JSON.stringify(result.details, null, 2));
    }
    
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
  console.log('\n\nüîß –¢–µ—Å—Ç 2: Generation format (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)\n');
  
  const testMessage = '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É';
  console.log(`–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage}"`);
  
  const altResult = await callDashScopeGeneration(testMessage);
  
  if (altResult.success) {
    console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${altResult.text}`);
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${altResult.error}`);
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n\nüí° –í–´–í–û–î–´:');
  console.log('=' .repeat(80));
  
  console.log('\n–ï—Å–ª–∏ Qwen3-30B-A3B –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API:');
  console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ streaming API (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç)');
  console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Python SDK —Å extra_body –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
  console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Qwen2.5-32B –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É (–±–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)');
  
  console.log('\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Qwen2.5-32B-Instruct');
  console.log('- 32B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±–æ–ª—å—à–µ —á–µ–º 30B)');
  console.log('- –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API');
  console.log('- –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è (1378ms)');
  console.log('- –û—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã');
}

// –ó–∞–ø—É—Å–∫
console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π DashScope API\n');
console.log('Endpoints:');
console.log('- OpenAI-compatible: https://dashscope-intl.aliyuncs.com/compatible-mode/v1');
console.log('- Native DashScope: https://dashscope.aliyuncs.com/api/v1');
console.log('');

runTests().catch(console.error);