// test-with-real-dialogs.js
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Admin v2 –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö

require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');
const aiAdmin = require('./src/services/ai-admin-v2');

async function testWithRealDialogs() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö\n');
  
  try {
    // –ß–∏—Ç–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    const dialogsDir = path.join(__dirname, 'test-data/real-dialogs');
    const files = await fs.readdir(dialogsDir);
    const dialogFiles = files.filter(f => f.startsWith('dialog_'));
    
    if (dialogFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.');
      console.log('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/export-whatsapp-dialogs.js');
      return;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let totalTests = 0;
    let successfulIntents = 0;
    let failedIntents = 0;
    const intentStats = {};
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    for (const file of dialogFiles) {
      const dialog = JSON.parse(
        await fs.readFile(path.join(dialogsDir, file), 'utf-8')
      );
      
      console.log(`\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥: ${file}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${dialog.length}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const msg of dialog) {
        if (!msg.user) continue;
        
        totalTests++;
        console.log(`\nüí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${msg.user}"`);
        
        try {
          // –í—ã–∑—ã–≤–∞–µ–º AI Admin v2
          const result = await aiAdmin.processMessage(
            msg.user,
            '79000000001',
            509113
          );
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const commands = result.executedCommands || [];
          const commandNames = commands.map(c => c.command).join(', ') || 'none';
          
          console.log(`ü§ñ –ö–æ–º–∞–Ω–¥—ã: ${commandNames}`);
          console.log(`üìù –û—Ç–≤–µ—Ç: ${result.response.substring(0, 100)}...`);
          
          // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
          if (msg.bot) {
            console.log(`üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${msg.bot.substring(0, 100)}...`);
          }
          
          // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          if (commands.length > 0) {
            successfulIntents++;
            commands.forEach(cmd => {
              intentStats[cmd.command] = (intentStats[cmd.command] || 0) + 1;
            });
          } else {
            failedIntents++;
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
          failedIntents++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
    console.log('='.repeat(50));
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–Ω—Ç–µ–Ω—Ç—ã: ${successfulIntents} (${Math.round(successfulIntents/totalTests*100)}%)`);
    console.log(`‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–Ω—Ç–µ–Ω—Ç—ã: ${failedIntents} (${Math.round(failedIntents/totalTests*100)}%)`);
    
    console.log('\nüéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    Object.entries(intentStats).forEach(([command, count]) => {
      console.log(`  - ${command}: ${count} —Ä–∞–∑`);
    });
    
    const score = Math.round(successfulIntents / totalTests * 10);
    console.log(`\nüèÜ –û—Ü–µ–Ω–∫–∞: ${score}/10`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
testWithRealDialogs();