#!/usr/bin/env node

const axios = require('axios');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://46.149.70.219:3000';
const SECRET_KEY = 'sk_venom_webhook_3553';
const PHONE = '79001234567';
const COMPANY_ID = 962302;

async function sendTestMessage(message) {
  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö webhook –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const webhookData = {
      from: PHONE,
      message: message,
      timestamp: new Date().toISOString()
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ timestamp
    const timestamp = Date.now();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ HMAC –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏–∑ webhook-auth.js
    const method = 'POST';
    const path = '/webhook/whatsapp/batched';
    const body = JSON.stringify(webhookData);
    const payload = `${method}:${path}:${timestamp}:${body}`;
    
    const signature = crypto
      .createHmac('sha256', SECRET_KEY)
      .update(payload)
      .digest('hex');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}"`);
    
    const response = await axios.post(
      `${API_URL}/webhook/whatsapp/batched`,
      webhookData,
      {
        headers: {
          'Content-Type': 'application/json',
          'x-signature': signature,
          'x-timestamp': timestamp.toString()
        }
      }
    );

    console.log('‚úÖ Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('Response:', response.data);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook:');
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    } else {
      console.error(error.message);
    }
  }
}

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testTimeContextScenario() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏\n');

  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–ª–∏–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º –º–µ–Ω—è–µ—Ç –¥–∞—Ç—É
  console.log('üìç –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω–µ–µ');
  await sendTestMessage('–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∫ –ë–∞—Ä–∏');
  await sleep(3000);
  
  await sendTestMessage('–ù–∞ –∑–∞–≤—Ç—Ä–∞');
  await sleep(3000);
  
  await sendTestMessage('–í 18:00');
  await sleep(3000);
  
  // –¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç –º–µ–Ω—è–µ—Ç –¥–∞—Ç—É, –Ω–æ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
  await sendTestMessage('–ú–æ–∂–Ω–æ –Ω–∞ 7 –∞–≤–≥—É—Å—Ç–∞');
  await sleep(5000);
  
  console.log('\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1 –∑–∞–≤–µ—Ä—à–µ–Ω. AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è 18:00 –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTimeContextScenario();