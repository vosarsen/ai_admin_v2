#!/usr/bin/env node
// test-architecture-mock.js - –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –º–æ–∫–∞–º–∏ (–±–µ–∑ Supabase)

const smartCache = require('./src/services/cache/smart-cache');
const rapidFireProtection = require('./src/services/rapid-fire-protection');

// –ú–æ–∫ –¥–ª—è entity resolver –±–µ–∑ Supabase
class MockEntityResolver {
  async resolveService(serviceName, companyId, context) {
    console.log(`üîç [MOCK] Resolving service: "${serviceName}"`);
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–æ–∫-–ª–æ–≥–∏–∫–∞
    const mockServices = {
      '—Å—Ç—Ä–∏–∂–∫–∞': { yclients_id: 18356041, title: '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', price_min: 1500 },
      '–º–∞–Ω–∏–∫—é—Ä': { yclients_id: 18356100, title: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', price_min: 2000 },
      '–±–æ—Ä–æ–¥–∞': { yclients_id: 18356102, title: '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã', price_min: 1200 }
    };
    
    const foundService = Object.entries(mockServices).find(([key]) => 
      serviceName.toLowerCase().includes(key)
    );
    
    return foundService ? foundService[1] : mockServices['—Å—Ç—Ä–∏–∂–∫–∞'];
  }
  
  async resolveStaff(staffName, companyId, context) {
    console.log(`üë§ [MOCK] Resolving staff: "${staffName}"`);
    
    const mockStaff = {
      '—Å–µ—Ä–≥–µ–π': { yclients_id: 2895125, name: '–°–µ—Ä–≥–µ–π', rating: 4.8 },
      '–±–∞—Ä–∏': { yclients_id: 3413963, name: '–ë–∞—Ä–∏', rating: 4.9 },
      'default': { yclients_id: 2895125, name: '–°–µ—Ä–≥–µ–π', rating: 4.8 }
    };
    
    const found = Object.entries(mockStaff).find(([key]) => 
      staffName?.toLowerCase().includes(key)
    );
    
    return found ? found[1] : mockStaff['default'];
  }
}

async function testArchitecture() {
  console.log('üèóÔ∏è Testing Architecture Components (Mock Mode)...\n');
  
  const mockEntityResolver = new MockEntityResolver();

  try {
    // –¢–µ—Å—Ç 1: Smart Cache
    console.log('üì¶ Test 1: Smart Cache');
    
    const cacheTest = await smartCache.getOrCompute(
      'test_key_123',
      async () => {
        console.log('Computing expensive operation...');
        await new Promise(resolve => setTimeout(resolve, 100));
        return { data: 'test_value', computed: Date.now() };
      },
      { ttl: 60 }
    );
    
    console.log('‚úÖ Cache result:', cacheTest);
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
    const startTime = Date.now();
    const cachedResult = await smartCache.getOrCompute(
      'test_key_123',
      async () => {
        throw new Error('Should not be called');
      }
    );
    const cacheTime = Date.now() - startTime;
    
    console.log(`‚úÖ Cached result in ${cacheTime}ms:`, cachedResult);

    // –¢–µ—Å—Ç 2: Entity Resolution (Mock)
    console.log('\nüéØ Test 2: Entity Resolution');
    
    const service1 = await mockEntityResolver.resolveService('—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', '962302', {});
    console.log('‚úÖ Service resolved:', service1);
    
    const staff1 = await mockEntityResolver.resolveStaff('—Å–µ—Ä–≥–µ–π', '962302', {});
    console.log('‚úÖ Staff resolved:', staff1);
    
    const service2 = await mockEntityResolver.resolveService('—Ö–æ—á—É –º–∞–Ω–∏–∫—é—Ä', '962302', {});
    console.log('‚úÖ Service resolved:', service2);

    // –¢–µ—Å—Ç 3: Rapid-Fire Protection
    console.log('\nüî• Test 3: Rapid-Fire Protection');
    
    let messagesProcessed = 0;
    const testPhone = '79999999999';
    
    const mockCallback = async (combinedMessage, metadata) => {
      messagesProcessed++;
      console.log(`üì¶ Processed message ${messagesProcessed}:`, {
        message: combinedMessage.length > 50 ? 
          combinedMessage.substring(0, 50) + '...' : 
          combinedMessage,
        isRapidFire: metadata.isRapidFireBatch || false,
        originalCount: metadata.originalMessagesCount || 1,
        waitTime: metadata.totalWaitTime || 0
      });
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º rapid-fire —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('Sending rapid-fire messages...');
    rapidFireProtection.processMessage(testPhone, '–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', mockCallback);
    
    setTimeout(() => {
      rapidFireProtection.processMessage(testPhone, '–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', mockCallback);
    }, 200);
    
    setTimeout(() => {
      rapidFireProtection.processMessage(testPhone, '–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', mockCallback);
    }, 400);

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // –¢–µ—Å—Ç 4: Performance Test
    console.log('\nüèÉ Test 4: Performance Test');
    
    const queries = [
      '—Å—Ç—Ä–∏–∂–∫–∞',
      '–º–∞–Ω–∏–∫—é—Ä',
      '–±–æ—Ä–æ–¥–∞',
      '—Å—Ç—Ä–∏–∂–∫–∞', // repeat
      '–ø–µ–¥–∏–∫—é—Ä',
      '–º–∞—Å—Å–∞–∂',
      '—Å—Ç—Ä–∏–∂–∫–∞', // repeat
      '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ',
      '–º–∞–Ω–∏–∫—é—Ä', // repeat
      '—É–∫–ª–∞–¥–∫–∞'
    ];
    
    const performanceStart = Date.now();
    const results = [];
    
    for (const query of queries) {
      const start = Date.now();
      const service = await mockEntityResolver.resolveService(query, '962302', {});
      const time = Date.now() - start;
      results.push({ query, service: service.title, time });
    }
    
    const totalTime = Date.now() - performanceStart;
    const avgTime = totalTime / queries.length;
    
    console.log('\nPerformance Results:');
    results.forEach(r => {
      console.log(`"${r.query}" ‚Üí ${r.service} (${r.time}ms)`);
    });
    
    console.log(`\nüìà Performance Summary:`);
    console.log(`Total time: ${totalTime}ms`);
    console.log(`Average time per request: ${Math.round(avgTime)}ms`);
    console.log(`Requests per second: ${Math.round(1000 / avgTime)}`);

    // –¢–µ—Å—Ç 5: Cache Statistics
    console.log('\nüìä Test 5: Cache Statistics');
    const stats = smartCache.getStats();
    console.log('Smart Cache Stats:', {
      hits: stats.hits,
      misses: stats.misses,
      hitRate: stats.hitRate
    });
    
    const rapidStats = rapidFireProtection.getStats();
    console.log('Rapid-Fire Stats:', {
      pendingBatches: rapidStats.pendingBatches,
      config: rapidStats.config
    });

    console.log('\n‚úÖ Architecture test completed successfully!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (avgTime < 50) {
      console.log('üöÄ Performance: EXCELLENT (< 50ms average)');
    } else if (avgTime < 200) {
      console.log('‚úÖ Performance: GOOD (< 200ms average)');
    } else {
      console.log('‚ö†Ô∏è Performance: NEEDS OPTIMIZATION (> 200ms average)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (stats.hitRate.includes('100%')) {
      console.log('üíæ Caching: PERFECT (100% hit rate on repeated queries)');
    } else if (parseInt(stats.hitRate) > 50) {
      console.log('‚úÖ Caching: WORKING (>50% hit rate)');
    } else {
      console.log('‚ö†Ô∏è Caching: NEEDS CHECK');
    }

  } catch (error) {
    console.error('‚ùå Architecture test failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testArchitecture().then(() => {
    console.log('\nüéâ All architecture tests passed!');
    console.log('\nüèóÔ∏è –ì–û–¢–û–í–û –ö PRODUCTION:');
    console.log('‚úÖ Smart Cache - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Entity Resolution - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Rapid-Fire Protection - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Performance - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å Supabase (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    console.log('3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É AI');
    process.exit(0);
  }).catch(error => {
    console.error('üí• Architecture test suite failed:', error);
    process.exit(1);
  });
}

module.exports = testArchitecture;