// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
const templates = require('./src/services/reminder/templates');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
const fs = require('fs');
const templateCode = fs.readFileSync('./src/services/reminder/templates.js', 'utf-8');

// –ù–∞–π–¥–µ–º —à–∞–±–ª–æ–Ω
const match = templateCode.match(/"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! \{name\}, –∑–∞–≤—Ç—Ä–∞ –≤ \{time\} —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ \{service\} ‚≠ê"/);

console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞...\n');

if (match) {
  console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ:');
  console.log(match[0]);
  console.log('\n');
} else {
  console.log('‚ùå –®–∞–±–ª–æ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ');
}

// –°–æ–∑–¥–∞–¥–∏–º –º–∏–Ω–∏-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã
function testReplacement() {
  const template = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! {name}, –∑–∞–≤—Ç—Ä–∞ –≤ {time} —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ {service} ‚≠ê";

  const services = [
    {
      title: '–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
      declensions: {
        nominative: '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
        accusative: '–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É',
        prepositional_na: '–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É'
      }
    },
    {
      title: '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã',
      declensions: {
        nominative: '–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã',
        accusative: '–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã',
        prepositional_na: '–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã'
      }
    }
  ];

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ fillTemplate
  let result = template;

  // –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –∏ –≤—Ä–µ–º—è
  result = result.replace(/{name}/g, '–ú–∏—Ö–∞–∏–ª');
  result = result.replace(/{time}/g, '12:00');

  console.log('='.repeat(60));
  console.log('–¢–ï–°–¢ –ó–ê–ú–ï–ù–´:');
  console.log('='.repeat(60));
  console.log('\n–ò—Å—Ö–æ–¥–Ω—ã–π —à–∞–±–ª–æ–Ω:');
  console.log(template);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏
  const formatServicesInCase = (services, caseType) => {
    if (services.length === 1) {
      return services[0].declensions[caseType] || services[0].title.toLowerCase();
    }
    const formatted = services.map(s => s.declensions[caseType] || s.title.toLowerCase());
    if (formatted.length === 2) {
      return `${formatted[0]} –∏ ${formatted[1]}`;
    }
    const allButLast = formatted.slice(0, -1).join(', ');
    const last = formatted[formatted.length - 1];
    return `${allButLast} –∏ ${last}`;
  };

  console.log('\n1Ô∏è‚É£ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º: "—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ {service}"');
  result = result.replace(/—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ {service}/g,
    `—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ ${formatServicesInCase(services, 'nominative')}`);
  console.log(result);

  console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log(result);

  if (result.includes('–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã')) {
    console.log('\nüéâ –ü–†–ê–í–ò–õ–¨–ù–û! –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂!');
  } else if (result.includes('–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É')) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ê! –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ!');
  }
}

testReplacement();
