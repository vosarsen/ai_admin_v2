#!/usr/bin/env node
// test-ai-first.js - –¢–µ—Å—Ç –Ω–æ–≤–æ–π AI-First –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

const entityResolver = require('./src/services/ai/entity-resolver');
const smartCache = require('./src/services/cache/smart-cache');

async function testAIFirst() {
  console.log('üß™ Testing AI-First + Smart Caching architecture...\n');

  try {
    const companyId = process.env.YCLIENTS_COMPANY_ID || '962302';
    const context = {
      companyId,
      client: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        favorite_staff_ids: []
      }
    };

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏
    console.log('üîç Test 1: Service Resolution');
    console.log('Input: "—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π"');
    
    const startTime1 = Date.now();
    const service = await entityResolver.resolveService('—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', companyId, context);
    const time1 = Date.now() - startTime1;
    
    console.log(`‚úÖ Resolved service: ${service.title} (ID: ${service.yclients_id})`);
    console.log(`‚è±Ô∏è  Time: ${time1}ms\n`);

    // –¢–µ—Å—Ç 2: –¢–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
    console.log('üîç Test 2: Same Service (should be cached)');
    console.log('Input: "—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π"');
    
    const startTime2 = Date.now();
    const serviceCached = await entityResolver.resolveService('—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', companyId, context);
    const time2 = Date.now() - startTime2;
    
    console.log(`‚úÖ Resolved service: ${serviceCached.title} (ID: ${serviceCached.yclients_id})`);
    console.log(`‚è±Ô∏è  Time: ${time2}ms (${time2 < 100 ? 'CACHED! üöÄ' : 'NOT CACHED'})\n`);

    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞
    console.log('üîç Test 3: Staff Resolution');
    console.log('Input: "—Å–µ—Ä–≥–µ–π"');
    
    const startTime3 = Date.now();
    const staff = await entityResolver.resolveStaff('—Å–µ—Ä–≥–µ–π', companyId, context);
    const time3 = Date.now() - startTime3;
    
    console.log(`‚úÖ Resolved staff: ${staff.name} (ID: ${staff.yclients_id})`);
    console.log(`‚è±Ô∏è  Time: ${time3}ms\n`);

    // –¢–µ—Å—Ç 4: Fuzzy –ø–æ–∏—Å–∫
    console.log('üîç Test 4: Fuzzy Search');
    console.log('Input: "—Å—Ç—Ä–∏—à–∫–∞" (—Å –æ–ø–µ—á–∞—Ç–∫–æ–π)');
    
    const startTime4 = Date.now();
    const serviceFuzzy = await entityResolver.resolveService('—Å—Ç—Ä–∏—à–∫–∞', companyId, context);
    const time4 = Date.now() - startTime4;
    
    console.log(`‚úÖ Resolved service: ${serviceFuzzy.title} (ID: ${serviceFuzzy.yclients_id})`);
    console.log(`‚è±Ô∏è  Time: ${time4}ms\n`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    console.log('üìä Cache Statistics:');
    const stats = smartCache.getStats();
    console.log(`Cache hits: ${stats.hits}`);
    console.log(`Cache misses: ${stats.misses}`);
    console.log(`Hit rate: ${stats.hitRate}`);
    console.log(`Average compute time: ${stats.avgComputeTime}\n`);

    // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('üèÉ Performance Test: 10 requests');
    const testQueries = [
      '—Å—Ç—Ä–∏–∂–∫–∞',
      '–º–∞–Ω–∏–∫—é—Ä', 
      '–ø–µ–¥–∏–∫—é—Ä',
      '—Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã',
      '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
      '—Å—Ç—Ä–∏–∂–∫–∞',  // –ø–æ–≤—Ç–æ—Ä
      '–º–∞–Ω–∏–∫—é—Ä', // –ø–æ–≤—Ç–æ—Ä
      '–±—Ä–∏—Ç—å–µ',
      '—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π',
      '—Å—Ç—Ä–∏–∂–∫–∞' // –ø–æ–≤—Ç–æ—Ä
    ];

    const performanceStart = Date.now();
    const results = [];
    
    for (const query of testQueries) {
      const start = Date.now();
      const result = await entityResolver.resolveService(query, companyId, context);
      const time = Date.now() - start;
      results.push({ query, service: result.title, time });
    }
    
    const totalTime = Date.now() - performanceStart;
    const avgTime = totalTime / testQueries.length;
    
    console.log('\nResults:');
    results.forEach(r => {
      console.log(`"${r.query}" ‚Üí ${r.service} (${r.time}ms)`);
    });
    
    console.log(`\nüìà Performance Summary:`);
    console.log(`Total time: ${totalTime}ms`);
    console.log(`Average time per request: ${Math.round(avgTime)}ms`);
    console.log(`Requests per second: ${Math.round(1000 / avgTime)}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalStats = smartCache.getStats();
    console.log(`\nüìä Final Cache Statistics:`);
    console.log(`Total hits: ${finalStats.hits}`);
    console.log(`Total misses: ${finalStats.misses}`);
    console.log(`Final hit rate: ${finalStats.hitRate}`);

    console.log('\n‚úÖ AI-First architecture test completed successfully!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testAIFirst().then(() => {
    console.log('\nüéâ All tests passed!');
    process.exit(0);
  }).catch(error => {
    console.error('üí• Test suite failed:', error);
    process.exit(1);
  });
}

module.exports = testAIFirst;