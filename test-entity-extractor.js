// Quick test for entity extractor improvements
const EntityExtractor = require('./src/services/nlu/entity-extractor');
const logger = require('./src/utils/logger');

const extractor = new EntityExtractor();

// Test cases for info intent
const testCases = [
  { message: '–ö–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É?', expectedIntent: 'info' },
  { message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–æ—Ä–æ–¥–∞?', expectedIntent: 'info' },
  { message: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –µ—Å—Ç—å?', expectedIntent: 'info' },
  { message: '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –≤ —Å–∞–ª–æ–Ω–µ?', expectedIntent: 'info' },
  { message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', expectedIntent: 'booking' },
  { message: '–ó–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω—è –∑–∞–≤—Ç—Ä–∞', expectedIntent: 'booking' },
];

logger.info('üß™ Testing Entity Extractor...\n');

testCases.forEach(({ message, expectedIntent }) => {
  const result = extractor.extract(message);
  const passed = result.intent.name === expectedIntent;
  
  logger.info(`Message: "${message}"`);
  logger.info(`Expected: ${expectedIntent}, Got: ${result.intent.name} (confidence: ${result.intent.confidence.toFixed(2)})`);
  logger.info(passed ? '‚úÖ PASSED' : '‚ùå FAILED');
  logger.info('---');
});