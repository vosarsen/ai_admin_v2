#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
 * 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å
 * 2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —É—Å–ª—É–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
 * 3. –û—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */

require('dotenv').config();
const logger = require('./src/utils/logger');
const contextService = require('./src/services/context');
const AIAdminV2 = require('./src/services/ai-admin-v2');

// –£—Å—Ç–∞–Ω–æ–≤–∏–º USE_TWO_STAGE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
process.env.USE_TWO_STAGE = 'true';
process.env.AI_PROMPT_VERSION = 'two-stage';

const TEST_PHONE = '+79001234567';
const COMPANY_ID = 962302;

async function clearContext() {
  console.log('\nüßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç...');
  const contextKey = `${COMPANY_ID}:${TEST_PHONE}`;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞—Ç–æ–π –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
  await contextService.setContext(TEST_PHONE, COMPANY_ID, {
    state: 'active',
    data: {
      lastCommand: 'CANCEL_BOOKING',
      lastService: 'old_service',
      clientName: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç'
    }
  });
  
  // –ú–µ–Ω—è–µ–º lastActivity –Ω–∞ –≤—á–µ—Ä–∞
  const redis = contextService.redis;
  const yesterday = new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString();
  await redis.hset(`context:${contextKey}`, 'lastActivity', yesterday);
  
  console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å lastActivity:', yesterday);
}

async function testFirstMessage() {
  console.log('\nüì± –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)');
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"');
  
  const aiAdmin = new AIAdminV2();
  const result = await aiAdmin.processMessage(
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å',
    TEST_PHONE,
    COMPANY_ID
  );
  
  console.log('\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
  console.log(result.response);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const hasGreeting = /–¥–æ–±—Ä|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–ø—Ä–∏–≤–µ—Ç/i.test(result.response);
  console.log(`\n‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ: ${hasGreeting ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
  
  return result;
}

async function testServiceQuery() {
  console.log('\nüì± –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ —Å—Ç—Ä–∏–∂–∫–∏ (–¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏)');
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "–ö–∞–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?"');
  
  const aiAdmin = new AIAdminV2();
  const result = await aiAdmin.processMessage(
    '–ö–∞–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?',
    TEST_PHONE,
    COMPANY_ID
  );
  
  console.log('\nü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:');
  console.log(result.response);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å–ª—É–≥ —Å —Ü–µ–Ω–∞–º–∏
  const hasPrices = /\d+‚ÇΩ|\d+ —Ä—É–±/i.test(result.response);
  const hasServices = /—Å—Ç—Ä–∏–∂–∫|–º–æ–¥–µ–ª—å|–º–∞—à–∏–Ω–∫|–ø–æ–ª—É–±–æ–∫—Å|–∫–∞–Ω–∞–¥–∫–∞/i.test(result.response);
  
  console.log(`\n‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ: ${hasServices ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
  console.log(`‚úÖ –¶–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ: ${hasPrices ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (result.commands && result.commands.length > 0) {
    console.log('\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    result.commands.forEach(cmd => {
      console.log(`  - ${cmd.command}: ${cmd.success ? '‚úÖ' : '‚ùå'}`);
    });
  }
  
  return result;
}

async function checkContextAfter() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
  
  const context = await contextService.getContext(TEST_PHONE, COMPANY_ID);
  const contextKey = `${COMPANY_ID}:${TEST_PHONE}`;
  const redis = contextService.redis;
  const contextData = await redis.hgetall(`context:${contextKey}`);
  
  console.log('\nüìä –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:');
  
  if (contextData.data) {
    const data = JSON.parse(contextData.data);
    console.log('  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã
    const hasOldCommand = data.lastCommand === 'CANCEL_BOOKING';
    const hasOldService = data.lastService === 'old_service';
    const hasClientName = !!data.clientName;
    
    console.log(`\n‚úÖ –°—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–∞: ${!hasOldCommand ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
    console.log(`‚úÖ –°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å –æ—á–∏—â–µ–Ω: ${!hasOldService ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
    console.log(`‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${hasClientName ? '–î–ê' : '–ù–ï–¢'}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActivity
  const lastActivity = contextData.lastActivity;
  const isRecent = (Date.now() - new Date(lastActivity).getTime()) < 60000; // –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
  console.log(`‚úÖ lastActivity –æ–±–Ω–æ–≤–ª–µ–Ω: ${isRecent ? '–î–ê' : '–ù–ï–¢ (–æ—à–∏–±–∫–∞!)'}`);
}

async function runTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–∫–∞–∑–∞ —É—Å–ª—É–≥\n');
    console.log('=' .repeat(60));
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await clearContext();
    
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
    await testFirstMessage();
    console.log('\n' + '-'.repeat(60));
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ —É—Å–ª—É–≥–∏
    await testServiceQuery();
    console.log('\n' + '-'.repeat(60));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await checkContextAfter();
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();