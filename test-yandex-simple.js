#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç YandexGPT vs DeepSeek –¥–ª—è AI Admin
 */

const axios = require('axios');

// –ü—Ä–æ–º–ø—Ç –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI Admin (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
const AI_ADMIN_PROMPT = `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ "–°—Ç–∏–ª—å".

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ê–õ–û–ù–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: –ë–∞—Ä–±–µ—Ä—à–æ–ø "–°—Ç–∏–ª—å"
–ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞ 1
–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00-20:00

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò:
- –°—Ç—Ä–∏–∂–∫–∞ (id: 45) - 1500 —Ä—É–±.
- –ë–æ—Ä–æ–¥–∞ (id: 46) - 800 —Ä—É–±.
- –ö–æ–º–ø–ª–µ–∫—Å —Å—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞ (id: 47) - 2000 —Ä—É–±.

–ú–ê–°–¢–ï–†–ê:
- –ò–≤–∞–Ω (id: 101) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è —Å 10:00 –¥–æ 20:00
- –ü–µ—Ç—Ä (id: 102) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è —Å 12:00 –¥–æ 18:00

–í–ê–ñ–ù–û: –í—Å—Ç—Ä–∞–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]:
- [SEARCH_SLOTS date:"2025-08-03" service_ids:[45]] - –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
- [CREATE_BOOKING date:"2025-08-03" time:"15:00" service_id:45 staff_id:101] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
- [SHOW_PRICES] - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã

–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.`;

async function testYandexGPT(message) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ IAM —Ç–æ–∫–µ–Ω (–∫–∞–∫ –≤ AI Admin), –ª–∏–±–æ API –∫–ª—é—á
  const YANDEX_IAM_TOKEN = process.env.YANDEX_IAM_TOKEN;
  const YANDEX_API_KEY = process.env.YANDEX_API_KEY;
  const YANDEX_FOLDER_ID = process.env.YANDEX_FOLDER_ID;
  
  if (!YANDEX_FOLDER_ID || (!YANDEX_IAM_TOKEN && !YANDEX_API_KEY)) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YANDEX_FOLDER_ID –∏ –ª–∏–±–æ YANDEX_IAM_TOKEN, –ª–∏–±–æ YANDEX_API_KEY');
    return null;
  }
  
  const url = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion';
  
  try {
    const start = Date.now();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const headers = {
      'Content-Type': 'application/json'
    };
    
    if (YANDEX_IAM_TOKEN) {
      headers['Authorization'] = `Bearer ${YANDEX_IAM_TOKEN}`;
    } else {
      headers['Authorization'] = `Api-Key ${YANDEX_API_KEY}`;
    }
    
    const response = await axios.post(url, {
      modelUri: `gpt://${YANDEX_FOLDER_ID}/yandexgpt-lite/latest`,
      completionOptions: {
        stream: false,
        temperature: 0.3,
        maxTokens: 1000
      },
      messages: [
        { role: 'system', text: AI_ADMIN_PROMPT },
        { role: 'user', text: message }
      ]
    }, { headers });
    
    const time = Date.now() - start;
    const text = response.data.result.alternatives[0].message.text;
    
    return { text, time };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ YandexGPT:', error.response?.data || error.message);
    return null;
  }
}

async function testDeepSeek(message) {
  const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
  
  if (!DEEPSEEK_API_KEY) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEEPSEEK_API_KEY');
    return null;
  }
  
  const url = 'https://api.deepseek.com/v1/chat/completions';
  
  try {
    const start = Date.now();
    const response = await axios.post(url, {
      model: 'deepseek-chat',
      messages: [
        { role: 'system', content: AI_ADMIN_PROMPT },
        { role: 'user', content: message }
      ],
      temperature: 0.3,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    const time = Date.now() - start;
    const text = response.data.choices[0].message.content;
    
    return { text, time };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ DeepSeek:', error.response?.data || error.message);
    return null;
  }
}

function extractCommands(text) {
  const regex = /\[([A-Z_]+)(?:\s+([^\]]+))?\]/g;
  const commands = [];
  let match;
  
  while ((match = regex.exec(text)) !== null) {
    commands.push(match[0]);
  }
  
  return commands;
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º YandexGPT vs DeepSeek\n');
  
  const testMessage = process.argv[2] || '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00';
  
  console.log(`üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage}"\n`);
  
  // –¢–µ—Å—Ç YandexGPT
  const yandexResult = await testYandexGPT(testMessage);
  if (yandexResult) {
    console.log('üü° YandexGPT 5 Lite:');
    console.log(`–û—Ç–≤–µ—Ç: ${yandexResult.text}`);
    console.log(`–í—Ä–µ–º—è: ${yandexResult.time}ms`);
    console.log(`–ö–æ–º–∞–Ω–¥—ã: ${extractCommands(yandexResult.text).join(', ') || '–Ω–µ—Ç'}`);
  }
  
  console.log('\n' + '-'.repeat(80) + '\n');
  
  // –¢–µ—Å—Ç DeepSeek
  const deepseekResult = await testDeepSeek(testMessage);
  if (deepseekResult) {
    console.log('üîµ DeepSeek:');
    console.log(`–û—Ç–≤–µ—Ç: ${deepseekResult.text}`);
    console.log(`–í—Ä–µ–º—è: ${deepseekResult.time}ms`);
    console.log(`–ö–æ–º–∞–Ω–¥—ã: ${extractCommands(deepseekResult.text).join(', ') || '–Ω–µ—Ç'}`);
  }
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  if (yandexResult && deepseekResult) {
    console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:');
    console.log(`–°–∫–æ—Ä–æ—Å—Ç—å: YandexGPT ${yandexResult.time}ms vs DeepSeek ${deepseekResult.time}ms`);
    console.log(`–ë—ã—Å—Ç—Ä–µ–µ: ${yandexResult.time < deepseekResult.time ? 'YandexGPT üèÜ' : 'DeepSeek üèÜ'}`);
  }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('export YANDEX_IAM_TOKEN="your-iam-token"  # –∏–ª–∏ YANDEX_API_KEY');
console.log('export YANDEX_FOLDER_ID="your-folder-id"');
console.log('export DEEPSEEK_API_KEY="your-key"');
console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-yandex-simple.js "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"');
console.log('');

if ((process.env.YANDEX_IAM_TOKEN || process.env.YANDEX_API_KEY) || process.env.DEEPSEEK_API_KEY) {
  main().catch(console.error);
}