const axios = require('axios');
const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function testRandomClients() {
  console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –°–õ–£–ß–ê–ô–ù–´–• –ù–ï–°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –≤–∏–∑–∏—Ç–æ–≤ –≤ visits
  const { data: visits } = await supabase
    .from('visits')
    .select('client_id');
  const syncedIds = new Set(visits?.map(v => v.client_id).filter(id => id));
  
  const { data: unsyncedClients } = await supabase
    .from('clients')
    .select('id, yclients_id, name, phone, visit_count')
    .eq('company_id', 962302)
    .gt('visit_count', 5)
    .order('visit_count', { ascending: false })
    .limit(50);
    
  const testClients = unsyncedClients?.filter(c => !syncedIds.has(c.id)).slice(0, 10);
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º ${testClients?.length || 0} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n`);
  
  let apiWorks = 0;
  let apiEmpty = 0;
  let apiError = 0;
  const results = [];
  
  for (const client of testClients || []) {
    console.log(`\nüìå ${client.name} (ID: ${client.id}, YClients: ${client.yclients_id}):`);
    console.log('  Phone: ' + client.phone);
    console.log('  Visit count: ' + client.visit_count);
    
    try {
      const url = `https://api.yclients.com/api/v1/records/${companyId}`;
      
      const response = await axios.get(url, {
        params: {
          client_id: client.yclients_id,
          start_date: '2020-01-01',
          end_date: '2025-12-31',
          include_finance_transactions: 1,
          with_deleted: 1
        },
        headers: {
          'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
          'Accept': 'application/vnd.api.v2+json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      const records = response.data?.data || [];
      const clientRecords = records.filter(r => r.client?.id === client.yclients_id);
      
      if (clientRecords.length > 0) {
        console.log(`  ‚úÖ API –≤–µ—Ä–Ω—É–ª ${clientRecords.length} –∑–∞–ø–∏—Å–µ–π`);
        apiWorks++;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã
        const dates = clientRecords.slice(0, 3).map(r => r.date);
        console.log(`  –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç: ${dates.join(', ')}`);
        
        results.push({
          client: client.name,
          id: client.id,
          yclients_id: client.yclients_id,
          visit_count: client.visit_count,
          api_records: clientRecords.length,
          status: 'HAS_DATA'
        });
      } else {
        console.log('  ‚ùå API –≤–µ—Ä–Ω—É–ª 0 –∑–∞–ø–∏—Å–µ–π (—Ö–æ—Ç—è visit_count = ' + client.visit_count + ')');
        apiEmpty++;
        
        results.push({
          client: client.name,
          id: client.id,
          yclients_id: client.yclients_id,
          visit_count: client.visit_count,
          api_records: 0,
          status: 'NO_DATA'
        });
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
      apiError++;
      
      results.push({
        client: client.name,
        id: client.id,
        yclients_id: client.yclients_id,
        visit_count: client.visit_count,
        api_records: -1,
        status: 'ERROR'
      });
    }
  }
  
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`  ‚Ä¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ: ${apiWorks}/${testClients?.length || 0}`);
  console.log(`  ‚Ä¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç: ${apiEmpty}/${testClients?.length || 0}`);
  console.log(`  ‚Ä¢ –û—à–∏–±–∫–∏ API: ${apiError}/${testClients?.length || 0}`);
  
  if (apiWorks > 0) {
    console.log('\n‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ API:');
    results.filter(r => r.status === 'HAS_DATA').forEach(r => {
      console.log(`  ‚Ä¢ ${r.client}: ${r.api_records} –∑–∞–ø–∏—Å–µ–π (visit_count: ${r.visit_count})`);
    });
  }
  
  if (apiEmpty > 0) {
    console.log('\n‚ùå –ö–ª–∏–µ–Ω—Ç—ã –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö –≤ API:');
    results.filter(r => r.status === 'NO_DATA').forEach(r => {
      console.log(`  ‚Ä¢ ${r.client} (YClients: ${r.yclients_id}, visit_count: ${r.visit_count})`);
    });
  }
  
  console.log('\nüí° –í–´–í–û–î:');
  if (apiWorks > apiEmpty) {
    console.log('  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ API.');
    console.log('  –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!');
  } else if (apiEmpty > apiWorks) {
    console.log('  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ù–ï –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API.');
    console.log('  –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—Ç–∞—Ä—ã–µ/–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏.');
  }
}

testRandomClients().catch(console.error);