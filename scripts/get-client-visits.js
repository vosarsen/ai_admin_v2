#!/usr/bin/env node

const axios = require('axios');
const config = require('../src/config');
const logger = require('../src/utils/logger');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ YClients API
 */

const PHONE = process.argv[2]; // –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

if (!PHONE) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/get-client-visits.js +79XXXXXXXXX');
  process.exit(1);
}

async function getClientVisits(phone) {
  try {
    const normalizedPhone = phone.replace(/\D/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞)
    const today = new Date();
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    
    const params = {
      client_phone: normalizedPhone,
      from: threeMonthsAgo.toISOString().split('T')[0],
      to: today.toISOString().split('T')[0],
      payment_statuses: [], // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã
      attendance: -1 // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è
    };
    
    console.log('üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞:', params.from, '-', params.to);
    console.log('üì± –¢–µ–ª–µ—Ñ–æ–Ω:', normalizedPhone);
    
    const response = await axios.post(
      `${config.yclients.apiUrl}/company/${config.yclients.companyId}/clients/visits/search`,
      params,
      {
        headers: {
          'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
          'Accept': 'application/vnd.yclients.v2+json',
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data;
  } catch (error) {
    if (error.response?.status === 404) {
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —Å client_id null
      console.log('‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...');
      
      const normalizedPhone = phone.replace(/\D/g, '');
      const today = new Date();
      const threeMonthsAgo = new Date();
      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
      
      try {
        const response = await axios.post(
          `${config.yclients.apiUrl}/company/${config.yclients.companyId}/clients/visits/search`,
          {
            client_id: null,
            client_phone: normalizedPhone,
            from: threeMonthsAgo.toISOString().split('T')[0],
            to: today.toISOString().split('T')[0],
            payment_statuses: [],
            attendance: -1
          },
          {
            headers: {
              'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
              'Accept': 'application/vnd.yclients.v2+json',
              'Content-Type': 'application/json'
            }
          }
        );
        return response.data;
      } catch (altError) {
        logger.error('Alternative search failed:', altError.response?.data || altError.message);
        throw altError;
      }
    }
    
    logger.error('Error getting client visits:', error.response?.data || error.message);
    throw error;
  }
}

function formatVisitInfo(visit) {
  const totalCost = visit.services.reduce((sum, service) => sum + service.cost_to_pay, 0);
  const paidSum = visit.services.reduce((sum, service) => sum + service.paid_sum, 0);
  
  return {
    date: new Date(visit.date).toLocaleString('ru-RU'),
    staff: visit.staff?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
    services: visit.services.map(s => ({
      name: s.title,
      cost: s.cost_to_pay,
      paid: s.paid_sum,
      status: s.payment_status
    })),
    totalCost,
    paidSum,
    attendance: visit.attendance,
    comment: visit.comment
  };
}

async function main() {
  console.log(`üîç –ò—â–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${PHONE}\n`);
  
  try {
    const result = await getClientVisits(PHONE);
    
    if (!result.success) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π');
      return;
    }
    
    const { records = [], goods_transactions = [] } = result.data;
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í–∏–∑–∏—Ç–æ–≤: ${records.length}`);
    console.log(`   –ü–æ–∫—É–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: ${goods_transactions.length}\n`);
    
    if (records.length === 0 && goods_transactions.length === 0) {
      console.log('üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –ø—É—Å—Ç–∞');
      return;
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π
    if (records.length > 0) {
      console.log('üìã –ò–°–¢–û–†–ò–Ø –ó–ê–ü–ò–°–ï–ô:\n');
      
      records.forEach((record, index) => {
        const visit = formatVisitInfo(record);
        
        console.log(`${index + 1}. ${visit.date}`);
        console.log(`   üë§ –ú–∞—Å—Ç–µ—Ä: ${visit.staff}`);
        console.log(`   üìã –£—Å–ª—É–≥–∏:`);
        
        visit.services.forEach(service => {
          const statusEmoji = service.status === 'paid_full' ? '‚úÖ' : 
                             service.status === 'paid_not_full' ? '‚ö†Ô∏è' : '‚ùå';
          console.log(`      ${statusEmoji} ${service.name} - ${service.cost}‚ÇΩ (–æ–ø–ª–∞—á–µ–Ω–æ: ${service.paid}‚ÇΩ)`);
        });
        
        console.log(`   üí∞ –ò—Ç–æ–≥–æ: ${visit.totalCost}‚ÇΩ (–æ–ø–ª–∞—á–µ–Ω–æ: ${visit.paidSum}‚ÇΩ)`);
        
        const attendanceStatus = visit.attendance === 1 ? '‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª' :
                                visit.attendance === 0 ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è' :
                                visit.attendance === 2 ? 'üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' :
                                '‚ùå –ù–µ –ø—Ä–∏—à–µ–ª';
        console.log(`   üìå –°—Ç–∞—Ç—É—Å: ${attendanceStatus}`);
        
        if (visit.comment) {
          console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${visit.comment}`);
        }
        
        console.log('---');
      });
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if (goods_transactions.length > 0) {
      console.log('\nüõç –ò–°–¢–û–†–ò–Ø –ü–û–ö–£–ü–û–ö –¢–û–í–ê–†–û–í:\n');
      
      goods_transactions.forEach((transaction, index) => {
        console.log(`${index + 1}. ${new Date(transaction.date).toLocaleString('ru-RU')}`);
        console.log(`   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${transaction.staff?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üì¶ –¢–æ–≤–∞—Ä—ã:`);
        
        transaction.goods.forEach(item => {
          const statusEmoji = item.payment_status === 'paid_full' ? '‚úÖ' : '‚ùå';
          console.log(`      ${statusEmoji} ${item.title} - ${item.amount} ${item.unit} √ó ${item.cost_per_unit}‚ÇΩ = ${item.cost_to_pay}‚ÇΩ`);
        });
        
        if (transaction.comment) {
          console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${transaction.comment}`);
        }
        
        console.log('---');
      });
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (result.meta?.dateCursor) {
      console.log('\nüìÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º:');
      const cursor = result.meta.dateCursor;
      
      if (cursor.previous) {
        console.log(`   ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${cursor.previous.from} - ${cursor.previous.to} (${cursor.previous.count} –∑–∞–ø–∏—Å–µ–π)`);
      }
      if (cursor.next) {
        console.log(`   ‚Üí –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥: ${cursor.next.from} - ${cursor.next.to} (${cursor.next.count} –∑–∞–ø–∏—Å–µ–π)`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response?.data) {
      console.error('–î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});