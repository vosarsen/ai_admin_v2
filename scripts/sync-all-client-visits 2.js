#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –í–°–ï–• –∏—Å—Ç–æ—Ä–∏–π –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const { ClientRecordsSync } = require('../src/sync/client-records-sync');
const logger = require('../src/utils/logger');

async function syncAllVisits() {
  const startTime = Date.now();
  const recordsSync = new ClientRecordsSync();
  
  try {
    logger.info('üöÄ Starting COMPLETE visit history synchronization for ALL clients...');
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –≤–∏–∑–∏—Ç–æ–º
    const { data: clients, error } = await supabase
      .from('clients')
      .select('id, yclients_id, phone, name, visit_count')
      .gte('visit_count', 1)
      .order('visit_count', { ascending: false });
    
    if (error) throw error;
    
    logger.info(`üìä Found ${clients.length} clients with visits to sync`);
    
    let processed = 0;
    let errors = 0;
    let skipped = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for (const client of clients) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç YClients ID –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (!client.yclients_id || !client.phone) {
          skipped++;
          continue;
        }
        
        logger.debug(`Processing ${client.name} (${client.phone}) - ${client.visit_count} visits`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ YClients
        const records = await recordsSync.getClientRecords(client.yclients_id, client.phone);
        
        if (records && records.length > 0) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
          await recordsSync.saveClientVisits(client.id, client.yclients_id, records);
          processed++;
          
          if (processed % 10 === 0) {
            logger.info(`‚úÖ Progress: ${processed}/${clients.length} clients synced`);
          }
        } else {
          logger.debug(`No records found for ${client.name}`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API (200ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        errors++;
        logger.error(`Failed to sync ${client.name}: ${error.message}`);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        continue;
      }
    }
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    
    logger.info('');
    logger.info('üéâ SYNCHRONIZATION COMPLETE!');
    logger.info('=============================');
    logger.info(`‚úÖ Successfully synced: ${processed} clients`);
    logger.info(`‚è≠Ô∏è  Skipped (no data): ${skipped} clients`);
    logger.info(`‚ùå Errors: ${errors} clients`);
    logger.info(`‚è±Ô∏è  Total time: ${duration} seconds (${Math.round(duration/60)} minutes)`);
    logger.info('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: check } = await supabase
      .from('clients')
      .select('id')
      .gte('visit_count', 1)
      .not('visit_history', 'eq', '[]');
    
    logger.info(`üìà Final check: ${check?.length || 0} clients now have visit history`);
    
    process.exit(0);
    
  } catch (error) {
    logger.error('Fatal error:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
syncAllVisits();