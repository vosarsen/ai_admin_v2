#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const logger = require('../src/utils/logger').child({ module: 'fix-staff-declensions' });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
function generateSimpleDeclensions(staffName) {
  const name = staffName.trim();
  
  // –ù–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ –∏–º–µ–Ω–∞ (–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ -–∏, -–æ, -–µ, -—É –∏ –≤–æ—Å—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞)
  const indeclinable = ['–ê–ª–∏', '–ë–∞—Ä–∏', '–†–∞–º–∏', '–ù—É—Ä–∏', '–ê—Ä–∏'];
  if (indeclinable.includes(name) || /[–∏–æ–µ—É—é—ç]$/i.test(name)) {
    return {
      original: name,
      nominative: name,
      genitive: name,
      dative: name,
      accusative: name,
      instrumental: name,
      prepositional: name,
      prepositional_u: `—É ${name}`
    };
  }
  
  // –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -–∞
  if (/–∞$/i.test(name)) {
    const stem = name.slice(0, -1);
    return {
      original: name,
      nominative: name,
      genitive: stem + '—ã',
      dative: stem + '–µ',
      accusative: stem + '—É',
      instrumental: stem + '–æ–π',
      prepositional: stem + '–µ',
      prepositional_u: `—É ${stem + '—ã'}`
    };
  }
  
  // –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -—è (–Ω–µ –ø–æ—Å–ª–µ —à–∏–ø—è—â–∏—Ö)
  if (/—è$/i.test(name) && !/[–∂—à—á—â]—è$/i.test(name)) {
    const stem = name.slice(0, -1);
    return {
      original: name,
      nominative: name,
      genitive: stem + '–∏',
      dative: stem + '–µ',
      accusative: stem + '—é',
      instrumental: stem + '–µ–π',
      prepositional: stem + '–µ',
      prepositional_u: `—É ${stem + '–∏'}`
    };
  }
  
  // –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é
  if (/[–±–≤–≥–¥–∂–∑–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]$/i.test(name)) {
    return {
      original: name,
      nominative: name,
      genitive: name + '–∞',
      dative: name + '—É',
      accusative: name + '–∞',
      instrumental: name + '–æ–º',
      prepositional: name + '–µ',
      prepositional_u: `—É ${name + '–∞'}`
    };
  }
  
  // –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -–π
  if (/–π$/i.test(name)) {
    const stem = name.slice(0, -1);
    return {
      original: name,
      nominative: name,
      genitive: stem + '—è',
      dative: stem + '—é',
      accusative: stem + '—è',
      instrumental: stem + '–µ–º',
      prepositional: stem + '–µ',
      prepositional_u: `—É ${stem + '—è'}`
    };
  }
  
  // –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -—å
  if (/—å$/i.test(name)) {
    const stem = name.slice(0, -1);
    return {
      original: name,
      nominative: name,
      genitive: stem + '—è',
      dative: stem + '—é',
      accusative: stem + '—è',
      instrumental: stem + '–µ–º',
      prepositional: stem + '–µ',
      prepositional_u: `—É ${stem + '—è'}`
    };
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º–æ–µ
  return {
    original: name,
    nominative: name,
    genitive: name,
    dative: name,
    accusative: name,
    instrumental: name,
    prepositional: name,
    prepositional_u: `—É ${name}`
  };
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–º–µ–Ω
const specialDeclensions = {
  '–°–µ—Ä–≥–µ–π': {
    original: '–°–µ—Ä–≥–µ–π',
    nominative: '–°–µ—Ä–≥–µ–π',
    genitive: '–°–µ—Ä–≥–µ—è',
    dative: '–°–µ—Ä–≥–µ—é',
    accusative: '–°–µ—Ä–≥–µ—è',
    instrumental: '–°–µ—Ä–≥–µ–µ–º',
    prepositional: '–°–µ—Ä–≥–µ–µ',
    prepositional_u: '—É –°–µ—Ä–≥–µ—è'
  },
  '–ê–ª–µ–∫—Å–µ–π': {
    original: '–ê–ª–µ–∫—Å–µ–π',
    nominative: '–ê–ª–µ–∫—Å–µ–π',
    genitive: '–ê–ª–µ–∫—Å–µ—è',
    dative: '–ê–ª–µ–∫—Å–µ—é',
    accusative: '–ê–ª–µ–∫—Å–µ—è',
    instrumental: '–ê–ª–µ–∫—Å–µ–µ–º',
    prepositional: '–ê–ª–µ–∫—Å–µ–µ',
    prepositional_u: '—É –ê–ª–µ–∫—Å–µ—è'
  },
  '–î–∞—Ä—å—è': {
    original: '–î–∞—Ä—å—è',
    nominative: '–î–∞—Ä—å—è',
    genitive: '–î–∞—Ä—å–∏',
    dative: '–î–∞—Ä—å–µ',
    accusative: '–î–∞—Ä—å—é',
    instrumental: '–î–∞—Ä—å–µ–π',
    prepositional: '–î–∞—Ä—å–µ',
    prepositional_u: '—É –î–∞—Ä—å–∏'
  },
  '–ò–ª—å—è': {
    original: '–ò–ª—å—è',
    nominative: '–ò–ª—å—è',
    genitive: '–ò–ª—å–∏',
    dative: '–ò–ª—å–µ',
    accusative: '–ò–ª—å—é',
    instrumental: '–ò–ª—å—ë–π',
    prepositional: '–ò–ª—å–µ',
    prepositional_u: '—É –ò–ª—å–∏'
  }
};

async function main() {
  try {
    logger.info('üöÄ Starting quick staff declensions fix...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    const { data: staff, error } = await supabase
      .from('staff')
      .select('id, yclients_id, name')
      .eq('company_id', 962302);
    
    if (error) {
      throw error;
    }
    
    if (!staff || staff.length === 0) {
      logger.info('No staff found');
      return;
    }
    
    logger.info(`üìã Found ${staff.length} staff members`);
    
    let updated = 0;
    let errors = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    for (const member of staff) {
      if (!member.name) continue;
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const declensions = specialDeclensions[member.name] || generateSimpleDeclensions(member.name);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const { error: updateError } = await supabase
          .from('staff')
          .update({ declensions })
          .eq('id', member.id);
        
        if (updateError) {
          logger.error(`Failed to update staff ${member.id}:`, updateError);
          errors++;
        } else {
          updated++;
          logger.info(`‚úÖ Updated: "${member.name}"`);
          console.log(`  –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π: ${declensions.genitive}`);
          console.log(`  –£ –∫–æ–≥–æ: ${declensions.prepositional_u}`);
        }
        
      } catch (error) {
        logger.error(`Error processing staff ${member.id}:`, error);
        errors++;
      }
    }
    
    logger.info(`‚úÖ Completed: ${updated} updated, ${errors} errors`);
    
  } catch (error) {
    logger.error('‚ùå Failed:', error);
    process.exit(1);
  }
}

main();