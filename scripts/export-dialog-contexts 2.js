#!/usr/bin/env node
// scripts/export-dialog-contexts.js
// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ dialog_contexts –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const fs = require('fs').promises;
const path = require('path');

async function exportDialogContexts() {
  console.log('üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ dialog_contexts...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤
    const { data: contexts, error } = await supabase
      .from('dialog_contexts')
      .select(`
        id,
        user_id,
        messages,
        state,
        data,
        last_activity,
        last_booking_id,
        created_at,
        updated_at,
        company_id,
        message_count,
        context_metadata
      `)
      .order('updated_at', { ascending: false });
    
    if (error) throw error;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${contexts.length} –¥–∏–∞–ª–æ–≥–æ–≤\n`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportDir = path.join(__dirname, '../test-data/dialog-contexts');
    await fs.mkdir(exportDir, { recursive: true });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      exportDate: new Date().toISOString(),
      totalDialogs: contexts.length,
      totalMessages: 0,
      dialogsWithBookings: 0,
      actionsUsed: {},
      avgMessagesPerDialog: 0,
      avgProcessingTime: 0,
      dialogsByCompany: {}
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const processedDialogs = [];
    
    for (const context of contexts) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ user_id (—Ñ–æ—Ä–º–∞—Ç: 79001234567@c.us)
      const phone = context.user_id.replace('@c.us', '');
      
      // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
      let messages = [];
      try {
        messages = context.messages || [];
      } catch (e) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${phone}`);
        continue;
      }
      
      if (messages.length === 0) continue;
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
      const dialogInfo = {
        phone,
        companyId: context.company_id,
        messagesCount: messages.length,
        hasBooking: !!context.last_booking_id,
        lastActivity: context.last_activity,
        createdAt: context.created_at,
        updatedAt: context.updated_at,
        state: context.state,
        messages: messages.map(msg => ({
          timestamp: msg.timestamp,
          userMessage: msg.userMessage,
          aiResponse: msg.aiResponse,
          actions: msg.actions || [],
          processingTimeMs: msg.processingTime || msg.processingTimeMs || null,
          success: msg.success !== false
        }))
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      stats.totalMessages += messages.length;
      if (context.last_booking_id) stats.dialogsWithBookings++;
      
      // –°—á–∏—Ç–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      messages.forEach(msg => {
        if (msg.actions && Array.isArray(msg.actions)) {
          msg.actions.forEach(action => {
            const actionName = action.action || action.command || 'unknown';
            stats.actionsUsed[actionName] = (stats.actionsUsed[actionName] || 0) + 1;
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (msg.processingTimeMs) {
          stats.avgProcessingTime += msg.processingTimeMs;
        }
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
      const companyId = context.company_id || 'unknown';
      stats.dialogsByCompany[companyId] = (stats.dialogsByCompany[companyId] || 0) + 1;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
      const filename = `dialog_${phone.slice(-4)}_${messages.length}msg.json`;
      await fs.writeFile(
        path.join(exportDir, filename),
        JSON.stringify(dialogInfo, null, 2)
      );
      
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename} (${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
      processedDialogs.push(dialogInfo);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats.avgMessagesPerDialog = stats.totalDialogs > 0 
      ? Math.round(stats.totalMessages / stats.totalDialogs * 10) / 10 
      : 0;
    
    const totalProcessingTimeCount = processedDialogs.reduce((sum, d) => 
      sum + d.messages.filter(m => m.processingTimeMs).length, 0
    );
    
    if (totalProcessingTimeCount > 0) {
      stats.avgProcessingTime = Math.round(stats.avgProcessingTime / totalProcessingTimeCount);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
    await fs.writeFile(
      path.join(exportDir, 'all-dialogs.json'),
      JSON.stringify(processedDialogs, null, 2)
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await fs.writeFile(
      path.join(exportDir, 'statistics.json'),
      JSON.stringify(stats, null, 2)
    );
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log(`- –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${stats.totalDialogs}`);
    console.log(`- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}`);
    console.log(`- –î–∏–∞–ª–æ–≥–æ–≤ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º: ${stats.dialogsWithBookings}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ª–æ–≥: ${stats.avgMessagesPerDialog}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${stats.avgProcessingTime}ms`);
    
    console.log('\nüéØ –¢–æ–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:');
    const sortedActions = Object.entries(stats.actionsUsed)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);
    
    sortedActions.forEach(([action, count]) => {
      console.log(`  - ${action}: ${count}`);
    });
    
    console.log('\nüè¢ –î–∏–∞–ª–æ–≥–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º:');
    Object.entries(stats.dialogsByCompany).forEach(([companyId, count]) => {
      console.log(`  - –ö–æ–º–ø–∞–Ω–∏—è ${companyId}: ${count} –¥–∏–∞–ª–æ–≥–æ–≤`);
    });
    
    console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${exportDir}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  exportDialogContexts();
}

module.exports = { exportDialogContexts };