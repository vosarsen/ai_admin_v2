#!/usr/bin/env node

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª—É–≥ –≤ –ë–î
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const axios = require('axios');
const logger = require('../src/utils/logger').child({ module: 'generate-declensions' });

async function generateDeclensions(serviceName) {
  const apiKey = process.env.DEEPSEEK_API_KEY;
  
  const prompt = `
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ "${serviceName}" –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "original": "${serviceName}",
  "nominative": "–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π",
  "genitive": "—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π",
  "dative": "–¥–∞—Ç–µ–ª—å–Ω—ã–π",
  "accusative": "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π",
  "instrumental": "—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π",
  "prepositional": "–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π",
  "prepositional_na": "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –ù–ê"
}

–ü—Ä–∏–º–µ—Ä—ã:
- "–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞" -> accusative: "–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É", prepositional_na: "–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É"
- "–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º" -> accusative: "–º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º", prepositional_na: "–º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"

–í–∞–∂–Ω–æ: prepositional_na - —ç—Ç–æ –í–ò–ù–ò–¢–ï–õ–¨–ù–´–ô –ø–∞–¥–µ–∂ –¥–ª—è –ø—Ä–µ–¥–ª–æ–≥–∞ "–Ω–∞" (–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ù–ê —á—Ç–æ?)
`;

  try {
    const response = await axios.post('https://api.deepseek.com/chat/completions', {
      model: 'deepseek-chat',
      messages: [
        { role: 'system', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 500
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    const aiResponse = response.data.choices[0].message.content;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
    const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
  } catch (error) {
    logger.error(`Failed to generate declensions for "${serviceName}":`, error.message);
  }
  
  // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  return {
    original: serviceName,
    nominative: serviceName,
    genitive: serviceName,
    dative: serviceName,
    accusative: serviceName,
    instrumental: serviceName,
    prepositional: serviceName,
    prepositional_na: serviceName
  };
}

async function main() {
  try {
    logger.info('üöÄ Starting declension generation for existing services...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
    const { data: services, error } = await supabase
      .from('services')
      .select('id, yclients_id, title, declensions')
      .is('declensions', null)
      .eq('company_id', process.env.YCLIENTS_COMPANY_ID || 962302);
    
    if (error) {
      throw error;
    }
    
    if (!services || services.length === 0) {
      logger.info('No services without declensions found');
      return;
    }
    
    logger.info(`üìã Found ${services.length} services without declensions`);
    
    let processed = 0;
    let errors = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —É—Å–ª—É–≥–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (const service of services) {
      if (!service.title) continue;
      
      logger.info(`Processing: "${service.title}"`);
      
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è
        const declensions = await generateDeclensions(service.title);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const { error: updateError } = await supabase
          .from('services')
          .update({ declensions })
          .eq('id', service.id);
        
        if (updateError) {
          logger.error(`Failed to update service ${service.id}:`, updateError);
          errors++;
        } else {
          processed++;
          logger.info(`‚úÖ Updated: "${service.title}"`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          console.log(`  –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π: ${declensions.accusative}`);
          console.log(`  –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π —Å –ù–ê: ${declensions.prepositional_na}`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ AI
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        logger.error(`Error processing service ${service.id}:`, error);
        errors++;
      }
    }
    
    logger.info(`‚úÖ Completed: ${processed} processed, ${errors} errors`);
    
  } catch (error) {
    logger.error('‚ùå Failed:', error);
    process.exit(1);
  }
}

main();