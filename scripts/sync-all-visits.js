#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∏–∑–∏—Ç–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/sync-all-visits.js              # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏
 *   node scripts/sync-all-visits.js --dry-run    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
 *   node scripts/sync-all-visits.js --limit 10   # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10 –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

require('dotenv').config();
const { UniversalYclientsSync } = require('./universal-yclients-sync');

async function main() {
  const args = process.argv.slice(2);
  const dryRun = args.includes('--dry-run');
  const limitIndex = args.indexOf('--limit');
  const limit = limitIndex !== -1 && args[limitIndex + 1] ? parseInt(args[limitIndex + 1]) : null;
  
  console.log('üîÑ Full Client & Visit History Synchronization');
  console.log('=' .repeat(60));
  
  if (dryRun) {
    console.log('üìã DRY RUN MODE - No data will be synced\n');
  }
  
  if (limit) {
    console.log(`üìä LIMITED MODE - Will sync only ${limit} clients\n`);
  }
  
  // –í–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
  process.env.SYNC_CLIENT_VISITS = 'true';
  
  const sync = new UniversalYclientsSync();
  
  try {
    if (dryRun) {
      // –í —Ä–µ–∂–∏–º–µ dry-run —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const { supabase } = require('../src/database/supabase');
      
      const { count: totalClients } = await supabase
        .from('clients')
        .select('*', { count: 'exact', head: true })
        .eq('company_id', 962302);
      
      const { data: clientsWithVisits } = await supabase
        .from('clients')
        .select('visit_count')
        .eq('company_id', 962302)
        .gt('visit_count', 0);
      
      const clientsNeedingSync = clientsWithVisits?.length || 0;
      const totalVisits = clientsWithVisits?.reduce((sum, c) => sum + (c.visit_count || 0), 0) || 0;
      
      console.log('üìä Current database statistics:');
      console.log(`   Total clients: ${totalClients || 0}`);
      console.log(`   Clients with visits: ${clientsNeedingSync}`);
      console.log(`   Total visits to sync: ~${totalVisits}`);
      console.log(`\n‚ö†Ô∏è  Estimated API calls: ${clientsNeedingSync + Math.ceil(clientsNeedingSync / 200) * 5}`);
      console.log(`   (${Math.ceil(clientsNeedingSync / 200)} pages + ${clientsNeedingSync} visit history requests)`);
      
      const estimatedTime = Math.round((clientsNeedingSync * 0.5) / 60); // ~0.5 sec per client
      console.log(`\n‚è±Ô∏è  Estimated time: ~${estimatedTime} minutes`);
      
      console.log('\nüí° To run the actual sync, remove --dry-run flag');
      
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      console.log('‚ö†Ô∏è  WARNING: This will sync ALL clients with their visit history!');
      console.log('   This may take a long time and use many API calls.');
      console.log('   Press Ctrl+C within 5 seconds to cancel...\n');
      
      // –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω–∏—Ç—å
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      console.log('üöÄ Starting synchronization...\n');
      
      if (limit) {
        // –í –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
        const { supabase } = require('../src/database/supabase');
        const { ClientRecordsSync } = require('../src/sync/client-records-sync');
        const recordsSync = new ClientRecordsSync();
        
        const { data: clients } = await supabase
          .from('clients')
          .select('id, yclients_id, phone, name, visit_count')
          .eq('company_id', 962302)
          .gt('visit_count', 0)
          .limit(limit);
        
        console.log(`üìã Found ${clients?.length || 0} clients to sync (limited to ${limit})\n`);
        
        let synced = 0;
        for (const client of clients || []) {
          try {
            console.log(`${synced + 1}/${limit}: Syncing ${client.name}...`);
            const records = await recordsSync.getClientRecords(client.yclients_id, client.phone);
            
            if (records && records.length > 0) {
              await recordsSync.saveClientVisits(client.id, client.yclients_id, records);
              console.log(`   ‚úÖ Synced ${records.length} visits`);
            } else {
              console.log(`   ‚è≠Ô∏è  No visits found`);
            }
            
            synced++;
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limits
            await new Promise(resolve => setTimeout(resolve, 300));
            
          } catch (error) {
            console.error(`   ‚ùå Error: ${error.message}`);
          }
        }
        
        console.log(`\n‚úÖ Limited sync completed: ${synced}/${limit} clients processed`);
        
      } else {
        // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ universal sync
        const result = await sync.syncClients();
        
        console.log('\nüéâ Full synchronization completed!');
        console.log(`   Total clients: ${result.total}`);
        console.log(`   Processed: ${result.processed}`);
        console.log(`   Visit history synced: ${result.visitsProcessed || 0}`);
        console.log(`   Errors: ${result.errors}`);
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå Sync failed:', error.message);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è  Sync interrupted by user');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main().catch(console.error);