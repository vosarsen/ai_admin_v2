#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Redis –∫–ª—é—á–µ–π
 * - –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç preferences/prefs –Ω–∞ –µ–¥–∏–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
 * - –û—á–∏—â–∞–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏
 * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ TTL
 */

const Redis = require('ioredis');
const logger = require('../src/utils/logger');

const redis = new Redis({
  port: 6380,
  host: 'localhost',
  password: process.env.REDIS_PASSWORD || '70GB32AhHvMisfK8LtluTbtkWTnTj5jSrOdQj7d1QMg=',
  db: 0
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TTL (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const TTL_CONFIG = {
  preferences: 90 * 24 * 3600,  // 90 –¥–Ω–µ–π
  dialog: 24 * 3600,             // 24 —á–∞—Å–∞
  client: 7 * 24 * 3600,         // 7 –¥–Ω–µ–π
  messages: 30 * 24 * 3600,      // 30 –¥–Ω–µ–π
  booking: 365 * 24 * 3600,      // 365 –¥–Ω–µ–π
  reminder_context: 24 * 3600    // 24 —á–∞—Å–∞
};

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç E.164 –±–µ–∑ +
 * –ü—Ä–∏–º–µ—Ä—ã:
 * +79001234567 -> 79001234567
 * 89001234567 -> 79001234567
 * 9001234567 -> 79001234567
 */
function normalizePhone(phone) {
  if (!phone) return null;
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
  const cleaned = phone.replace(/\D/g, '');
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (cleaned.startsWith('8') && cleaned.length === 11) {
    return '7' + cleaned.slice(1);
  }
  
  // –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
  if (cleaned.length === 10) {
    return '7' + cleaned;
  }
  
  return cleaned;
}

async function migrateKeys() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Redis –∫–ª—é—á–µ–π...\n');
  
  const stats = {
    migrated: 0,
    deleted: 0,
    ttlUpdated: 0,
    errors: 0
  };
  
  const allKeys = await redis.keys('*');
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allKeys.length} –∫–ª—é—á–µ–π\n`);
  
  // 1. –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏ —Å [object Object]
  console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏...');
  const junkKeys = allKeys.filter(k => k.includes('[object Object]'));
  for (const key of junkKeys) {
    try {
      await redis.del(key);
      console.log(`  ‚ùå –£–¥–∞–ª—ë–Ω: ${key}`);
      stats.deleted++;
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key}:`, error.message);
      stats.errors++;
    }
  }
  
  // 2. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
  const testKeys = allKeys.filter(k => k.startsWith('test:') || k.includes('test-queue'));
  for (const key of testKeys) {
    try {
      await redis.del(key);
      console.log(`  ‚ùå –£–¥–∞–ª—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π: ${key}`);
      stats.deleted++;
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key}:`, error.message);
      stats.errors++;
    }
  }
  
  // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º prefs –Ω–∞ preferences
  console.log('\nüì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º prefs -> preferences...');
  const prefsKeys = allKeys.filter(k => k.startsWith('prefs:'));
  
  for (const oldKey of prefsKeys) {
    try {
      // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á: prefs:962302:79001234567
      const parts = oldKey.split(':');
      if (parts.length !== 3) continue;
      
      const [, companyId, phone] = parts;
      const normalizedPhone = normalizePhone(phone);
      
      if (!normalizedPhone) {
        console.log(`  ‚ö†Ô∏è  –ù–µ –º–æ–≥—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
        continue;
      }
      
      // –ù–æ–≤—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ E.164 –±–µ–∑ +
      const newKey = `preferences:${companyId}:${normalizedPhone}`;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const value = await redis.get(oldKey);
      const ttl = await redis.ttl(oldKey);
      
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const existingValue = await redis.get(newKey);
      if (existingValue) {
        console.log(`  ‚ö†Ô∏è  –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${newKey}`);
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
        await redis.del(oldKey);
        stats.deleted++;
      } else {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º TTL
        const finalTtl = ttl > 0 ? Math.min(ttl, TTL_CONFIG.preferences) : TTL_CONFIG.preferences;
        await redis.setex(newKey, finalTtl, value);
        await redis.del(oldKey);
        console.log(`  ‚úÖ ${oldKey} -> ${newKey}`);
        stats.migrated++;
      }
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${oldKey}:`, error.message);
      stats.errors++;
    }
  }
  
  // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ preferences —Å + –≤ –Ω–æ–º–µ—Ä–µ
  console.log('\nüì± –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ –≤ preferences...');
  const oldPrefsKeys = allKeys.filter(k => k.startsWith('preferences:') && k.includes('+'));
  
  for (const oldKey of oldPrefsKeys) {
    try {
      const parts = oldKey.split(':');
      if (parts.length !== 3) continue;
      
      const [, companyId, phone] = parts;
      const normalizedPhone = normalizePhone(phone);
      
      if (!normalizedPhone) {
        console.log(`  ‚ö†Ô∏è  –ù–µ –º–æ–≥—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: ${phone}`);
        continue;
      }
      
      const newKey = `preferences:${companyId}:${normalizedPhone}`;
      
      if (oldKey === newKey) continue; // –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
      
      const value = await redis.get(oldKey);
      const ttl = await redis.ttl(oldKey);
      
      const existingValue = await redis.get(newKey);
      if (existingValue) {
        console.log(`  ‚ö†Ô∏è  –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${newKey}`);
        await redis.del(oldKey);
        stats.deleted++;
      } else {
        const finalTtl = ttl > 0 ? Math.min(ttl, TTL_CONFIG.preferences) : TTL_CONFIG.preferences;
        await redis.setex(newKey, finalTtl, value);
        await redis.del(oldKey);
        console.log(`  ‚úÖ ${oldKey} -> ${newKey}`);
        stats.migrated++;
      }
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ${oldKey}:`, error.message);
      stats.errors++;
    }
  }
  
  // 5. –û–±–Ω–æ–≤–ª—è–µ–º TTL –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª—é—á–µ–π
  console.log('\n‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º TTL...');
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const currentKeys = await redis.keys('*');
  
  for (const key of currentKeys) {
    try {
      const ttl = await redis.ttl(key);
      let newTtl = null;
      
      if (key.startsWith('preferences:')) {
        if (ttl === -1 || ttl > TTL_CONFIG.preferences) {
          newTtl = TTL_CONFIG.preferences;
        }
      } else if (key.startsWith('dialog:')) {
        if (ttl === -1 || ttl < 3600) { // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
          newTtl = TTL_CONFIG.dialog;
        }
      } else if (key.startsWith('client:')) {
        if (ttl === -1 || ttl < TTL_CONFIG.client) {
          newTtl = TTL_CONFIG.client;
        }
      } else if (key.startsWith('messages:')) {
        if (ttl === -1 || ttl < TTL_CONFIG.messages) {
          newTtl = TTL_CONFIG.messages;
        }
      } else if (key.startsWith('booking:owner:')) {
        if (ttl === -1) {
          newTtl = TTL_CONFIG.booking;
        }
      } else if (key.startsWith('reminder_context:')) {
        if (ttl === -1) {
          newTtl = TTL_CONFIG.reminder_context;
        }
      }
      
      if (newTtl) {
        await redis.expire(key, newTtl);
        console.log(`  ‚è∞ TTL –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è ${key}: ${Math.floor(newTtl / 86400)} –¥–Ω–µ–π`);
        stats.ttlUpdated++;
      }
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TTL –¥–ª—è ${key}:`, error.message);
      stats.errors++;
    }
  }
  
  // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${stats.migrated}`);
  console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –º—É—Å–æ—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π: ${stats.deleted}`);
  console.log(`‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ TTL: ${stats.ttlUpdated}`);
  if (stats.errors > 0) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–æ–∫: ${stats.errors}`);
  }
  
  // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const finalKeys = await redis.keys('*');
  const problemKeys = finalKeys.filter(k => 
    k.includes('[object Object]') || 
    k.startsWith('prefs:') ||
    k.includes('+7')
  );
  
  if (problemKeys.length > 0) {
    console.log('\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–∏:');
    problemKeys.forEach(k => console.log(`  - ${k}`));
  } else {
    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  }
  
  await redis.quit();
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
migrateKeys().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});