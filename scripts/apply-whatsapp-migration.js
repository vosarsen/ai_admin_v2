#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è WhatsApp –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É companies
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

console.log(chalk.blue.bold('\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ WhatsApp –∫–æ–ª–æ–Ω–æ–∫\n'));

async function checkExistingColumns() {
  console.log(chalk.cyan('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...'));

  try {
    // –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    const { data, error } = await supabase
      .from('companies')
      .select('id, whatsapp_connected, whatsapp_phone, integration_status')
      .limit(1);

    if (error) {
      if (error.message.includes('column') && error.message.includes('does not exist')) {
        console.log(chalk.yellow('‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∏ WhatsApp –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'));
        return false;
      }
      throw error;
    }

    console.log(chalk.green('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ WhatsApp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'));
    return true;
  } catch (error) {
    if (error.message?.includes('does not exist')) {
      return false;
    }
    throw error;
  }
}

async function applyMigration() {
  console.log(chalk.cyan('\nüìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n'));

  // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
  const sqlPath = path.join(__dirname, 'database', 'add-whatsapp-columns.sql');
  const sqlContent = fs.readFileSync(sqlPath, 'utf8');

  console.log(chalk.yellow('SQL –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:'));
  console.log(chalk.gray('----------------------------------------'));
  console.log(chalk.gray(sqlContent.substring(0, 500) + '...'));
  console.log(chalk.gray('----------------------------------------\n'));

  console.log(chalk.red.bold('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ú–∏–≥—Ä–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é!\n'));

  console.log(chalk.yellow('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:\n'));
  console.log(chalk.white('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard:'));
  console.log(chalk.cyan('   https://supabase.com/dashboard/project/yazteodihdglhoxgqunp/sql\n'));

  console.log(chalk.white('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π SQL:'));
  console.log(chalk.gray('----------------------------------------'));
  console.log(chalk.green(`
-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
ALTER TABLE companies
ADD COLUMN IF NOT EXISTS whatsapp_connected BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS whatsapp_phone VARCHAR(20),
ADD COLUMN IF NOT EXISTS whatsapp_connected_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS integration_status VARCHAR(50) DEFAULT 'pending',
ADD COLUMN IF NOT EXISTS connected_at TIMESTAMPTZ;

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_companies_whatsapp_connected
ON companies(whatsapp_connected)
WHERE whatsapp_connected = true;

CREATE INDEX IF NOT EXISTS idx_companies_whatsapp_phone
ON companies(whatsapp_phone)
WHERE whatsapp_phone IS NOT NULL;
  `));
  console.log(chalk.gray('----------------------------------------\n'));

  console.log(chalk.white('3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Run" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n'));

  console.log(chalk.yellow('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —á–µ—Ä–µ–∑ API (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ):'));
  console.log(chalk.cyan('   –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n'));
}

async function testNewColumns() {
  console.log(chalk.cyan('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...\n'));

  try {
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { data, error } = await supabase
      .from('companies')
      .update({
        whatsapp_connected: false,
        whatsapp_phone: null,
        integration_status: 'pending'
      })
      .eq('id', 1)
      .select();

    if (error) {
      console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:'), error.message);
      return false;
    }

    console.log(chalk.green('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç!'));
    return true;
  } catch (error) {
    console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
    return false;
  }
}

async function showCurrentSchema() {
  console.log(chalk.cyan('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã companies:\n'));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('companies')
      .select('*')
      .limit(1);

    if (error) throw error;

    if (data && data.length > 0) {
      const columns = Object.keys(data[0]);
      console.log(chalk.white('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:'));
      columns.forEach(col => {
        const value = data[0][col];
        const type = value === null ? 'NULL' : typeof value;
        console.log(chalk.gray(`  - ${col}: ${type}`));
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WhatsApp –∫–æ–ª–æ–Ω–æ–∫
      const whatsappColumns = [
        'whatsapp_connected',
        'whatsapp_phone',
        'whatsapp_connected_at',
        'integration_status',
        'connected_at'
      ];

      console.log(chalk.cyan('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WhatsApp –∫–æ–ª–æ–Ω–æ–∫:'));
      whatsappColumns.forEach(col => {
        if (columns.includes(col)) {
          console.log(chalk.green(`  ‚úÖ ${col} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`));
        } else {
          console.log(chalk.red(`  ‚ùå ${col} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`));
        }
      });
    }
  } catch (error) {
    console.log(chalk.red('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã:'), error.message);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
    await showCurrentSchema();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    const columnsExist = await checkExistingColumns();

    if (columnsExist) {
      console.log(chalk.green.bold('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!\n'));

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
      await testNewColumns();
    } else {
      console.log(chalk.yellow.bold('\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é!\n'));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      await applyMigration();
    }

    console.log(chalk.blue.bold('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'));

  } catch (error) {
    console.error(chalk.red.bold('\n‚ùå –û—à–∏–±–∫–∞:'), error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();