#!/usr/bin/env node

/**
 * –ë–´–°–¢–†–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
 * –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 5-10 —Ä–∞–∑
 */

require('dotenv').config();
const VisitsSync = require('../src/sync/visits-sync');
const logger = require('../src/utils/logger').child({ module: 'sync-visits-fast' });
const { supabase } = require('../src/database/supabase');

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
class FastVisitsSync extends VisitsSync {
  constructor() {
    super();
    this.PARALLEL_WORKERS = 10; // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    this.BATCH_SIZE = 100; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
    this.activeWorkers = 0;
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
   */
  async syncAllFast(options = {}) {
    const startTime = Date.now();
    const { 
      limit = null,
      skipProcessed = true // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    } = options;
    
    try {
      logger.info('üöÄ Starting FAST visits synchronization...');
      
      // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      let processedClientIds = new Set();
      if (skipProcessed) {
        const { data: processed } = await supabase
          .from('visits')
          .select('client_id')
          .not('client_id', 'is', null);
        
        processedClientIds = new Set(processed?.map(v => v.client_id));
        logger.info(`Skipping ${processedClientIds.size} already processed clients`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      let query = supabase
        .from('clients')
        .select('id, yclients_id, phone, name, visit_count')
        .eq('company_id', this.config.COMPANY_ID)
        .gt('visit_count', 0)
        .order('visit_count', { ascending: false });
      
      if (limit) {
        query = query.limit(limit);
      }
      
      const { data: allClients } = await query;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      const clients = allClients?.filter(c => !processedClientIds.has(c.id)) || [];
      
      if (clients.length === 0) {
        logger.warn('No clients to process');
        return { 
          success: true, 
          clientsProcessed: 0, 
          visitsProcessed: 0,
          duration: Date.now() - startTime 
        };
      }

      logger.info(`üìã Found ${clients.length} clients to sync (${allClients?.length} total, ${processedClientIds.size} already done)`);
      
      let totalVisitsProcessed = 0;
      let totalErrors = 0;
      let clientsProcessed = 0;
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const chunks = [];
      for (let i = 0; i < clients.length; i += this.PARALLEL_WORKERS) {
        chunks.push(clients.slice(i, i + this.PARALLEL_WORKERS));
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏
      for (const chunk of chunks) {
        const promises = chunk.map(client => this.syncClientVisitsFast(client));
        const results = await Promise.allSettled(promises);
        
        results.forEach((result, index) => {
          if (result.status === 'fulfilled') {
            totalVisitsProcessed += result.value.visitsProcessed;
            totalErrors += result.value.errors;
            clientsProcessed++;
          } else {
            logger.error(`Failed to sync client ${chunk[index].name}:`, result.reason);
            totalErrors++;
          }
        });
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        logger.info(`Progress: ${clientsProcessed}/${clients.length} clients, ${totalVisitsProcessed} visits (${Math.round(clientsProcessed/clients.length*100)}%)`);
      }
      
      const duration = Date.now() - startTime;
      
      logger.info(`‚úÖ FAST sync completed in ${Math.round(duration/1000)} seconds`, {
        clientsProcessed,
        visitsProcessed: totalVisitsProcessed,
        errors: totalErrors,
        speed: Math.round(totalVisitsProcessed / (duration/1000)) + ' visits/sec'
      });

      return {
        success: true,
        clientsProcessed,
        visitsProcessed: totalVisitsProcessed,
        errors: totalErrors,
        duration
      };

    } catch (error) {
      logger.error('‚ùå Fast sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)
   */
  async syncClientVisitsFast(client) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ /records (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º visits/search)
      const visits = await this.fetchClientRecords(client.yclients_id, client.phone);
      
      if (!visits || visits.length === 0) {
        return { visitsProcessed: 0, errors: 0 };
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã –æ–¥–Ω–∏–º –±–æ–ª—å—à–∏–º –±–∞—Ç—á–µ–º
      const visitsWithClientId = visits.map(v => ({
        ...v,
        client_id: client.id
      }));
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
      const { error } = await supabase
        .from('visits')
        .upsert(visitsWithClientId, {
          onConflict: 'company_id,yclients_record_id',
          ignoreDuplicates: true
        });
      
      if (error) {
        logger.error(`Error saving visits for ${client.name}:`, error);
        return { visitsProcessed: 0, errors: visits.length };
      }
      
      return { visitsProcessed: visits.length, errors: 0 };
      
    } catch (error) {
      logger.error(`Error syncing visits for client ${client.name}:`, error.message);
      return { visitsProcessed: 0, errors: 1 };
    }
  }
}

async function main() {
  try {
    logger.info('üöÄ Starting FAST visits synchronization script...');
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const args = process.argv.slice(2);
    const options = {};
    
    for (let i = 0; i < args.length; i++) {
      switch (args[i]) {
        case '--limit':
        case '-l':
          options.limit = parseInt(args[++i]) || null;
          break;
        case '--no-skip':
          options.skipProcessed = false;
          break;
        case '--help':
        case '-h':
          console.log(`
–ë–´–°–¢–†–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/sync-visits-fast.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --limit, -l <—á–∏—Å–ª–æ>  –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
  --no-skip            –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  --help, -h           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (10 –ø–æ—Ç–æ–∫–æ–≤)
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤ 5-10 —Ä–∞–∑ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  ‚Ä¢ –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          `);
          process.exit(0);
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { count: currentVisits } = await supabase
      .from('visits')
      .select('*', { count: 'exact', head: true });
    
    const { data: processedClients } = await supabase
      .from('visits')
      .select('client_id')
      .not('client_id', 'is', null);
    
    const uniqueProcessed = new Set(processedClients?.map(v => v.client_id)).size;
    
    console.log('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  ‚Ä¢ –í–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ${currentVisits}`);
    console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${uniqueProcessed}`);
    console.log(`  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ~${1000 - uniqueProcessed} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const fastSync = new FastVisitsSync();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const result = await fastSync.syncAllFast(options);
    
    if (result.success) {
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const { count: finalVisits } = await supabase
        .from('visits')
        .select('*', { count: 'exact', head: true });
      
      console.log('\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${result.clientsProcessed}`);
      console.log(`  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–∑–∏—Ç–æ–≤: ${result.visitsProcessed}`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ${finalVisits}`);
      console.log(`  ‚Ä¢ –í—Ä–µ–º—è: ${Math.round(result.duration / 1000)} —Å–µ–∫—É–Ω–¥`);
      console.log(`  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ~${Math.round(result.visitsProcessed / (result.duration/1000))} –≤–∏–∑–∏—Ç–æ–≤/—Å–µ–∫`);
      
      if (result.errors > 0) {
        console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${result.errors}`);
      }
    } else {
      logger.error('‚ùå Synchronization failed:', result.error);
      process.exit(1);
    }
    
  } catch (error) {
    logger.error('‚ùå Fatal error:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main().then(() => {
  process.exit(0);
}).catch(error => {
  logger.error('Fatal error:', error);
  process.exit(1);
});