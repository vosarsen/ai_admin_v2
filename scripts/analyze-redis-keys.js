#!/usr/bin/env node

const Redis = require('ioredis');

const redis = new Redis({
  port: 6380,
  host: 'localhost',
  password: process.env.REDIS_PASSWORD || 'your_redis_password_here',
  db: 0
});

async function analyzeRedisKeys() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª—é—á–µ–π Redis...\n');
  
  const allKeys = await redis.keys('*');
  console.log(`üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${allKeys.length}\n`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  const patterns = {};
  const keyDetails = {};
  
  for (const key of allKeys) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∫–ª—é—á–∞
    const pattern = key.split(':').slice(0, 2).join(':');
    if (!patterns[pattern]) {
      patterns[pattern] = [];
    }
    patterns[pattern].push(key);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
    const type = await redis.type(key);
    const ttl = await redis.ttl(key);
    
    keyDetails[key] = {
      type,
      ttl: ttl === -1 ? 'no expiry' : `${ttl}s`,
      pattern
    };
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  console.log('üìÅ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:\n');
  const sortedPatterns = Object.entries(patterns)
    .sort(([,a], [,b]) => b.length - a.length);
  
  for (const [pattern, keys] of sortedPatterns) {
    console.log(`  ${pattern}: ${keys.length} –∫–ª—é—á–µ–π`);
  }
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
  console.log('\nüîé –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤:\n');
  
  // 1. –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤
  console.log('1Ô∏è‚É£ –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ (dialog:*)');
  const dialogKeys = allKeys.filter(k => k.startsWith('dialog:'));
  for (const key of dialogKeys.slice(0, 5)) {
    const type = await redis.type(key);
    const ttl = await redis.ttl(key);
    
    if (type === 'hash') {
      const data = await redis.hgetall(key);
      console.log(`  ${key}:`);
      console.log(`    TTL: ${ttl === -1 ? 'no expiry' : ttl + 's'}`);
      console.log(`    –ü–æ–ª—è: ${Object.keys(data).join(', ')}`);
      if (data.stage) console.log(`    Stage: ${data.stage}`);
      if (data.lastActivity) {
        const lastActivity = new Date(parseInt(data.lastActivity));
        console.log(`    Last Activity: ${lastActivity.toLocaleString()}`);
      }
    }
  }
  
  // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
  console.log('\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (preferences:* –∏ prefs:*)');
  const prefKeys = allKeys.filter(k => k.startsWith('preferences:') || k.startsWith('prefs:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${prefKeys.length} –∫–ª—é—á–µ–π`);
  for (const key of prefKeys.slice(0, 3)) {
    const value = await redis.get(key);
    const ttl = await redis.ttl(key);
    try {
      const data = JSON.parse(value);
      console.log(`  ${key}:`);
      console.log(`    TTL: ${ttl === -1 ? 'no expiry' : Math.floor(ttl / 86400) + ' –¥–Ω–µ–π'}`);
      console.log(`    –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2).split('\n').slice(0, 5).join('\n    ')}`);
    } catch (e) {
      console.log(`  ${key}: –Ω–µ JSON`);
    }
  }
  
  // 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
  console.log('\n3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö (client:*)');
  const clientKeys = allKeys.filter(k => k.startsWith('client:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${clientKeys.length} –∫–ª—é—á–µ–π`);
  for (const key of clientKeys.slice(0, 3)) {
    const value = await redis.get(key);
    const ttl = await redis.ttl(key);
    try {
      const data = JSON.parse(value);
      console.log(`  ${key}:`);
      console.log(`    TTL: ${ttl === -1 ? 'no expiry' : Math.floor(ttl / 3600) + ' —á–∞—Å–æ–≤'}`);
      console.log(`    ID –∫–ª–∏–µ–Ω—Ç–∞: ${data.id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`    –ò–º—è: ${data.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    } catch (e) {
      console.log(`  ${key}: –Ω–µ JSON`);
    }
  }
  
  // 4. –°–æ–æ–±—â–µ–Ω–∏—è
  console.log('\n4Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (messages:*)');
  const messageKeys = allKeys.filter(k => k.startsWith('messages:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${messageKeys.length} –∫–ª—é—á–µ–π`);
  for (const key of messageKeys.slice(0, 3)) {
    const length = await redis.llen(key);
    const ttl = await redis.ttl(key);
    console.log(`  ${key}:`);
    console.log(`    –¢–∏–ø: list`);
    console.log(`    –î–ª–∏–Ω–∞: ${length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`    TTL: ${ttl === -1 ? 'no expiry' : Math.floor(ttl / 3600) + ' —á–∞—Å–æ–≤'}`);
  }
  
  // 5. –ë—É–∫–∏–Ω–≥–∏
  console.log('\n5Ô∏è‚É£ –ë—É–∫–∏–Ω–≥–∏ (booking:*)');
  const bookingKeys = allKeys.filter(k => k.startsWith('booking:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${bookingKeys.length} –∫–ª—é—á–µ–π`);
  console.log(`  –í—Å–µ –±–µ–∑ TTL (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ)`);
  
  // 6. BullMQ –æ—á–µ—Ä–µ–¥–∏
  console.log('\n6Ô∏è‚É£ BullMQ –æ—á–µ—Ä–µ–¥–∏ (bull:*)');
  const bullKeys = allKeys.filter(k => k.startsWith('bull:'));
  const bullQueues = {};
  for (const key of bullKeys) {
    const parts = key.split(':');
    if (parts[1]) {
      const queueName = parts[1];
      if (!bullQueues[queueName]) {
        bullQueues[queueName] = 0;
      }
      bullQueues[queueName]++;
    }
  }
  console.log(`  –ù–∞–π–¥–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π:`);
  for (const [queue, count] of Object.entries(bullQueues)) {
    console.log(`    ${queue}: ${count} –∫–ª—é—á–µ–π`);
  }
  
  // 7. Rate limiting
  console.log('\n7Ô∏è‚É£ Rate limiting (rate:*)');
  const rateKeys = allKeys.filter(k => k.startsWith('rate:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${rateKeys.length} –∫–ª—é—á–µ–π`);
  for (const key of rateKeys.slice(0, 3)) {
    const ttl = await redis.ttl(key);
    const size = await redis.zcard(key);
    console.log(`  ${key}:`);
    console.log(`    –¢–∏–ø: zset`);
    console.log(`    –ó–∞–ø–∏—Å–µ–π: ${size}`);
    console.log(`    TTL: ${ttl === -1 ? 'no expiry' : Math.floor(ttl / 3600) + ' —á–∞—Å–æ–≤'}`);
  }
  
  // 8. Reminder contexts
  console.log('\n8Ô∏è‚É£ Reminder contexts (reminder_context:*)');
  const reminderKeys = allKeys.filter(k => k.startsWith('reminder_context:'));
  console.log(`  –ù–∞–π–¥–µ–Ω–æ: ${reminderKeys.length} –∫–ª—é—á–µ–π`);
  
  // –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (preferences vs prefs)
  const prefDuplicates = allKeys.filter(k => k.startsWith('preferences:')).length;
  const prefsDuplicates = allKeys.filter(k => k.startsWith('prefs:')).length;
  if (prefDuplicates > 0 && prefsDuplicates > 0) {
    console.log('  ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ "preferences:" –∏ "prefs:"');
    console.log(`     preferences: ${prefDuplicates}, prefs: ${prefsDuplicates}`);
    console.log('     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–∏ –±–µ–∑ TTL
  const noTtlKeys = allKeys.filter(k => keyDetails[k].ttl === 'no expiry' && !k.startsWith('bull:') && !k.startsWith('booking:'));
  if (noTtlKeys.length > 0) {
    console.log(`\n  ‚ö†Ô∏è  ${noTtlKeys.length} –∫–ª—é—á–µ–π –±–µ–∑ TTL (–∫—Ä–æ–º–µ bull –∏ booking):`);
    noTtlKeys.slice(0, 5).forEach(k => console.log(`     - ${k}`));
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const strangeKeys = allKeys.filter(k => k.includes('[object Object]'));
  if (strangeKeys.length > 0) {
    console.log(`\n  ‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ —Å [object Object]: ${strangeKeys.length}`);
    strangeKeys.forEach(k => console.log(`     - ${k}`));
  }
  
  console.log('\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n');
  console.log('  1. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–±–æ preferences, –ª–∏–±–æ prefs');
  console.log('  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  console.log('  3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π —Å [object Object]');
  console.log('  4. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ BullMQ');
  console.log('  5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—É—é —Å—Ö–µ–º—É –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {entity}:{companyId}:{identifier}');
  
  await redis.quit();
}

analyzeRedisKeys().catch(console.error);