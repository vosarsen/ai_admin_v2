#!/usr/bin/env node

/**
 * –ü–û–õ–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients
 * 1. –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients
 * 2. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã—Ö
 */

require('dotenv').config();
const axios = require('axios');
const { supabase } = require('../src/database/supabase');

class FullClientsSync {
  constructor() {
    this.COMPANY_ID = 962302;
    this.bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
    this.userToken = process.env.YCLIENTS_USER_TOKEN;
    this.stats = {
      total: 0,
      created: 0,
      updated: 0,
      errors: 0
    };
  }

  async syncAll() {
    const startTime = Date.now();
    
    console.log('\nüöÄ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í –ò–ó YCLIENTS');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      const allClients = await this.fetchAllClients();
      console.log(`\nüìä –ü–æ–ª—É—á–µ–Ω–æ ${allClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients\n`);
      
      if (allClients.length === 0) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î...');
      const { data: existingClients } = await supabase
        .from('clients')
        .select('id, yclients_id')
        .eq('company_id', this.COMPANY_ID);
      
      const existingMap = new Map();
      existingClients?.forEach(c => {
        if (c.yclients_id) {
          existingMap.set(c.yclients_id, c.id);
        }
      });
      
      console.log(`‚úÖ –í –ë–î –Ω–∞–π–¥–µ–Ω–æ ${existingMap.size} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
      
      // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è upsert
      console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...\n');
      
      const clientsToSave = [];
      
      for (const ycClient of allClients) {
        const clientData = {
          yclients_id: ycClient.id,
          company_id: this.COMPANY_ID,
          name: ycClient.name || '–ö–ª–∏–µ–Ω—Ç',
          phone: this.normalizePhone(ycClient.phone) || '',
          email: ycClient.email || null,
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          visit_count: ycClient.visits_count || 0,
          total_spent: ycClient.spent || ycClient.sold_amount || 0,
          
          // –î–∞—Ç—ã
          first_visit_date: ycClient.first_visit_date || null,
          last_visit_date: ycClient.last_visit_date || null,
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          birthday: ycClient.birth_date || null,
          gender: this.detectGender(ycClient.sex_id, ycClient.name),
          comment: ycClient.comment || null,
          
          // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞
          loyalty_level: this.calculateLoyaltyLevel(ycClient.visits_count, ycClient.spent),
          
          created_at: ycClient.create_date || new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
        Object.keys(clientData).forEach(key => {
          if (clientData[key] === '' || clientData[key] === null) {
            delete clientData[key];
          }
        });
        
        clientsToSave.push(clientData);
        this.stats.total++;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
      console.log(`üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${clientsToSave.length} –∫–ª–∏–µ–Ω—Ç–æ–≤...\n`);
      
      const BATCH_SIZE = 100;
      for (let i = 0; i < clientsToSave.length; i += BATCH_SIZE) {
        const batch = clientsToSave.slice(i, i + BATCH_SIZE);
        const progress = Math.round((i / clientsToSave.length) * 100);
        
        console.log(`  –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ ${i + 1}-${Math.min(i + BATCH_SIZE, clientsToSave.length)} (${progress}%)...`);
        
        try {
          const { data, error } = await supabase
            .from('clients')
            .upsert(batch, {
              onConflict: 'company_id,yclients_id',
              ignoreDuplicates: false
            })
            .select();
          
          if (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞:`, error.message);
            this.stats.errors += batch.length;
          } else {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º created vs updated
            data?.forEach(client => {
              if (existingMap.has(client.yclients_id)) {
                this.stats.updated++;
              } else {
                this.stats.created++;
              }
            });
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞:`, error.message);
          this.stats.errors += batch.length;
        }
        
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê!\n');
      console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.stats.total}`);
      console.log(`  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${this.stats.created}`);
      console.log(`  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${this.stats.updated}`);
      console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${this.stats.errors}`);
      console.log(`  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      const { count: finalCount } = await supabase
        .from('clients')
        .select('*', { count: 'exact', head: true })
        .eq('company_id', this.COMPANY_ID);
      
      console.log(`\nüìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${finalCount}`);
      
    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  }
  
  async fetchAllClients() {
    const allClients = [];
    let page = 1;
    let hasMore = true;
    
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients API...\n');
    
    while (hasMore) {
      try {
        const url = `https://api.yclients.com/api/v1/company/${this.COMPANY_ID}/clients/search`;
        
        console.log(`  –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
        
        const response = await axios.post(url, {
          fields: [],
          filters: [],
          order_by: 'id', 
          order_by_direction: 'DESC',
          limit: 300,
          page: page
        }, {
          headers: {
            'Authorization': `Bearer ${this.bearerToken}, User ${this.userToken}`,
            'Accept': 'application/vnd.yclients.v2+json',
            'Content-Type': 'application/json'
          },
          timeout: 30000
        });
        
        const clients = response.data?.data || [];
        console.log(`    –ü–æ–ª—É—á–µ–Ω–æ: ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
        
        if (clients.length === 0) {
          hasMore = false;
        } else {
          allClients.push(...clients);
          page++;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          if (clients.length < 300) {
            hasMore = false;
          }
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
        hasMore = false;
      }
    }
    
    return allClients;
  }
  
  normalizePhone(phone) {
    if (!phone) return null;
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let normalized = phone.toString().replace(/\D/g, '');
    // –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7 –≤ –Ω–∞—á–∞–ª–µ
    if (normalized.startsWith('8') && normalized.length === 11) {
      normalized = '7' + normalized.substring(1);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º 7 –µ—Å–ª–∏ –Ω–æ–º–µ—Ä 10-–∑–Ω–∞—á–Ω—ã–π
    if (normalized.length === 10) {
      normalized = '7' + normalized;
    }
    return normalized;
  }
  
  detectGender(sexId, name) {
    // –ü–æ ID –∏–∑ YClients
    if (sexId === 1) return 'male';
    if (sexId === 2) return 'female';
    
    // –ü–æ –∏–º–µ–Ω–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω)
    if (!name) return null;
    
    const femaleEndings = ['–∞', '—è', '—å'];
    const lastName = name.toLowerCase();
    
    if (femaleEndings.some(ending => lastName.endsWith(ending))) {
      // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω
      const maleExceptions = ['–∏–ª—å—è', '–Ω–∏–∫–∏—Ç–∞', '–¥–∞–Ω–∏–ª–∞', '—Å–∞–≤–≤–∞', '–ª—É–∫–∞', '—Ñ–æ–º–∞'];
      if (!maleExceptions.some(ex => lastName.includes(ex))) {
        return 'female';
      }
    }
    
    return 'male'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
  }
  
  calculateLoyaltyLevel(visits, spent) {
    if (visits >= 20 || spent >= 50000) return 'VIP';
    if (visits >= 10 || spent >= 20000) return 'Gold';
    if (visits >= 5 || spent >= 10000) return 'Silver';
    if (visits >= 1) return 'Bronze';
    return 'New';
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
const sync = new FullClientsSync();
sync.syncAll().catch(console.error);