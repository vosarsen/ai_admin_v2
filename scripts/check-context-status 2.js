#!/usr/bin/env node
/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node check-context-status.js 79001234567
 */

const contextService = require('./src/services/context');
const { createRedisClient } = require('./src/utils/redis-factory');
const logger = require('./src/utils/logger').child({ module: 'check-context' });

async function checkContextStatus(phone) {
  const companyId = 962302;
  const normalizedPhone = phone.replace(/\D/g, '');
  
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è: ${normalizedPhone}\n`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log('1Ô∏è‚É£ –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢:');
    const context = await contextService.getContext(normalizedPhone, companyId);
    console.log('- –ö–ª–∏–µ–Ω—Ç:', context.client || '–ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('- –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:', context.lastMessages?.length || 0);
    console.log('- –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:', context.lastBooking || '–ù–µ—Ç');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:');
    const preferences = await contextService.getPreferences(normalizedPhone, companyId);
    if (preferences) {
      console.log('- –õ—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞:', preferences.favoriteService);
      console.log('- –õ—é–±–∏–º—ã–π –º–∞—Å—Ç–µ—Ä:', preferences.favoriteStaff);
      console.log('- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è:', preferences.preferredTime);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', preferences.lastUpdated);
    } else {
      console.log('- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    console.log('\n3Ô∏è‚É£ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê:');
    const canContinue = await contextService.canContinueConversation(normalizedPhone, companyId);
    console.log('- –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:', canContinue ? '–î–ê ‚úÖ' : '–ù–ï–¢ ‚ùå');
    
    // 4. –°–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
    console.log('\n4Ô∏è‚É£ –°–ê–ú–ú–ê–†–ò –î–ò–ê–õ–û–ì–ê:');
    const summary = await contextService.getConversationSummary(normalizedPhone, companyId);
    if (summary) {
      console.log('- –ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è:', summary.hasHistory ? '–î–ê' : '–ù–ï–¢');
      console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', summary.messageCount);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      summary.recentMessages?.forEach(msg => {
        console.log(`  ${msg.role}: ${msg.content.substring(0, 50)}...`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Redis –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n5Ô∏è‚É£ –î–ê–ù–ù–´–ï –í REDIS:');
    const redis = createRedisClient('context');
    
    const contextKey = `context:${companyId}:${normalizedPhone}`;
    const exists = await redis.exists(contextKey);
    console.log('- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', exists ? '–î–ê' : '–ù–ï–¢');
    
    if (exists) {
      const ttl = await redis.ttl(contextKey);
      console.log('- TTL (–¥–Ω–µ–π):', Math.floor(ttl / 86400));
      
      const lastActivity = await redis.hget(contextKey, 'lastActivity');
      if (lastActivity) {
        const hours = (Date.now() - new Date(lastActivity).getTime()) / (1000 * 60 * 60);
        console.log('- –ß–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', Math.floor(hours));
      }
    }
    
    const prefKey = `preferences:${companyId}:${normalizedPhone}`;
    const prefExists = await redis.exists(prefKey);
    console.log('- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç:', prefExists ? '–î–ê' : '–ù–ï–¢');
    
    await redis.quit();
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫
const phone = process.argv[2];
if (!phone) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node check-context-status.js <phone>');
  console.log('–ü—Ä–∏–º–µ—Ä: node check-context-status.js 79001234567');
  process.exit(1);
}

checkContextStatus(phone);