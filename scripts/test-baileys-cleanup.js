#!/usr/bin/env node

/**
 * Test script for Baileys cleanup
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ—á–∏—Å—Ç–∫–∏ –≤ dry-run —Ä–µ–∂–∏–º–µ
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// Test configuration
const TEST_CONFIG = {
  OLD_SESSION_FILES: 5,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö session —Ñ–∞–π–ª–æ–≤
  NEW_SESSION_FILES: 5,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö session —Ñ–∞–π–ª–æ–≤
  PRE_KEY_FILES: 60,       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ pre-key —Ñ–∞–π–ª–æ–≤
  DAYS_OLD: 20,            // –í–æ–∑—Ä–∞—Å—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–Ω—è—Ö
  CLEANUP_AFTER_TEST: process.argv.includes('--cleanup')
};

console.log('=' .repeat(60));
console.log('üß™ Testing Baileys Cleanup Script');
console.log('=' .repeat(60));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
const scriptPath = path.join(__dirname, 'baileys-multitenancy-cleanup.js');
if (!fs.existsSync(scriptPath)) {
  console.error('‚ùå Cleanup script not found at:', scriptPath);
  process.exit(1);
}

console.log('‚úÖ Script found at:', scriptPath);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º help
console.log('\nüìñ Testing --help flag:');
console.log('-'.repeat(40));
try {
  const helpOutput = execSync(`node ${scriptPath} --help`, { encoding: 'utf8' });
  console.log(helpOutput);
} catch (error) {
  console.error('‚ùå Failed to run help:', error.message);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º dry-run –ª–æ–∫–∞–ª—å–Ω–æ
console.log('\nüîç Testing --dry-run mode locally:');
console.log('-'.repeat(40));

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const testSessionsPath = path.join(__dirname, '../baileys_sessions');
const testCompanyPath = path.join(testSessionsPath, 'company_test');

if (!fs.existsSync(testCompanyPath)) {
  console.log('üìÅ Creating test directory structure...');
  fs.mkdirSync(testSessionsPath, { recursive: true });
  fs.mkdirSync(testCompanyPath, { recursive: true });

  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã (–ù–ï –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è)
  fs.writeFileSync(path.join(testCompanyPath, 'creds.json'), '{"test": true}');
  fs.writeFileSync(path.join(testCompanyPath, 'app-state-sync-1.json'), '{}');
  fs.writeFileSync(path.join(testCompanyPath, 'lid-mapping-1.json'), '{}');

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const oldDate = new Date(Date.now() - TEST_CONFIG.DAYS_OLD * 24 * 60 * 60 * 1000);

  for (let i = 1; i <= TEST_CONFIG.OLD_SESSION_FILES; i++) {
    const sessionFile = path.join(testCompanyPath, `session-test-${i}.json`);
    fs.writeFileSync(sessionFile, '{}');
    fs.utimesSync(sessionFile, oldDate, oldDate); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
  for (let i = TEST_CONFIG.OLD_SESSION_FILES + 1; i <= TEST_CONFIG.OLD_SESSION_FILES + TEST_CONFIG.NEW_SESSION_FILES; i++) {
    fs.writeFileSync(path.join(testCompanyPath, `session-test-${i}.json`), '{}');
  }

  // Pre-keys –¥–ª—è —Ç–µ—Å—Ç–∞
  for (let i = 1; i <= TEST_CONFIG.PRE_KEY_FILES; i++) {
    fs.writeFileSync(path.join(testCompanyPath, `pre-key-${i}.json`), '{}');
  }

  console.log(`‚úÖ Test files created:`);
  console.log(`   - ${TEST_CONFIG.OLD_SESSION_FILES} old session files (${TEST_CONFIG.DAYS_OLD} days old)`);
  console.log(`   - ${TEST_CONFIG.NEW_SESSION_FILES} new session files`);
  console.log(`   - ${TEST_CONFIG.PRE_KEY_FILES} pre-key files`);
  console.log(`   - 3 critical files (creds, app-state, lid-mapping)`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º dry-run
try {
  console.log('\nüöÄ Running cleanup in dry-run mode...\n');
  const output = execSync(`node ${scriptPath} --dry-run`, {
    encoding: 'utf8',
    env: { ...process.env, BAILEYS_SESSIONS_PATH: testSessionsPath }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä Checking results...');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–ª–∏—Å—å —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  if (!output.includes('Would remove') && !output.includes('files removed')) {
    console.warn('‚ö†Ô∏è No files marked for removal - test may be incorrect');
  } else {
    console.log('‚úÖ Found files for removal');
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –ù–ï —É–¥–∞–ª—è—é—Ç—Å—è
  if (output.includes('Would remove: creds.json') ||
      output.includes('Would remove: lid-mapping') ||
      output.includes('Would remove: app-state-sync')) {
    console.error('‚ùå CRITICAL: Script would remove protected files!');
    process.exit(1);
  } else {
    console.log('‚úÖ Critical files protected');
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const filesRemoved = output.match(/Total files removed: (\d+)/)?.[1];
  const expectedRemovals = TEST_CONFIG.OLD_SESSION_FILES + (TEST_CONFIG.PRE_KEY_FILES - 50);
  if (filesRemoved) {
    console.log(`‚úÖ Would remove ${filesRemoved} files (expected ~${expectedRemovals})`);
  }

  console.log('\n‚úÖ All checks passed!');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å (dry-run)
  const remainingFiles = fs.readdirSync(testCompanyPath);
  console.log(`\nüìÅ Files still present: ${remainingFiles.length} (dry-run mode)`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–¥–µ—Ä–∂–∫—É –∏–∑ –≤—ã–≤–æ–¥–∞
  console.log('\nüìã Summary from output:');
  const summaryLines = output.split('\n').filter(line =>
    line.includes('SUMMARY') ||
    line.includes('companies') ||
    line.includes('Files:') ||
    line.includes('removed')
  );
  console.log(summaryLines.slice(0, 10).join('\n'));

} catch (error) {
  console.error('‚ùå Dry-run failed:', error.message);
  if (error.stdout) console.log('Output:', error.stdout.toString());
  if (error.stderr) console.error('Error:', error.stderr.toString());
  process.exit(1);
}

console.log('\n' + '=' .repeat(60));
console.log('üéâ Test completed!');
console.log('=' .repeat(60));

console.log('\nüí° Next steps:');
console.log('1. Deploy script to server: scp scripts/baileys-multitenancy-cleanup.js root@46.149.70.219:/opt/ai-admin/scripts/');
console.log('2. Test on server: ssh root@46.149.70.219 "cd /opt/ai-admin && node scripts/baileys-multitenancy-cleanup.js --dry-run"');
console.log('3. Setup cron if results are good');

// Cleanup –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --cleanup)
process.on('exit', () => {
  if (TEST_CONFIG.CLEANUP_AFTER_TEST && fs.existsSync(testCompanyPath)) {
    console.log('\nüßπ Cleaning up test files...');
    try {
      fs.rmSync(testCompanyPath, { recursive: true, force: true });
      console.log('‚úÖ Test files removed');
    } catch (error) {
      console.error('Failed to cleanup:', error.message);
    }
  } else if (TEST_CONFIG.CLEANUP_AFTER_TEST) {
    console.log('\nüí° Tip: Use --cleanup flag to remove test files after test');
  }
});