#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Ö –ø–æ—Ç–µ—Ä–∏
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const serviceDeclension = require('../src/services/declension/service-declension');
const staffDeclension = require('../src/services/declension/staff-declension');
const logger = require('../src/utils/logger');

const COMPANY_ID = process.env.YCLIENTS_COMPANY_ID || 962302;

async function regenerateServiceDeclensions() {
  try {
    logger.info('üõçÔ∏è Starting regeneration of service declensions...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
    const { data: services, error } = await supabase
      .from('services')
      .select('id, yclients_id, title')
      .eq('company_id', COMPANY_ID)
      .or('declensions.is.null,declensions.eq.{}');
    
    if (error) {
      throw error;
    }
    
    if (!services || services.length === 0) {
      logger.info('‚úÖ All services already have declensions');
      return { updated: 0, errors: 0 };
    }
    
    logger.info(`üìã Found ${services.length} services without declensions`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏
    const declensionsMap = await serviceDeclension.generateBatchDeclensions(services);
    
    let updated = 0;
    let errors = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —É—Å–ª—É–≥—É
    for (const service of services) {
      const declensions = declensionsMap.get(service.yclients_id);
      
      if (!declensions) {
        logger.warn(`‚ö†Ô∏è No declensions generated for service: ${service.title}`);
        errors++;
        continue;
      }
      
      const { error: updateError } = await supabase
        .from('services')
        .update({ declensions })
        .eq('id', service.id);
      
      if (updateError) {
        logger.error(`‚ùå Failed to update service ${service.title}:`, updateError);
        errors++;
      } else {
        updated++;
        if (updated % 10 === 0) {
          logger.info(`Progress: ${updated}/${services.length} services updated`);
        }
      }
    }
    
    logger.info(`‚úÖ Service declensions regeneration completed: ${updated} updated, ${errors} errors`);
    return { updated, errors };
    
  } catch (error) {
    logger.error('‚ùå Failed to regenerate service declensions:', error);
    throw error;
  }
}

async function regenerateStaffDeclensions() {
  try {
    logger.info('üë• Starting regeneration of staff declensions...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –±–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
    const { data: staff, error } = await supabase
      .from('staff')
      .select('id, yclients_id, name')
      .eq('company_id', COMPANY_ID)
      .or('declensions.is.null,declensions.eq.{}');
    
    if (error) {
      throw error;
    }
    
    if (!staff || staff.length === 0) {
      logger.info('‚úÖ All staff members already have declensions');
      return { updated: 0, errors: 0 };
    }
    
    logger.info(`üìã Found ${staff.length} staff members without declensions`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏
    const declensionsMap = await staffDeclension.generateBatchDeclensions(staff);
    
    let updated = 0;
    let errors = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    for (const member of staff) {
      const declensions = declensionsMap.get(member.yclients_id);
      
      if (!declensions) {
        logger.warn(`‚ö†Ô∏è No declensions generated for staff: ${member.name}`);
        errors++;
        continue;
      }
      
      const { error: updateError } = await supabase
        .from('staff')
        .update({ declensions })
        .eq('id', member.id);
      
      if (updateError) {
        logger.error(`‚ùå Failed to update staff ${member.name}:`, updateError);
        errors++;
      } else {
        updated++;
        logger.info(`‚úÖ Updated declensions for ${member.name}`);
      }
    }
    
    logger.info(`‚úÖ Staff declensions regeneration completed: ${updated} updated, ${errors} errors`);
    return { updated, errors };
    
  } catch (error) {
    logger.error('‚ùå Failed to regenerate staff declensions:', error);
    throw error;
  }
}

async function main() {
  logger.info('üöÄ Starting declensions regeneration...');
  
  try {
    // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —É—Å–ª—É–≥
    const servicesResult = await regenerateServiceDeclensions();
    
    // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    const staffResult = await regenerateStaffDeclensions();
    
    logger.info('üéâ Declensions regeneration completed!', {
      services: servicesResult,
      staff: staffResult
    });
    
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Regeneration failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();