#!/usr/bin/env node

/**
 * –ü–û–õ–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–∑–∏—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ YClients —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
 */

require('dotenv').config();
const axios = require('axios');
const { supabase } = require('../src/database/supabase');

class PaginatedVisitsSync {
  constructor() {
    this.COMPANY_ID = 962302;
    this.PAGE_SIZE = 300; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    this.bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
    this.userToken = process.env.YCLIENTS_USER_TOKEN;
    this.stats = {
      totalRecords: 0,
      uniqueClients: new Set(),
      savedVisits: 0,
      errors: 0,
      duplicates: 0
    };
  }

  async syncAll() {
    const startTime = Date.now();
    
    console.log('\nüöÄ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ò–ó–ò–¢–û–í –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    try {
      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É visits –¥–ª—è —á–∏—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É visits...');
      await supabase.from('visits').delete().neq('id', 0);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞\n');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î...');
      const { data: dbClients } = await supabase
        .from('clients')
        .select('id, yclients_id, phone, name')
        .eq('company_id', this.COMPANY_ID);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const clientsByYclientsId = new Map();
      const clientsByPhone = new Map();
      
      dbClients?.forEach(client => {
        if (client.yclients_id) {
          clientsByYclientsId.set(client.yclients_id, client);
        }
        if (client.phone) {
          const normalizedPhone = this.normalizePhone(client.phone);
          clientsByPhone.set(normalizedPhone, client);
        }
      });
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dbClients?.length || 0} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ 2 –≥–æ–¥–∞
      const startDate = '2023-01-01';
      const endDate = '2025-12-31';
      
      console.log(`üìÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å ${startDate} –ø–æ ${endDate}\n`);
      
      let currentPage = 1;
      let hasMorePages = true;
      const allVisits = [];
      
      while (hasMorePages) {
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}...`);
        
        const url = `https://api.yclients.com/api/v1/records/${this.COMPANY_ID}`;
        
        try {
          const response = await axios.get(url, {
            params: {
              start_date: startDate,
              end_date: endDate,
              include_finance_transactions: 1,
              with_deleted: 0, // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
              page: currentPage,
              count: this.PAGE_SIZE
            },
            headers: {
              'Authorization': `Bearer ${this.bearerToken}, User ${this.userToken}`,
              'Accept': 'application/vnd.api.v2+json',
              'Content-Type': 'application/json'
            },
            timeout: 30000
          });
          
          const records = response.data?.data || [];
          const meta = response.data?.meta;
          
          console.log(`  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}`);
          
          if (meta?.total_count) {
            console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${meta.total_count}`);
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
          for (const record of records) {
            const visit = this.processRecord(record, clientsByYclientsId, clientsByPhone);
            if (visit) {
              allVisits.push(visit);
              this.stats.totalRecords++;
              if (visit.client_id) {
                this.stats.uniqueClients.add(visit.client_id);
              }
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          if (records.length < this.PAGE_SIZE) {
            hasMorePages = false;
            console.log('  ‚Ä¢ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n');
          } else {
            currentPage++;
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}:`, error.message);
          hasMorePages = false;
        }
      }
      
      console.log(`\nüìä –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ ${allVisits.length} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.stats.uniqueClients.size}\n`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã –≤ –ë–î –ø–∞–∫–µ—Ç–∞–º–∏
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
      
      const BATCH_SIZE = 100;
      for (let i = 0; i < allVisits.length; i += BATCH_SIZE) {
        const batch = allVisits.slice(i, i + BATCH_SIZE);
        const progress = Math.round((i / allVisits.length) * 100);
        
        console.log(`  –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ ${i + 1}-${Math.min(i + BATCH_SIZE, allVisits.length)} (${progress}%)...`);
        
        try {
          const { error } = await supabase
            .from('visits')
            .upsert(batch, {
              onConflict: 'company_id,yclients_record_id',
              ignoreDuplicates: true
            });
          
          if (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
            this.stats.errors += batch.length;
          } else {
            this.stats.savedVisits += batch.length;
          }
        } catch (error) {
          console.error('  ‚ùå –û—à–∏–±–∫–∞:', error.message);
          this.stats.errors += batch.length;
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ clients
      console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤...');
      await this.updateClientStats();
      
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n');
      console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.stats.totalRecords}`);
      console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.stats.uniqueClients.size}`);
      console.log(`  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∏–∑–∏—Ç–æ–≤: ${this.stats.savedVisits}`);
      console.log(`  ‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.duplicates}`);
      console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${this.stats.errors}`);
      console.log(`  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const { count: totalVisits } = await supabase
        .from('visits')
        .select('*', { count: 'exact', head: true });
      
      const { data: clientsWithVisits } = await supabase
        .from('visits')
        .select('client_id');
      const uniqueClientsInDb = new Set(clientsWithVisits?.map(v => v.client_id).filter(id => id)).size;
      
      console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
      console.log(`  ‚Ä¢ –í–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ${totalVisits}`);
      console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ${uniqueClientsInDb}`);
      
    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  }
  
  processRecord(record, clientsByYclientsId, clientsByPhone) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
      const clientYclientsId = record.client?.id;
      const clientPhone = this.normalizePhone(record.client?.phone);
      const clientName = record.client?.name;
      
      // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–π –ë–î
      let dbClient = null;
      
      if (clientYclientsId) {
        dbClient = clientsByYclientsId.get(clientYclientsId);
      }
      
      if (!dbClient && clientPhone) {
        dbClient = clientsByPhone.get(clientPhone);
      }
      
      if (!dbClient) {
        // –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return null;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç
      const services = record.services || [];
      const staff = record.staff || {};
      
      return {
        yclients_visit_id: record.visit_id || null,
        yclients_record_id: record.id,
        company_id: this.COMPANY_ID,
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
        client_id: dbClient.id,
        client_yclients_id: clientYclientsId,
        client_phone: clientPhone,
        client_name: clientName || dbClient.name,
        
        staff_id: staff.id || null,
        staff_name: staff.name || '',
        staff_yclients_id: staff.id || null,
        
        services: services.map(s => ({
          id: s.id,
          name: s.title || s.name,
          cost: s.cost || s.price_min || 0,
          duration: s.duration || 0
        })),
        service_names: services.map(s => s.title || s.name),
        service_ids: services.map(s => s.id),
        services_cost: services.reduce((sum, s) => sum + (s.cost || s.price_min || 0), 0),
        
        visit_date: record.date,
        visit_time: record.datetime ? record.datetime.split('T')[1]?.substring(0, 5) : null,
        datetime: record.datetime || record.date + 'T12:00:00',
        duration: services.reduce((sum, s) => sum + (s.duration || 0), 0),
        
        total_cost: record.cost || 0,
        paid_amount: record.paid_full || record.paid || 0,
        discount_amount: record.discount || 0,
        tips_amount: record.tips || 0,
        payment_status: this.getPaymentStatus(record),
        payment_method: record.payment_method || 'unknown',
        
        attendance: record.attendance || 1,
        status: record.deleted ? 'cancelled' : (record.attendance === -1 ? 'no_show' : 'completed'),
        is_online: record.online || false,
        
        comment: record.comment || null,
        rating: record.rate || null,
        review: record.review || null,
        source: record.from_url ? 'online' : 'unknown'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏:', error.message);
      return null;
    }
  }
  
  getPaymentStatus(record) {
    if (!record.paid_full || record.paid_full === 0) {
      return 'not_paid';
    }
    if (record.paid_full < (record.cost || 0)) {
      return 'paid_not_full';
    }
    return 'paid_full';
  }
  
  normalizePhone(phone) {
    if (!phone) return null;
    return phone.toString().replace(/\D/g, '').replace(/^8/, '7');
  }
  
  async updateClientStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–∑–∏—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const { data: visitStats } = await supabase
        .from('visits')
        .select('client_id, service_names, staff_name, visit_date, visit_time');
      
      if (!visitStats || visitStats.length === 0) {
        console.log('  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
      const clientStats = {};
      
      visitStats.forEach(visit => {
        if (!visit.client_id) return;
        
        if (!clientStats[visit.client_id]) {
          clientStats[visit.client_id] = {
            visit_history: [],
            last_services: [],
            favorite_staff_ids: {},
            preferred_time_slots: {}
          };
        }
        
        const stats = clientStats[visit.client_id];
        
        // –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤
        stats.visit_history.push({
          date: visit.visit_date,
          time: visit.visit_time,
          services: visit.service_names || []
        });
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ª—É–≥–∏
        if (visit.service_names && visit.service_names.length > 0) {
          stats.last_services = visit.service_names;
        }
        
        // –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        if (visit.staff_name) {
          stats.favorite_staff_ids[visit.staff_name] = 
            (stats.favorite_staff_ids[visit.staff_name] || 0) + 1;
        }
        
        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
        if (visit.visit_time) {
          const hour = parseInt(visit.visit_time.split(':')[0]);
          let slot = 'morning';
          if (hour >= 12 && hour < 17) slot = 'afternoon';
          else if (hour >= 17) slot = 'evening';
          
          stats.preferred_time_slots[slot] = 
            (stats.preferred_time_slots[slot] || 0) + 1;
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
      console.log(`  –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${Object.keys(clientStats).length} –∫–ª–∏–µ–Ω—Ç–æ–≤...`);
      
      for (const [clientId, stats] of Object.entries(clientStats)) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ
        stats.visit_history.sort((a, b) => 
          new Date(b.date) - new Date(a.date)
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—é–±–∏–º—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ø-3)
        const favoriteStaff = Object.entries(stats.favorite_staff_ids)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 3)
          .map(([name]) => name);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
        const preferredSlot = Object.entries(stats.preferred_time_slots)
          .sort((a, b) => b[1] - a[1])[0]?.[0] || null;
        
        const updateData = {
          visit_history: stats.visit_history.slice(0, 50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –≤–∏–∑–∏—Ç–æ–≤
          last_services: stats.last_services,
          favorite_staff_ids: favoriteStaff,
          preferred_time_slots: preferredSlot ? [preferredSlot] : []
        };
        
        // –£–¥–∞–ª—è–µ–º id –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        delete updateData.id;
        
        await supabase
          .from('clients')
          .update(updateData)
          .eq('id', parseInt(clientId));
      }
      
      console.log('  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
const sync = new PaginatedVisitsSync();
sync.syncAll().catch(console.error);