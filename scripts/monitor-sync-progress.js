#!/usr/bin/env node
/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');

async function monitorProgress() {
  console.clear();
  
  const { count: total } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .gte('visit_count', 1);
    
  const { count: withHistory } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .not('visit_history', 'eq', '[]');
    
  const { count: withServices } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .not('last_services', 'eq', '[]');
    
  const percentage = Math.round(withHistory * 100 / total);
  const remaining = total - withHistory;
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  const barLength = 40;
  const filledLength = Math.round(barLength * percentage / 100);
  const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
  
  console.log('\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –í–ò–ó–ò–¢–û–í');
  console.log('====================================\n');
  
  console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: [${bar}] ${percentage}%\n`);
  
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${withHistory} / ${total}`);
  console.log(`‚ùå –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}`);
  console.log(`üìù –° —É—Å–ª—É–≥–∞–º–∏: ${withServices}`);
  
  console.log('\n------------------------------------');
  console.log('–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...');
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞');
  
  if (remaining === 0) {
    console.log('\nüéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤.');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
  await monitorProgress();
  setInterval(monitorProgress, 5000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

startMonitoring().catch(console.error);