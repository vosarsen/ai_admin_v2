#!/usr/bin/env node
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–æ–≤

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function testPerformance() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI Admin v2\n');
  
  const companyId = process.env.YCLIENTS_COMPANY_ID || 962302;
  const testPhone = '79001234567';
  
  // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏...');
  const servicesStart = Date.now();
  
  const { data: services, error: servicesError } = await supabase
    .from('services')
    .select('*')
    .eq('company_id', companyId)
    .eq('is_active', true)
    .order('weight', { ascending: false })
    .limit(20);
    
  const servicesTime = Date.now() - servicesStart;
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${services?.length || 0} —É—Å–ª—É–≥ –∑–∞ ${servicesTime}ms\n`);
  
  // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É...');
  const clientStart = Date.now();
  
  const { data: client, error: clientError } = await supabase
    .from('clients')
    .select('*')
    .eq('phone', testPhone)
    .eq('company_id', companyId)
    .single();
    
  const clientTime = Date.now() - clientStart;
  console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${client ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –∑–∞ ${clientTime}ms\n`);
  
  // –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤...');
  const staffStart = Date.now();
  
  const { data: staff, error: staffError } = await supabase
    .from('staff')
    .select('*')
    .eq('company_id', companyId)
    .eq('is_active', true)
    .order('rating', { ascending: false, nullsFirst: false })
    .limit(10);
    
  const staffTime = Date.now() - staffStart;
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${staff?.length || 0} –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞ ${staffTime}ms\n`);
  
  // –¢–µ—Å—Ç 4: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');
  const scheduleStart = Date.now();
  
  const today = new Date().toISOString().split('T')[0];
  const { data: schedules, error: scheduleError } = await supabase
    .from('staff_schedules')
    .select('*')
    .eq('date', today)
    .eq('is_working', true);
    
  const scheduleTime = Date.now() - scheduleStart;
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${schedules?.length || 0} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞ ${scheduleTime}ms\n`);
  
  // –¢–µ—Å—Ç 5: –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  console.log('5Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...');
  const contextStart = Date.now();
  
  const [companyData, clientData, servicesData, staffData, schedulesData] = await Promise.all([
    supabase.from('companies').select('*').eq('company_id', companyId).single(),
    supabase.from('clients').select('*').eq('phone', testPhone).eq('company_id', companyId).single(),
    supabase.from('services').select('*').eq('company_id', companyId).eq('is_active', true).order('weight', { ascending: false }).limit(20),
    supabase.from('staff').select('*').eq('company_id', companyId).eq('is_active', true).order('rating', { ascending: false }).limit(10),
    supabase.from('staff_schedules').select('*').eq('date', today).eq('is_working', true)
  ]);
  
  const contextTime = Date.now() - contextStart;
  console.log(`‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${contextTime}ms\n`);
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚îÄ'.repeat(40));
  console.log(`–£—Å–ª—É–≥–∏:            ${servicesTime}ms`);
  console.log(`–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞:     ${clientTime}ms`);
  console.log(`–ú–∞—Å—Ç–µ—Ä–∞:           ${staffTime}ms`);
  console.log(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:        ${scheduleTime}ms`);
  console.log(`–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:   ${contextTime}ms`);
  console.log('‚îÄ'.repeat(40));
  
  const totalSequential = servicesTime + clientTime + staffTime + scheduleTime;
  const improvement = Math.round((totalSequential - contextTime) / totalSequential * 100);
  
  console.log(`\n‚ú® –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${improvement}%`);
  
  // –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìà –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–æ–≤:');
  console.log('- –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å: < 50ms (–±—ã–ª–æ 100-500ms)');
  console.log('- –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: < 200ms (–±—ã–ª–æ 500-1500ms)');
  console.log('- –° Redis –∫—ç—à–µ–º: < 10ms –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPerformance().catch(console.error);