#!/usr/bin/env node
/**
 * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–°–ï–• –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤
 * –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const { ClientRecordsSync } = require('../src/sync/client-records-sync');
const logger = require('../src/utils/logger');

const PARALLEL_WORKERS = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
const BATCH_SIZE = 10; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞

async function processClientBatch(clients, workerId, recordsSync) {
  const results = {
    processed: 0,
    errors: 0,
    skipped: 0
  };
  
  for (const client of clients) {
    try {
      if (!client.yclients_id || !client.phone) {
        results.skipped++;
        continue;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ YClients
      const records = await recordsSync.getClientRecords(client.yclients_id, client.phone);
      
      if (records && records.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await recordsSync.saveClientVisits(client.id, client.yclients_id, records);
        results.processed++;
        
        logger.debug(`Worker ${workerId}: ${client.name} - ${records.length} visits saved`);
      } else {
        logger.debug(`Worker ${workerId}: ${client.name} - no records found`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      results.errors++;
      logger.error(`Worker ${workerId} error for ${client.name}: ${error.message}`);
    }
  }
  
  return results;
}

async function syncAllVisitsParallel() {
  const startTime = Date.now();
  
  try {
    logger.info('üöÄ Starting COMPLETE parallel visit history synchronization...');
    logger.info(`‚öôÔ∏è  Configuration: ${PARALLEL_WORKERS} workers, batch size ${BATCH_SIZE}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏
    const { data: allClients, error } = await supabase
      .from('clients')
      .select('id, yclients_id, phone, name, visit_count')
      .gte('visit_count', 1)
      .order('visit_count', { ascending: false });
    
    if (error) throw error;
    
    logger.info(`üìä Found ${allClients.length} clients with visits`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { data: clientsWithHistory } = await supabase
      .from('clients')
      .select('id')
      .not('visit_history', 'eq', '[]');
    
    const withHistoryIds = new Set(clientsWithHistory.map(c => c.id));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç—ã –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const prioritizedClients = [
      ...allClients.filter(c => !withHistoryIds.has(c.id)),
      ...allClients.filter(c => withHistoryIds.has(c.id))
    ];
    
    logger.info(`üìù Prioritized: ${allClients.length - withHistoryIds.size} without history, ${withHistoryIds.size} with history`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const totalBatches = Math.ceil(prioritizedClients.length / BATCH_SIZE);
    let currentBatch = 0;
    let totalProcessed = 0;
    let totalErrors = 0;
    let totalSkipped = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
    for (let i = 0; i < prioritizedClients.length; i += BATCH_SIZE * PARALLEL_WORKERS) {
      const workerPromises = [];
      
      for (let w = 0; w < PARALLEL_WORKERS; w++) {
        const startIdx = i + (w * BATCH_SIZE);
        const endIdx = Math.min(startIdx + BATCH_SIZE, prioritizedClients.length);
        
        if (startIdx < prioritizedClients.length) {
          const batch = prioritizedClients.slice(startIdx, endIdx);
          const recordsSync = new ClientRecordsSync();
          workerPromises.push(processClientBatch(batch, w + 1, recordsSync));
          currentBatch++;
        }
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
      const results = await Promise.all(workerPromises);
      
      // –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.forEach(result => {
        totalProcessed += result.processed;
        totalErrors += result.errors;
        totalSkipped += result.skipped;
      });
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.round((i + BATCH_SIZE * PARALLEL_WORKERS) * 100 / prioritizedClients.length);
      logger.info(`üìà Progress: ${Math.min(progress, 100)}% | Processed: ${totalProcessed} | Errors: ${totalErrors} | Skipped: ${totalSkipped}`);
    }
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const { count: finalWithHistory } = await supabase
      .from('clients')
      .select('*', { count: 'exact', head: true })
      .not('visit_history', 'eq', '[]');
    
    const { count: finalWithServices } = await supabase
      .from('clients')
      .select('*', { count: 'exact', head: true })
      .not('last_services', 'eq', '[]');
    
    logger.info('');
    logger.info('üéâ SYNCHRONIZATION COMPLETE!');
    logger.info('=============================');
    logger.info(`‚úÖ Successfully processed: ${totalProcessed} clients`);
    logger.info(`‚ùå Errors: ${totalErrors}`);
    logger.info(`‚è≠Ô∏è  Skipped: ${totalSkipped}`);
    logger.info(`‚è±Ô∏è  Total time: ${duration} seconds (${Math.round(duration/60)} minutes)`);
    logger.info(`‚ö° Speed: ${Math.round(totalProcessed / duration * 60)} clients/minute`);
    logger.info('');
    logger.info('üìä FINAL DATABASE STATE:');
    logger.info(`- Clients with visit history: ${finalWithHistory}/${allClients.length} (${Math.round(finalWithHistory * 100 / allClients.length)}%)`);
    logger.info(`- Clients with last services: ${finalWithServices}/${allClients.length} (${Math.round(finalWithServices * 100 / allClients.length)}%)`);
    
    if (finalWithHistory === allClients.length) {
      logger.info('');
      logger.info('üèÜ SUCCESS! All clients now have complete visit history!');
    }
    
    process.exit(0);
    
  } catch (error) {
    logger.error('Fatal error:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
syncAllVisitsParallel();