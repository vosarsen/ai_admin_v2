#!/usr/bin/env node
// scripts/test-company-sync.js
// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏

require('dotenv').config();
const { syncCompany, companySync } = require('../src/sync/company-sync');
const logger = require('../src/utils/logger');

async function testCompanySync() {
  logger.info('üöÄ Starting company sync test');

  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const companyId = process.argv[2] || process.env.YCLIENTS_COMPANY_ID;

    if (!companyId) {
      logger.error('‚ùå Company ID not provided. Use: node test-company-sync.js <company_id>');
      process.exit(1);
    }

    logger.info(`üìã Testing sync for company ID: ${companyId}`);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const lastSyncInfo = await companySync.getLastSyncInfo(companyId);
    logger.info('üìä Last sync info:', lastSyncInfo);

    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const result = await syncCompany(companyId);

    if (result.success) {
      logger.info('‚úÖ Sync completed successfully!', {
        companyName: result.companyName,
        duration: `${result.duration}ms`
      });

      // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (result.data) {
        logger.info('üì¶ Synced company data:', {
          id: result.data.id,
          yclients_id: result.data.yclients_id,
          title: result.data.title,
          phone: result.data.phone,
          email: result.data.email,
          address: result.data.address,
          timezone: result.data.timezone,
          hasCoordinates: !!(result.data.coordinate_lat && result.data.coordinate_lon),
          hasWorkingHours: Object.keys(result.data.working_hours || {}).length > 0
        });
      }
    } else {
      logger.error('‚ùå Sync failed:', result.error);
    }

  } catch (error) {
    logger.error('üí• Test failed with error:', {
      error: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCompanySync()
  .then(() => {
    logger.info('üèÅ Test completed');
    process.exit(0);
  })
  .catch(error => {
    logger.error('üí• Unexpected error:', error);
    process.exit(1);
  });