#!/usr/bin/env node

/**
 * WhatsApp Recovery Script
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */

const axios = require('axios');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const API_URL = 'http://46.149.70.219:3000';
const COMPANY_ID = '962302';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function checkWhatsAppStatus() {
  try {
    const response = await axios.get(`${API_URL}/webhook/whatsapp/baileys/status/${COMPANY_ID}`);
    return response.data;
  } catch (error) {
    return { connected: false, error: error.message };
  }
}

async function stopMonitor() {
  log('\nüìã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä—ã...', colors.yellow);
  try {
    await execPromise('ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "pm2 stop whatsapp-monitor"');
    log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', colors.green);
  } catch (error) {
    log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', colors.yellow);
  }
}

async function cleanupSessions() {
  log('\nüßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏...', colors.yellow);

  const commands = [
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö baileys –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    'pkill -f baileys',

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    'rm -rf /tmp/baileys_*',
    'rm -rf /tmp/whatsapp_*',

    // –û—á–∏—Å—Ç–∫–∞ auth_data (–Ω–æ –ù–ï creds.json!)
    'find /opt/ai-admin -name "app-state-sync-*" -delete 2>/dev/null',
    'find /opt/ai-admin -name "pre-key-*" -delete 2>/dev/null',
    'find /opt/ai-admin -name "sender-key-*" -delete 2>/dev/null',
    'find /opt/ai-admin -name "session-*" -delete 2>/dev/null',

    // –û—á–∏—Å—Ç–∫–∞ Redis –∫–µ—à–∞
    'redis-cli KEYS "whatsapp:*" | xargs redis-cli DEL 2>/dev/null',
    'redis-cli KEYS "baileys:*" | xargs redis-cli DEL 2>/dev/null'
  ];

  for (const cmd of commands) {
    try {
      await execPromise(`ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "${cmd}"`);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    }
  }

  log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.green);
}

async function restartAPI() {
  log('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...', colors.yellow);
  try {
    await execPromise('ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "pm2 restart ai-admin-api"');
    log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω', colors.green);

    // –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 5000));
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`, colors.red);
  }
}

async function generateNewQR() {
  log('\nüì± –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π QR –∫–æ–¥...', colors.yellow);

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    await axios.post(`${API_URL}/webhook/whatsapp/baileys/init/${COMPANY_ID}`);

    log('‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', colors.green);
    log(`\n${colors.bright}${colors.cyan}–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR:${colors.reset}`);
    log(`${colors.bright}${colors.blue}http://46.149.70.219:3000/whatsapp-connect.html?company=${COMPANY_ID}${colors.reset}`);

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: ${error.message}`, colors.red);
    return false;
  }
}

async function waitForConnection(timeout = 300) {
  log(`\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º ${timeout} —Å–µ–∫—É–Ω–¥)...`, colors.yellow);

  const startTime = Date.now();
  let dots = 0;

  while ((Date.now() - startTime) < timeout * 1000) {
    const status = await checkWhatsAppStatus();

    if (status.connected) {
      log('\n‚úÖ WhatsApp —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!', colors.green);
      return true;
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    process.stdout.write(`\r‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ${'.'.repeat(dots % 4)}    `);
    dots++;

    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  log('\n‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ', colors.yellow);
  return false;
}

async function createBackup() {
  log('\nüíæ –°–æ–∑–¥–∞—ë–º backup –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', colors.yellow);

  try {
    await execPromise(`ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "cd /opt/ai-admin && node scripts/whatsapp-backup-manager.js backup ${COMPANY_ID}"`);
    log('‚úÖ Backup —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', colors.green);
  } catch (error) {
    log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup: ${error.message}`, colors.yellow);
  }
}

async function main() {
  log(`\n${colors.bright}üîß WhatsApp Recovery Tool${colors.reset}`);
  log('=' .repeat(40));

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...', colors.cyan);
  const initialStatus = await checkWhatsAppStatus();

  if (initialStatus.connected) {
    log('‚úÖ WhatsApp —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!', colors.green);

    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const answer = await new Promise(resolve => {
      rl.question('\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å WhatsApp? (y/n): ', resolve);
    });
    rl.close();

    if (answer.toLowerCase() !== 'y') {
      log('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã', colors.yellow);
      process.exit(0);
    }
  }

  // 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
  await stopMonitor();

  // 3. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
  await cleanupSessions();

  // 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ API
  await restartAPI();

  // 5. –û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  if (initialStatus.error && initialStatus.error.includes('–ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')) {
    log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ WhatsApp!', colors.yellow);
    log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.cyan);
    log('1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', colors.reset);
    log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ WhatsApp', colors.reset);
    log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤', colors.reset);

    log('\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–ø—ã—Ç–∫–æ–π –æ–±—Ö–æ–¥–∞...', colors.yellow);
    await new Promise(resolve => setTimeout(resolve, 5000));
  }

  // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ QR
  const qrGenerated = await generateNewQR();

  if (!qrGenerated) {
    log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥', colors.red);
    process.exit(1);
  }

  // 7. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connected = await waitForConnection();

  if (connected) {
    // 8. –°–æ–∑–¥–∞–Ω–∏–µ backup
    await createBackup();

    log('\n' + '=' .repeat(40), colors.green);
    log(`${colors.bright}‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${colors.reset}`, colors.green);
    log('=' .repeat(40), colors.green);

    log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.cyan);
    log('1. –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ whatsapp-monitor —Å—Ä–∞–∑—É', colors.reset);
    log('2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏', colors.reset);
    log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π', colors.reset);
    log('4. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä:', colors.reset);
    log(`   ${colors.bright}pm2 start whatsapp-monitor${colors.reset}`, colors.blue);
  } else {
    log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å WhatsApp', colors.red);
    log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', colors.yellow);
    log('1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞', colors.reset);
    log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', colors.reset);
    log('3. QR –∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω', colors.reset);

    log('\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:', colors.cyan);
    log('1. –ü–æ–¥–æ–∂–¥–∞—Ç—å 30-60 –º–∏–Ω—É—Ç', colors.reset);
    log('2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ', colors.reset);
    log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: pm2 logs ai-admin-api', colors.reset);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
  process.exit(1);
});