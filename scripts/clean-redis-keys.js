#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Redis
 * –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ cron
 */

const Redis = require('ioredis');
const logger = require('../src/utils/logger');
const { getRedisConfig } = require('../src/config/redis-config');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const redis = new Redis(getRedisConfig());

async function cleanRedis() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É Redis...\n');
  
  const stats = {
    deleted: 0,
    expired: 0,
    errors: 0
  };
  
  const allKeys = await redis.keys('*');
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allKeys.length} –∫–ª—é—á–µ–π\n`);
  
  // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ completed –∑–∞–¥–∞—á–∏ BullMQ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
  console.log('üì¶ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ BullMQ...');
  const bullCompletedKeys = allKeys.filter(k => k.includes(':completed'));
  
  for (const key of bullCompletedKeys) {
    try {
      const type = await redis.type(key);
      if (type === 'zset') {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
        const oldJobs = await redis.zrangebyscore(key, '-inf', sevenDaysAgo);
        
        if (oldJobs.length > 0) {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
          await redis.zremrangebyscore(key, '-inf', sevenDaysAgo);
          
          // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ hash –∫–ª—é—á–∏
          for (const jobId of oldJobs) {
            const hashKey = key.replace(':completed', `:${jobId}`);
            await redis.del(hashKey);
            stats.deleted++;
          }
          
          console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${oldJobs.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∏–∑ ${key}`);
        }
      }
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${key}:`, error.message);
      stats.errors++;
    }
  }
  
  // 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ failed –∑–∞–¥–∞—á–∏ BullMQ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
  console.log('\n‚ùå –û—á–∏—â–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ BullMQ...');
  const bullFailedKeys = allKeys.filter(k => k.includes(':failed'));
  
  for (const key of bullFailedKeys) {
    try {
      const type = await redis.type(key);
      if (type === 'zset') {
        const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);
        const oldJobs = await redis.zrangebyscore(key, '-inf', thirtyDaysAgo);
        
        if (oldJobs.length > 0) {
          await redis.zremrangebyscore(key, '-inf', thirtyDaysAgo);
          
          for (const jobId of oldJobs) {
            const hashKey = key.replace(':failed', `:${jobId}`);
            await redis.del(hashKey);
            stats.deleted++;
          }
          
          console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${oldJobs.length} —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ ${key}`);
        }
      }
    } catch (error) {
      console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${key}:`, error.message);
      stats.errors++;
    }
  }
  
  // 3. –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ —Å –∏—Å—Ç—ë–∫—à–∏–º TTL (–ø—Ä–æ–≤–µ—Ä–∫–∞)
  console.log('\n‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ —Å –∏—Å—Ç—ë–∫—à–∏–º TTL...');
  let expiredCount = 0;
  
  for (const key of allKeys) {
    try {
      const ttl = await redis.ttl(key);
      // –ï—Å–ª–∏ TTL = -2, –∫–ª—é—á —É–∂–µ —É–¥–∞–ª—ë–Ω
      if (ttl === -2) {
        expiredCount++;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ TTL
    }
  }
  
  if (expiredCount > 0) {
    console.log(`  ‚úÖ Redis –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏–ª ${expiredCount} –∫–ª—é—á–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º TTL`);
    stats.expired = expiredCount;
  }
  
  // 4. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
  console.log('\nüß™ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏...');
  const testPatterns = ['test:', 'temp:', 'tmp:', 'debug:'];
  
  for (const pattern of testPatterns) {
    const testKeys = allKeys.filter(k => k.startsWith(pattern));
    for (const key of testKeys) {
      try {
        await redis.del(key);
        console.log(`  ‚ùå –£–¥–∞–ª—ë–Ω: ${key}`);
        stats.deleted++;
      } catch (error) {
        console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key}:`, error.message);
        stats.errors++;
      }
    }
  }
  
  // 5. –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ —Å [object Object] –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–Ω–æ–≤–∞
  console.log('\nüóëÔ∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏...');
  const junkKeys = allKeys.filter(k => k.includes('[object Object]'));
  
  if (junkKeys.length > 0) {
    console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${junkKeys.length} –∫–ª—é—á–µ–π —Å [object Object] - —É–¥–∞–ª—è–µ–º...`);
    for (const key of junkKeys) {
      try {
        await redis.del(key);
        console.log(`  ‚ùå –£–¥–∞–ª—ë–Ω: ${key}`);
        stats.deleted++;
      } catch (error) {
        console.error(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${key}:`, error.message);
        stats.errors++;
      }
    }
  } else {
    console.log('  ‚úÖ –ú—É—Å–æ—Ä–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 6. –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
  console.log('\nüíæ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...');
  try {
    const info = await redis.info('memory');
    const lines = info.split('\r\n');
    const usedMemory = lines.find(l => l.startsWith('used_memory_human:'));
    const peakMemory = lines.find(l => l.startsWith('used_memory_peak_human:'));
    
    if (usedMemory) {
      console.log(`  üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏: ${usedMemory.split(':')[1]}`);
    }
    if (peakMemory) {
      console.log(`  üìà –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${peakMemory.split(':')[1]}`);
    }
  } catch (error) {
    console.error('  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏');
  }
  
  // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:');
  console.log('='.repeat(60));
  console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: ${stats.deleted}`);
  console.log(`‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Ç–µ–∫–ª–æ: ${stats.expired}`);
  if (stats.errors > 0) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–æ–∫: ${stats.errors}`);
  }
  
  // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const finalKeys = await redis.keys('*');
  console.log(`\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å –∫–ª—é—á–µ–π: ${finalKeys.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const patterns = {};
  for (const key of finalKeys) {
    const pattern = key.split(':')[0];
    patterns[pattern] = (patterns[pattern] || 0) + 1;
  }
  
  console.log('\nüìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:');
  Object.entries(patterns)
    .sort(([,a], [,b]) => b - a)
    .forEach(([pattern, count]) => {
      console.log(`  ${pattern}: ${count}`);
    });
  
  await redis.quit();
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
cleanRedis().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});