/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Gemini API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –ë–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É API
 * 2. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
 * 3. Structured output (JSON mode)
 * 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–∫–∞–∫ –≤ two-stage —Å–∏—Å—Ç–µ–º–µ)
 */

const axios = require('axios');

const GEMINI_API_KEY = 'AIzaSyD1Pnxdz8wZ6CsaDddUxxIG3fMg69kQkkU';
const GEMINI_MODEL = 'gemini-2.5-flash';
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
 */
async function testBasicRussian() {
  console.log('\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç\n');

  try {
    const response = await axios.post(
      GEMINI_API_URL,
      {
        contents: [{
          parts: [{
            text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
          }]
        }]
      },
      {
        headers: {
          'x-goog-api-key': GEMINI_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', text);
    console.log('\nüìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä—É—Å—Å–∫–æ–≥–æ: ', text.length > 50 ? '–•–æ—Ä–æ—à–µ–µ' : '–ö–æ—Ä–æ—Ç–∫–æ–µ');

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: Structured JSON output
 */
async function testStructuredJSON() {
  console.log('\nüß™ –¢–µ—Å—Ç 2: Structured JSON output\n');

  try {
    const response = await axios.post(
      GEMINI_API_URL,
      {
        contents: [{
          parts: [{
            text: '–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã'
          }]
        }],
        generationConfig: {
          responseMimeType: 'application/json',
          responseSchema: {
            type: 'object',
            properties: {
              services: {
                type: 'array',
                items: {
                  type: 'object',
                  properties: {
                    name: { type: 'string' },
                    price: { type: 'number' }
                  },
                  required: ['name', 'price']
                }
              }
            },
            required: ['services']
          }
        }
      },
      {
        headers: {
          'x-goog-api-key': GEMINI_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    const jsonText = response.data.candidates[0].content.parts[0].text;
    const parsed = JSON.parse(jsonText);

    console.log('‚úÖ JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(parsed, null, 2));
    console.log('üìä –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON: ‚úÖ');
    console.log('üìä –°—Ö–µ–º–∞ —Å–æ–±–ª—é–¥–µ–Ω–∞:', parsed.services && Array.isArray(parsed.services) ? '‚úÖ' : '‚ùå');

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–∫–∞–∫ –≤ AI Admin two-stage)
 */
async function testCommandExtraction() {
  console.log('\nüß™ –¢–µ—Å—Ç 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (Two-Stage Stage 1)\n');

  const testCases = [
    {
      message: '–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∑–∞–≤—Ç—Ä–∞ –≤ 15:00',
      expected: 'CREATE_BOOKING'
    },
    {
      message: '–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É?',
      expected: 'SEARCH_SLOTS'
    },
    {
      message: '–ü–æ–∫–∞–∂–∏ —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏',
      expected: 'SHOW_PRICES'
    },
    {
      message: '–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
      expected: 'CANCEL_BOOKING'
    }
  ];

  const prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å JSON —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:
1. SEARCH_SLOTS - –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: service_name, date)
2. CREATE_BOOKING - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: service_name, date, time)
3. CANCEL_BOOKING - –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ—Ç)
4. SHOW_PRICES - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ—Ç)

–ü–†–ê–í–ò–õ–ê:
- –ë–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Üí SEARCH_SLOTS
- –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º ‚Üí CREATE_BOOKING
- –í–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö/—É—Å–ª—É–≥–∞—Ö ‚Üí SHOW_PRICES
- –û—Ç–º–µ–Ω–∞ ‚Üí CANCEL_BOOKING

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "commands": [
    {
      "name": "COMMAND_NAME",
      "params": { }
    }
  ]
}`;

  let passed = 0;
  let failed = 0;

  for (const testCase of testCases) {
    console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${testCase.message}"`);
    console.log(`üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${testCase.expected}`);

    try {
      const response = await axios.post(
        GEMINI_API_URL,
        {
          contents: [{
            parts: [{
              text: `${prompt}\n\n–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${testCase.message}"`
            }]
          }],
          generationConfig: {
            responseMimeType: 'application/json',
            responseSchema: {
              type: 'object',
              properties: {
                commands: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      name: { type: 'string' },
                      params: { type: 'object' }
                    },
                    required: ['name', 'params']
                  }
                }
              },
              required: ['commands']
            }
          }
        },
        {
          headers: {
            'x-goog-api-key': GEMINI_API_KEY,
            'Content-Type': 'application/json'
          }
        }
      );

      const jsonText = response.data.candidates[0].content.parts[0].text;
      const result = JSON.parse(jsonText);

      const extractedCommand = result.commands[0]?.name;
      const success = extractedCommand === testCase.expected;

      if (success) {
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${extractedCommand}`);
        console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, result.commands[0].params);
        passed++;
      } else {
        console.log(`‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: ${extractedCommand} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected})`);
        failed++;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
      failed++;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log(`\nüìä –ò—Ç–æ–≥–æ: ${passed}/${testCases.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);

  return passed === testCases.length;
}

/**
 * –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (Two-Stage Stage 2)
 */
async function testResponseGeneration() {
  console.log('\nüß™ –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (Two-Stage Stage 2)\n');

  const prompt = `–¢—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã "–ö—Ä–∞—Å–æ—Ç–∞".

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: –°–∞–ª–æ–Ω "–ö—Ä–∞—Å–æ—Ç–∞"
- –ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10

–ö–õ–ò–ï–ù–¢:
- –ò–º—è: –ú–∞—Ä–∏—è
- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (5 –≤–∏–∑–∏—Ç–æ–≤)

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∑–∞–≤—Ç—Ä–∞?"

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –ö–û–ú–ê–ù–î:
‚úÖ SEARCH_SLOTS: –ù–∞–π–¥–µ–Ω–æ 5 —Å–ª–æ—Ç–æ–≤
–°–ª–æ—Ç—ã: 10:00, 12:00, 14:00, 16:00, 18:00
–£—Å–ª—É–≥–∞: –º–∞–Ω–∏–∫—é—Ä
–ú–∞—Å—Ç–µ—Ä: –ê–Ω–Ω–∞

–ü–†–ê–í–ò–õ–ê:
1. –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp (*, _, ~)
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥
3. –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏

–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:`;

  try {
    const response = await axios.post(
      GEMINI_API_URL,
      {
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      },
      {
        headers: {
          'x-goog-api-key': GEMINI_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );

    const text = response.data.candidates[0].content.parts[0].text;
    console.log('‚úÖ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:\n');
    console.log(text);
    console.log('\nüìä –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞:');
    console.log('   - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π:', text.includes('–ú–∞—Ä–∏—è') ? '‚úÖ' : '‚ùå');
    console.log('   - –£–ø–æ–º–∏–Ω–∞–µ—Ç —Å–ª–æ—Ç—ã:', text.includes('10:00') || text.includes('10') ? '‚úÖ' : '‚ùå');
    console.log('   - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω:', text.includes('!') || text.includes('—Ä–∞–¥') ? '‚úÖ' : '‚ö†Ô∏è');

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API –¥–ª—è AI Admin v2');
  console.log('‚îÅ'.repeat(60));

  const results = {
    basicRussian: await testBasicRussian(),
    structuredJSON: await testStructuredJSON(),
    commandExtraction: await testCommandExtraction(),
    responseGeneration: await testResponseGeneration()
  };

  console.log('\n' + '‚îÅ'.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('‚îÅ'.repeat(60));
  console.log(`1. –ü—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç:      ${results.basicRussian ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`2. Structured JSON:            ${results.structuredJSON ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (Stage 1):${results.commandExtraction ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (Stage 2): ${results.responseGeneration ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log('‚îÅ'.repeat(60));

  const allPassed = Object.values(results).every(r => r === true);

  if (allPassed) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Gemini –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ AI Admin v2!');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
