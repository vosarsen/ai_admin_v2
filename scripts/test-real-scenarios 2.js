#!/usr/bin/env node
// scripts/test-real-scenarios.js
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Admin –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö —Å –æ—Ü–µ–Ω–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏

require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Admin v2 –∏ —Å–µ—Ä–≤–∏—Å—ã
const AIAdminService = require('../src/services/ai-admin-v2');
const { supabase } = require('../src/database/supabase');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m'
};

class RealScenarioTester {
  constructor() {
    this.aiAdmin = AIAdminService;
    this.companyId = 962302;
    this.currentDialog = null;
    this.currentPhone = null;
    this.results = [];
    this.rl = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ë–î
   */
  async loadRealDialogs() {
    console.log(`${colors.cyan}üì± –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${colors.reset}\n`);
    
    const { data: contexts, error } = await supabase
      .from('dialog_contexts')
      .select('*')
      .order('message_count', { ascending: false })
      .limit(50);
    
    if (error) throw error;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏
    const dialogs = contexts
      .filter(ctx => ctx.messages && ctx.messages.length > 0)
      .map(ctx => {
        const phone = ctx.user_id.replace('@c.us', '');
        return {
          id: ctx.id,
          phone,
          messageCount: ctx.message_count || ctx.messages.length,
          lastActivity: ctx.last_activity,
          hasBooking: !!ctx.last_booking_id,
          messages: ctx.messages.map(msg => ({
            user: msg.userMessage,
            ai: msg.aiResponse,
            actions: msg.actions || [],
            timestamp: msg.timestamp,
            processingTime: msg.processingTime || msg.processingTimeMs
          }))
        };
      })
      .sort((a, b) => b.messageCount - a.messageCount);
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤\n`);
    return dialogs;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏
   */
  analyzeDialogIntent(messages) {
    const firstMessage = messages[0]?.user?.toLowerCase() || '';
    const allUserMessages = messages.map(m => m.user?.toLowerCase() || '').join(' ');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å –¥–∏–∞–ª–æ–≥–∞
    if (allUserMessages.includes('–∑–∞–ø–∏—Å') || allUserMessages.includes('–∑–∞–ø–∏—à') || 
        allUserMessages.includes('–º–æ–∂–Ω–æ') || allUserMessages.includes('—Å–≤–æ–±–æ–¥–Ω')) {
      return 'BOOKING';
    } else if (allUserMessages.includes('–æ—Ç–º–µ–Ω') || allUserMessages.includes('–ø–µ—Ä–µ–Ω–µ—Å')) {
      return 'CANCEL_RESCHEDULE';
    } else if (allUserMessages.includes('—Ü–µ–Ω') || allUserMessages.includes('—Å—Ç–æ–∏') || 
               allUserMessages.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return 'PRICE_INFO';
    } else if (allUserMessages.includes('—Ä–∞–±–æ—Ç–∞') || allUserMessages.includes('–≤—Ä–µ–º—è') ||
               allUserMessages.includes('–≥—Ä–∞—Ñ–∏–∫')) {
      return 'SCHEDULE_INFO';
    } else {
      return 'GENERAL_INFO';
    }
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
   */
  evaluateDialogSuccess(messages, intent) {
    const lastAiResponse = messages[messages.length - 1]?.ai?.toLowerCase() || '';
    const allActions = messages.flatMap(m => m.actions || []);
    
    const criteria = {
      BOOKING: {
        success: ['–∑–∞–ø–∏—Å–∞–ª', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª', '–∂–¥–µ–º –≤–∞—Å', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥', '—É—Å–ø–µ—à–Ω–æ'],
        actions: ['CREATE_BOOKING', 'CONFIRM_BOOKING'],
        partial: ['–≤—ã–±–µ—Ä–∏—Ç–µ', '—É–∫–∞–∂–∏—Ç–µ', '—É—Ç–æ—á–Ω–∏—Ç–µ', '–¥–æ—Å—Ç—É–ø–Ω']
      },
      CANCEL_RESCHEDULE: {
        success: ['–æ—Ç–º–µ–Ω–µ–Ω', '–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω', '–∏–∑–º–µ–Ω'],
        actions: ['CANCEL_BOOKING', 'RESCHEDULE_BOOKING'],
        partial: ['–Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å', '—É—Ç–æ—á–Ω–∏—Ç–µ']
      },
      PRICE_INFO: {
        success: ['—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '—Ä—É–±', '‚ÇΩ'],
        actions: ['SHOW_PRICES'],
        partial: []
      },
      SCHEDULE_INFO: {
        success: ['—Ä–∞–±–æ—Ç–∞', '–≥—Ä–∞—Ñ–∏–∫', '–≤—Ä–µ–º—è', '–æ—Ç–∫—Ä—ã—Ç'],
        actions: ['CHECK_STAFF_SCHEDULE', 'GET_INFO'],
        partial: []
      },
      GENERAL_INFO: {
        success: ['–ø–æ–º–æ—á—å', '–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å'],
        actions: ['GET_INFO'],
        partial: []
      }
    };
    
    const intentCriteria = criteria[intent] || criteria.GENERAL_INFO;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    const hasSuccessWords = intentCriteria.success.some(word => lastAiResponse.includes(word));
    const hasSuccessActions = intentCriteria.actions.some(action => allActions.includes(action));
    const hasPartialSuccess = intentCriteria.partial.some(word => lastAiResponse.includes(word));
    
    if (hasSuccessWords || hasSuccessActions) {
      return { status: 'SUCCESS', confidence: 90 };
    } else if (hasPartialSuccess) {
      return { status: 'PARTIAL', confidence: 60 };
    } else if (lastAiResponse.includes('–æ—à–∏–±–∫') || lastAiResponse.includes('–Ω–µ –º–æ–≥—É')) {
      return { status: 'FAILED', confidence: 90 };
    } else {
      return { status: 'UNCLEAR', confidence: 30 };
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–æ–≤—ã–º AI
   */
  async replayDialog(dialog) {
    console.log(`\n${colors.cyan}${'='.repeat(60)}${colors.reset}`);
    console.log(`${colors.bright}üìû –¢–µ—Å—Ç–∏—Ä—É—é –¥–∏–∞–ª–æ–≥: ${dialog.phone}${colors.reset}`);
    console.log(`${colors.gray}–°–æ–æ–±—â–µ–Ω–∏–π: ${dialog.messageCount}, –ë—ã–ª–∞ –∑–∞–ø–∏—Å—å: ${dialog.hasBooking ? '–î–∞' : '–ù–µ—Ç'}${colors.reset}`);
    console.log(`${colors.cyan}${'='.repeat(60)}${colors.reset}\n`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–∞
    const intent = this.analyzeDialogIntent(dialog.messages);
    console.log(`${colors.yellow}üéØ –¶–µ–ª—å –¥–∏–∞–ª–æ–≥–∞: ${intent}${colors.reset}\n`);
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
    const testPhone = `7999${Date.now().toString().slice(-7)}`;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await this.clearContext(testPhone);
    
    const newMessages = [];
    let context = await this.aiAdmin.loadFullContext(testPhone, this.companyId);
    context.phone = testPhone;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥
    for (let i = 0; i < dialog.messages.length; i++) {
      const msg = dialog.messages[i];
      
      if (!msg.user) continue;
      
      console.log(`${colors.blue}üë§ –ö–ª–∏–µ–Ω—Ç:${colors.reset} ${msg.user}`);
      console.log(`${colors.gray}   (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${msg.ai?.substring(0, 80)}...)${colors.reset}`);
      
      try {
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ context –∏–º–µ–µ—Ç phone
        if (!context.phone) {
          context.phone = testPhone;
        }
        
        const startTime = Date.now();
        const result = await this.aiAdmin.processMessage(msg.user, context);
        const processingTime = Date.now() - startTime;
        
        console.log(`${colors.green}ü§ñ AI Admin:${colors.reset} ${result.response}`);
        
        if (result.executedCommands && result.executedCommands.length > 0) {
          const commands = result.executedCommands.map(c => c.command || c.action).join(', ');
          console.log(`${colors.magenta}   ‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã: ${commands}${colors.reset}`);
        }
        
        console.log(`${colors.gray}   ‚è±Ô∏è –í—Ä–µ–º—è: ${processingTime}ms${colors.reset}\n`);
        
        newMessages.push({
          user: msg.user,
          ai: result.response,
          actions: result.executedCommands || [],
          processingTime
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context = await this.aiAdmin.loadFullContext(testPhone, this.companyId);
        context.phone = testPhone;
        
      } catch (error) {
        console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}\n`);
        newMessages.push({
          user: msg.user,
          ai: `–û—à–∏–±–∫–∞: ${error.message}`,
          error: true
        });
      }
    }
    
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const originalSuccess = this.evaluateDialogSuccess(dialog.messages, intent);
    const newSuccess = this.evaluateDialogSuccess(newMessages, intent);
    
    console.log(`${colors.cyan}${'‚îÄ'.repeat(60)}${colors.reset}`);
    console.log(`${colors.bright}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê${colors.reset}`);
    console.log(`${colors.cyan}${'‚îÄ'.repeat(60)}${colors.reset}\n`);
    
    console.log(`${colors.yellow}–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥:${colors.reset}`);
    console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(originalSuccess.status)} ${originalSuccess.status}`);
    console.log(`  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${originalSuccess.confidence}%`);
    
    console.log(`\n${colors.green}–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (AI Admin):${colors.reset}`);
    console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(newSuccess.status)} ${newSuccess.status}`);
    console.log(`  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${newSuccess.confidence}%`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      dialogId: dialog.id,
      phone: dialog.phone,
      intent,
      originalSuccess,
      newSuccess,
      improved: newSuccess.confidence > originalSuccess.confidence,
      messages: {
        original: dialog.messages,
        new: newMessages
      }
    };
    
    this.results.push(result);
    
    return result;
  }

  /**
   * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   */
  async interactiveMode(dialogs) {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    console.log(`\n${colors.bright}üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú${colors.reset}`);
    console.log(`${colors.gray}–ö–æ–º–∞–Ω–¥—ã: [n]ext, [p]revious, [r]eplay, [q]uit, [1-9] –≤—ã–±–æ—Ä –¥–∏–∞–ª–æ–≥–∞${colors.reset}\n`);
    
    let currentIndex = 0;
    
    while (true) {
      const dialog = dialogs[currentIndex];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
      console.log(`\n${colors.cyan}–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:${colors.reset}`);
      for (let i = 0; i < Math.min(10, dialogs.length); i++) {
        const d = dialogs[i];
        const marker = i === currentIndex ? 'üëâ' : '  ';
        console.log(`${marker} ${i + 1}. ${d.phone} (${d.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
      console.log(`\n${colors.yellow}–í—ã–±—Ä–∞–Ω –¥–∏–∞–ª–æ–≥ ${currentIndex + 1}:${colors.reset}`);
      this.showDialogPreview(dialog);
      
      // –ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—É
      const command = await this.prompt('\n–ö–æ–º–∞–Ω–¥–∞: ');
      
      if (command === 'q' || command === 'quit') {
        break;
      } else if (command === 'n' || command === 'next') {
        currentIndex = (currentIndex + 1) % dialogs.length;
      } else if (command === 'p' || command === 'previous') {
        currentIndex = (currentIndex - 1 + dialogs.length) % dialogs.length;
      } else if (command === 'r' || command === 'replay') {
        await this.replayDialog(dialog);
        await this.prompt('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
      } else if (/^\d+$/.test(command)) {
        const num = parseInt(command) - 1;
        if (num >= 0 && num < dialogs.length) {
          currentIndex = num;
        }
      }
    }
    
    this.rl.close();
  }

  /**
   * –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –¥–∏–∞–ª–æ–≥–∞
   */
  showDialogPreview(dialog) {
    const intent = this.analyzeDialogIntent(dialog.messages);
    const success = this.evaluateDialogSuccess(dialog.messages, intent);
    
    console.log(`${colors.gray}–¢–µ–ª–µ—Ñ–æ–Ω: ${dialog.phone}`);
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–π: ${dialog.messageCount}`);
    console.log(`–¶–µ–ª—å: ${intent}`);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${this.getStatusEmoji(success.status)} ${success.status} (${success.confidence}%)${colors.reset}`);
    
    console.log(`\n${colors.cyan}–ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:${colors.reset}`);
    for (let i = 0; i < Math.min(3, dialog.messages.length); i++) {
      const msg = dialog.messages[i];
      console.log(`${colors.blue}–ö–ª–∏–µ–Ω—Ç:${colors.reset} ${msg.user?.substring(0, 60)}...`);
      console.log(`${colors.green}AI:${colors.reset} ${msg.ai?.substring(0, 60)}...`);
      if (i < 2) console.log('');
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  async clearContext(phone) {
    try {
      const redis = require('../src/database/redis-factory').getClient('context');
      const key = `context:${phone}:${this.companyId}`;
      await redis.del(key);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    }
  }

  getStatusEmoji(status) {
    const emojis = {
      SUCCESS: '‚úÖ',
      PARTIAL: '‚ö†Ô∏è',
      FAILED: '‚ùå',
      UNCLEAR: '‚ùì'
    };
    return emojis[status] || '‚ùì';
  }

  prompt(question) {
    return new Promise(resolve => {
      this.rl.question(question, resolve);
    });
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async autoMode(dialogs, limit = 5) {
    console.log(`\n${colors.bright}ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï${colors.reset}`);
    console.log(`–ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ${limit} –¥–∏–∞–ª–æ–≥–æ–≤\n`);
    
    const testDialogs = dialogs.slice(0, limit);
    
    for (let i = 0; i < testDialogs.length; i++) {
      console.log(`\n${colors.bright}[${i + 1}/${limit}]${colors.reset}`);
      await this.replayDialog(testDialogs[i]);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.showSummary();
  }

  /**
   * –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  showSummary() {
    console.log(`\n${colors.bright}${'='.repeat(60)}${colors.reset}`);
    console.log(`${colors.bright}üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê${colors.reset}`);
    console.log(`${colors.bright}${'='.repeat(60)}${colors.reset}\n`);
    
    const stats = {
      total: this.results.length,
      improved: this.results.filter(r => r.improved).length,
      byIntent: {},
      byStatus: {
        SUCCESS: 0,
        PARTIAL: 0,
        FAILED: 0,
        UNCLEAR: 0
      }
    };
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const result of this.results) {
      // –ü–æ –∏–Ω—Ç–µ–Ω—Ç–∞–º
      if (!stats.byIntent[result.intent]) {
        stats.byIntent[result.intent] = {
          total: 0,
          success: 0
        };
      }
      stats.byIntent[result.intent].total++;
      if (result.newSuccess.status === 'SUCCESS') {
        stats.byIntent[result.intent].success++;
      }
      
      // –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
      stats.byStatus[result.newSuccess.status]++;
    }
    
    console.log(`${colors.cyan}–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
    console.log(`  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${stats.total}`);
    console.log(`  ‚Ä¢ –£–ª—É—á—à–µ–Ω–æ: ${stats.improved} (${Math.round(stats.improved/stats.total*100)}%)`);
    
    console.log(`\n${colors.cyan}–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:${colors.reset}`);
    for (const [status, count] of Object.entries(stats.byStatus)) {
      const percent = Math.round(count / stats.total * 100);
      console.log(`  ${this.getStatusEmoji(status)} ${status}: ${count} (${percent}%)`);
    }
    
    console.log(`\n${colors.cyan}–ü–æ —Ü–µ–ª—è–º –¥–∏–∞–ª–æ–≥–æ–≤:${colors.reset}`);
    for (const [intent, data] of Object.entries(stats.byIntent)) {
      const successRate = Math.round(data.success / data.total * 100);
      console.log(`  ‚Ä¢ ${intent}: ${data.success}/${data.total} —É—Å–ø–µ—à–Ω–æ (${successRate}%)`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.saveResults();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async saveResults() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const dir = path.join(__dirname, '../test-data/scenario-results');
    await fs.mkdir(dir, { recursive: true });
    
    const filename = path.join(dir, `test-results-${timestamp}.json`);
    await fs.writeFile(filename, JSON.stringify(this.results, null, 2));
    
    console.log(`\n${colors.green}‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filename}${colors.reset}`);
  }
}

// CLI
async function main() {
  const tester = new RealScenarioTester();
  
  const args = process.argv.slice(2);
  const mode = args[0] || 'auto';
  const limit = parseInt(args[1]) || 5;
  
  if (args.includes('-h') || args.includes('--help')) {
    console.log(`
Real Scenario Tester –¥–ª—è AI Admin

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node test-real-scenarios.js [mode] [limit]

–†–µ–∂–∏–º—ã:
  auto [N]        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
  interactive     - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤—ã–±–æ—Ä–æ–º –¥–∏–∞–ª–æ–≥–æ–≤
  
–ü—Ä–∏–º–µ—Ä—ã:
  node test-real-scenarios.js                # –ê–≤—Ç–æ-—Ç–µ—Å—Ç 5 –¥–∏–∞–ª–æ–≥–æ–≤
  node test-real-scenarios.js auto 10        # –ê–≤—Ç–æ-—Ç–µ—Å—Ç 10 –¥–∏–∞–ª–æ–≥–æ–≤  
  node test-real-scenarios.js interactive    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    `);
    process.exit(0);
  }
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    const dialogs = await tester.loadRealDialogs();
    
    if (mode === 'interactive') {
      await tester.interactiveMode(dialogs);
    } else {
      await tester.autoMode(dialogs, limit);
    }
    
  } catch (error) {
    console.error(`\n${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    console.error(error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { RealScenarioTester };