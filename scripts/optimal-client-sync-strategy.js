#!/usr/bin/env node
/**
 * üéØ OPTIMAL CLIENT SYNC STRATEGY
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –ª–∏–º–∏—Ç—ã YClients –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
 * –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∏–∑–∏—Ç–æ–≤
 * 
 * API LIMITS:
 * - 200 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É
 * - 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É  
 * - –ú–∏–Ω–∏–º—É–º 250ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
 * 
 * CURRENT STATUS:
 * - –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: 100 –∫–ª–∏–µ–Ω—Ç–æ–≤
 * - –û—Å—Ç–∞–ª–æ—Å—å: 900 –∫–ª–∏–µ–Ω—Ç–æ–≤
 * - –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç: ~0.5 —Å–µ–∫ + 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ = 800ms
 */

const syncConfig = require('../src/config/sync-config');

class OptimalSyncStrategy {
  constructor() {
    this.API_LIMITS = {
      REQUESTS_PER_MINUTE: 200,
      REQUESTS_PER_SECOND: 5,
      MIN_DELAY_MS: 250,
      VISIT_SYNC_DELAY_MS: 300,
      SAFE_MARGIN: 0.8 // 80% –æ—Ç –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    };
    
    this.CURRENT_STATUS = {
      TOTAL_CLIENTS: 1000,
      SYNCED_CLIENTS: 100,
      REMAINING_CLIENTS: 900,
      TIME_PER_CLIENT_MS: 800 // 0.5s processing + 0.3s delay
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π
   */
  calculateOptimalBatch() {
    console.log('üéØ CALCULATING OPTIMAL BATCH STRATEGY');
    console.log('=====================================\n');

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã (80% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
    const safeRequestsPerMinute = Math.floor(this.API_LIMITS.REQUESTS_PER_MINUTE * this.API_LIMITS.SAFE_MARGIN);
    const safeRequestsPerSecond = Math.floor(this.API_LIMITS.REQUESTS_PER_SECOND * this.API_LIMITS.SAFE_MARGIN);
    
    console.log(`üìä API Limits Analysis:`);
    console.log(`   Raw limits: ${this.API_LIMITS.REQUESTS_PER_MINUTE}/min, ${this.API_LIMITS.REQUESTS_PER_SECOND}/sec`);
    console.log(`   Safe limits: ${safeRequestsPerMinute}/min, ${safeRequestsPerSecond}/sec`);
    console.log(`   Min delay: ${this.API_LIMITS.MIN_DELAY_MS}ms between requests\n`);

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    const timePerClientSec = this.CURRENT_STATUS.TIME_PER_CLIENT_MS / 1000;
    const clientsPerMinute = Math.floor(60 / timePerClientSec);
    const optimalBatchSize = Math.min(safeRequestsPerMinute, clientsPerMinute, 100); // –ù–µ –±–æ–ª—å—à–µ 100 –∑–∞ —Ä–∞–∑

    console.log(`‚è±Ô∏è Time Analysis:`);
    console.log(`   Time per client: ${timePerClientSec}s`);
    console.log(`   Max clients per minute: ${clientsPerMinute}`);
    console.log(`   Optimal batch size: ${optimalBatchSize}\n`);

    return {
      batchSize: optimalBatchSize,
      safeRequestsPerMinute,
      clientsPerMinute,
      timePerClientSec
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  createSyncSchedule() {
    console.log('üìÖ SYNC SCHEDULE CALCULATION');
    console.log('=============================\n');

    const { batchSize, clientsPerMinute } = this.calculateOptimalBatch();
    
    const remainingClients = this.CURRENT_STATUS.REMAINING_CLIENTS;
    const totalBatches = Math.ceil(remainingClients / batchSize);
    const timePerBatchMinutes = Math.ceil(batchSize / clientsPerMinute);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    const bufferTimeMinutes = 2;
    const totalTimePerBatch = timePerBatchMinutes + bufferTimeMinutes;
    
    const totalTimeHours = Math.ceil((totalBatches * totalTimePerBatch) / 60);
    const totalTimeDays = Math.ceil(totalTimeHours / 24);

    console.log(`üìà Schedule Analysis:`);
    console.log(`   Remaining clients: ${remainingClients}`);
    console.log(`   Batch size: ${batchSize} clients`);
    console.log(`   Total batches needed: ${totalBatches}`);
    console.log(`   Time per batch: ${timePerBatchMinutes}min + ${bufferTimeMinutes}min buffer = ${totalTimePerBatch}min`);
    console.log(`   Total time: ~${totalTimeHours} hours (~${totalTimeDays} days)\n`);

    return {
      batchSize,
      totalBatches,
      timePerBatchMinutes: totalTimePerBatch,
      totalTimeHours,
      totalTimeDays
    };
  }

  /**
   * –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  suggestStrategies() {
    console.log('üí° SYNC STRATEGIES');
    console.log('==================\n');

    const schedule = this.createSyncSchedule();
    
    console.log(`üöÄ STRATEGY 1: Aggressive (Fast but risky)`);
    console.log(`   Batch size: 80 clients`);
    console.log(`   Frequency: Every 10 minutes`);
    console.log(`   Total time: ~2 hours`);
    console.log(`   Risk: High (near API limits)`);
    console.log(`   Command: node scripts/incremental-client-sync.js --batch-size=80 --interval=10\n`);

    console.log(`‚öñÔ∏è STRATEGY 2: Balanced (Recommended)`);
    console.log(`   Batch size: ${schedule.batchSize} clients`);
    console.log(`   Frequency: Every ${schedule.timePerBatchMinutes} minutes`);
    console.log(`   Total time: ~${schedule.totalTimeHours} hours`);
    console.log(`   Risk: Low (80% of API limits)`);
    console.log(`   Command: node scripts/incremental-client-sync.js --batch-size=${schedule.batchSize} --interval=${schedule.timePerBatchMinutes}\n`);

    console.log(`üêå STRATEGY 3: Conservative (Slow but very safe)`);
    console.log(`   Batch size: 50 clients`);
    console.log(`   Frequency: Every 30 minutes`);
    console.log(`   Total time: ~9 hours`);
    console.log(`   Risk: Very low (50% of API limits)`);
    console.log(`   Command: node scripts/incremental-client-sync.js --batch-size=50 --interval=30\n`);

    console.log(`üåô STRATEGY 4: Night Mode (Background sync)`);
    console.log(`   Batch size: 25 clients`);
    console.log(`   Frequency: Every 60 minutes`);
    console.log(`   Total time: ~36 hours (1.5 days)`);
    console.log(`   Risk: Minimal (25% of API limits)`);
    console.log(`   Command: node scripts/incremental-client-sync.js --batch-size=25 --interval=60 --start-at=22:00\n`);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  showMonitoringCommands() {
    console.log('üìä MONITORING COMMANDS');
    console.log('======================\n');
    
    console.log(`# Check sync progress`);
    console.log(`node scripts/manual-sync.js status\n`);
    
    console.log(`# Monitor API usage in real-time`);
    console.log(`tail -f ~/.pm2/logs/sync-process-out.log | grep "API"\n`);
    
    console.log(`# Check database records`);
    console.log(`# Use MCP Supabase to query:`);
    console.log(`@supabase query_table table:clients select:"count(*)"\n`);
    
    console.log(`# Emergency stop`);
    console.log(`pkill -f "incremental-client-sync"`);
    console.log(`pm2 stop sync-process\n`);
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  runFullAnalysis() {
    console.log('üéØ OPTIMAL CLIENT SYNC STRATEGY FOR 1000 CLIENTS');
    console.log('=================================================\n');
    
    this.calculateOptimalBatch();
    this.createSyncSchedule();
    this.suggestStrategies();
    this.showMonitoringCommands();
    
    console.log('‚úÖ Analysis complete! Choose your preferred strategy above.');
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
  const strategy = new OptimalSyncStrategy();
  strategy.runFullAnalysis();
}

module.exports = { OptimalSyncStrategy };