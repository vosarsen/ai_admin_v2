#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/sync-visits.js                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
 *   node scripts/sync-visits.js --limit 10         # –¢–æ–ª—å–∫–æ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤
 *   node scripts/sync-visits.js --vip              # –¢–æ–ª—å–∫–æ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
 *   node scripts/sync-visits.js --min-visits 5     # –ö–ª–∏–µ–Ω—Ç—ã —Å 5+ –≤–∏–∑–∏—Ç–∞–º–∏
 */

require('dotenv').config();
const VisitsSync = require('../src/sync/visits-sync');
const logger = require('../src/utils/logger').child({ module: 'sync-visits-script' });

async function main() {
  try {
    logger.info('üöÄ Starting visits synchronization script...');
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const options = {};
    
    for (let i = 0; i < args.length; i++) {
      switch (args[i]) {
        case '--limit':
        case '-l':
          options.limit = parseInt(args[++i]) || 10;
          break;
        case '--vip':
        case '-v':
          options.onlyVip = true;
          break;
        case '--min-visits':
        case '-m':
          options.minVisits = parseInt(args[++i]) || 1;
          break;
        case '--help':
        case '-h':
          console.log(`
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –∏–∑ YClients –≤ Supabase

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/sync-visits.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --limit, -l <—á–∏—Å–ª–æ>      –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  --vip, -v                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ VIP –∏ Gold –∫–ª–∏–µ–Ω—Ç–æ–≤
  --min-visits, -m <—á–∏—Å–ª–æ> –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)
  --help, -h               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/sync-visits.js                    # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
  node scripts/sync-visits.js --limit 10         # –ü–µ—Ä–≤—ã–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤
  node scripts/sync-visits.js --vip              # –¢–æ–ª—å–∫–æ VIP
  node scripts/sync-visits.js --min-visits 5     # –ö–ª–∏–µ–Ω—Ç—ã —Å 5+ –≤–∏–∑–∏—Ç–∞–º–∏
  node scripts/sync-visits.js -l 20 -m 10        # 20 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 10+ –≤–∏–∑–∏—Ç–∞–º–∏
          `);
          process.exit(0);
      }
    }
    
    logger.info('üìã Sync options:', options);
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const visitsSync = new VisitsSync();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const result = await visitsSync.syncAll(options);
    
    if (result.success) {
      logger.info('‚úÖ Synchronization completed successfully!', {
        clientsProcessed: result.clientsProcessed,
        visitsProcessed: result.visitsProcessed,
        errors: result.errors,
        duration: `${Math.round(result.duration / 1000)} seconds`
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await visitsSync.updateSyncStats();
      
    } else {
      logger.error('‚ùå Synchronization failed:', result.error);
      process.exit(1);
    }
    
  } catch (error) {
    logger.error('‚ùå Fatal error in sync script:', {
      error: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().then(() => {
  logger.info('üëã Script finished');
  process.exit(0);
}).catch(error => {
  logger.error('Fatal error:', error);
  process.exit(1);
});