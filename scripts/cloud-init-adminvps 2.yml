#!/bin/bash
#cloud-config
# AdminVPS Cloud-Init Configuration
# Автоматическая настройка сервера для AI Admin v2
#
# ИСПОЛЬЗОВАНИЕ:
# 1. При создании сервера на AdminVPS вставьте этот скрипт в поле "Cloud-init"
# 2. ОБЯЗАТЕЛЬНО замените переменные в секции "CONFIGURATION" ниже
# 3. После создания сервера подождите 5-10 минут для завершения установки
# 4. SSH в сервер: ssh root@YOUR_SERVER_IP
# 5. Проверьте статус: cat /var/log/cloud-init-output.log
#
# ВАЖНО: Этот скрипт предполагает Ubuntu 22.04 LTS

# ============================================================================
# CONFIGURATION - ЗАМЕНИТЕ ЭТИ ЗНАЧЕНИЯ ПЕРЕД ИСПОЛЬЗОВАНИЕМ!
# ============================================================================

# GitHub репозиторий (ОБЯЗАТЕЛЬНО укажите ваш приватный репозиторий)
GITHUB_REPO="https://github.com/YOUR_USERNAME/ai_admin_v2.git"
GITHUB_TOKEN="YOUR_GITHUB_TOKEN"  # Personal Access Token для приватного репо

# SSH ключи для доступа (ОБЯЗАТЕЛЬНО замените на свой публичный ключ)
SSH_PUBLIC_KEY="ssh-ed25519 AAAAC3... your-key-comment"

# Домен для SSL (опционально, можно оставить пустым)
DOMAIN=""  # Например: bot.yourdomain.com

# Telegram для уведомлений (опционально)
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""

# ============================================================================
# CLOUD-INIT SCRIPT - НЕ РЕДАКТИРУЙТЕ НИЖЕ ЭТОЙ ЛИНИИ
# ============================================================================

set -e
exec > >(tee /var/log/cloud-init-custom.log)
exec 2>&1

echo "============================================"
echo "🚀 AI Admin v2 - Cloud-Init Setup"
echo "============================================"
echo "Start time: $(date)"
echo ""

# Функция для отправки уведомлений в Telegram
send_telegram() {
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$1" \
            -d parse_mode="HTML" > /dev/null 2>&1 || true
    fi
}

send_telegram "🚀 <b>AdminVPS Setup Started</b>%0AServer: $(hostname)%0AIP: $(hostname -I | awk '{print $1}')"

# 1. Обновление системы
echo "📦 Step 1/10: Updating system packages..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

# 2. Установка базовых пакетов
echo "🔧 Step 2/10: Installing base packages..."
apt-get install -y \
    curl \
    wget \
    git \
    nginx \
    certbot \
    python3-certbot-nginx \
    redis-server \
    build-essential \
    software-properties-common \
    ufw \
    htop \
    vim \
    net-tools \
    unzip

# 3. Установка Node.js 18.x
echo "📗 Step 3/10: Installing Node.js 18..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs

# Проверка версии Node.js
node --version
npm --version

# 4. Установка PM2
echo "🔄 Step 4/10: Installing PM2..."
npm install -g pm2
pm2 install pm2-logrotate
pm2 set pm2-logrotate:max_size 100M
pm2 set pm2-logrotate:retain 20
pm2 set pm2-logrotate:compress true

# 5. Настройка Redis
echo "🔐 Step 5/10: Configuring Redis..."
REDIS_PASSWORD=$(openssl rand -base64 32)

# Backup оригинальной конфигурации
cp /etc/redis/redis.conf /etc/redis/redis.conf.backup

# Настройка Redis для production
cat >> /etc/redis/redis.conf << 'REDIS_EOF'

# AI Admin Production Settings
requirepass REDIS_PASSWORD_PLACEHOLDER
maxmemory 2gb
maxmemory-policy allkeys-lru
bind 127.0.0.1
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir /var/lib/redis
REDIS_EOF

# Замена пароля
sed -i "s/REDIS_PASSWORD_PLACEHOLDER/$REDIS_PASSWORD/" /etc/redis/redis.conf

systemctl restart redis-server
systemctl enable redis-server

# Сохранение пароля Redis
echo "$REDIS_PASSWORD" > /root/.redis_password
chmod 600 /root/.redis_password

echo "✅ Redis configured with password saved to /root/.redis_password"

# 6. Создание директорий и пользователя
echo "👤 Step 6/10: Creating directories and user..."

# Создание пользователя ai-admin (если не существует)
if ! id -u ai-admin > /dev/null 2>&1; then
    useradd -r -m -s /bin/bash ai-admin
fi

# Создание директорий
mkdir -p /opt/ai-admin
mkdir -p /backups/ai-admin
mkdir -p /var/log/ai-admin

chown -R ai-admin:ai-admin /opt/ai-admin
chown -R ai-admin:ai-admin /backups/ai-admin
chown -R ai-admin:ai-admin /var/log/ai-admin

# 7. Настройка SSH
echo "🔑 Step 7/10: Configuring SSH..."

# Добавление SSH ключа для root
mkdir -p /root/.ssh
chmod 700 /root/.ssh
echo "$SSH_PUBLIC_KEY" >> /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys

# Настройка SSH для безопасности
sed -i 's/#PermitRootLogin yes/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
systemctl restart sshd

echo "✅ SSH configured (key-based auth only)"

# 8. Настройка Firewall
echo "🔥 Step 8/10: Configuring firewall..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp comment 'SSH'
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'
ufw --force enable

echo "✅ Firewall configured"

# 9. Клонирование репозитория
echo "📦 Step 9/10: Cloning repository..."

if [ -n "$GITHUB_TOKEN" ] && [ "$GITHUB_REPO" != "https://github.com/YOUR_USERNAME/ai_admin_v2.git" ]; then
    # Замена URL для использования токена
    REPO_URL=$(echo $GITHUB_REPO | sed "s|https://|https://${GITHUB_TOKEN}@|")

    su - ai-admin -c "cd /opt/ai-admin && git clone $REPO_URL ."

    # Настройка git для сохранения credentials
    su - ai-admin -c "cd /opt/ai-admin && git config credential.helper store"

    echo "✅ Repository cloned"
else
    echo "⚠️  GITHUB_REPO or GITHUB_TOKEN not configured - skipping git clone"
    echo "   You need to manually clone the repository later"
fi

# 10. Установка зависимостей
echo "📚 Step 10/10: Installing dependencies..."

if [ -d "/opt/ai-admin/package.json" ]; then
    su - ai-admin -c "cd /opt/ai-admin && npm install --production"
    echo "✅ Dependencies installed"
else
    echo "⚠️  package.json not found - skip npm install"
fi

# Создание swap файла (2GB)
echo "💾 Creating swap file..."
if [ ! -f /swapfile ]; then
    fallocate -l 2G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
    echo "✅ Swap file created (2GB)"
fi

# Создание базовой конфигурации Nginx
echo "🌐 Creating Nginx configuration..."

cat > /etc/nginx/sites-available/ai-admin << 'NGINX_EOF'
server {
    listen 80;
    server_name _;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts для долгих AI запросов
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://localhost:3000/health;
        access_log off;
    }
}
NGINX_EOF

ln -sf /etc/nginx/sites-available/ai-admin /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

nginx -t && systemctl restart nginx
systemctl enable nginx

echo "✅ Nginx configured"

# Настройка автоматических обновлений безопасности
echo "🔒 Configuring automatic security updates..."
apt-get install -y unattended-upgrades
dpkg-reconfigure -plow unattended-upgrades

# Создание скрипта для ежедневного бэкапа
cat > /opt/ai-admin/backup.sh << 'BACKUP_EOF'
#!/bin/bash
# Ежедневный бэкап

BACKUP_DIR="/backups/ai-admin"
DATE=$(date +%Y%m%d_%H%M%S)

# Бэкап Redis
redis-cli --pass $(cat /root/.redis_password) SAVE
cp /var/lib/redis/dump.rdb "$BACKUP_DIR/redis_$DATE.rdb"

# Бэкап Baileys sessions
tar -czf "$BACKUP_DIR/baileys_sessions_$DATE.tar.gz" /opt/ai-admin/baileys_sessions/ 2>/dev/null || true

# Бэкап .env файлов
tar -czf "$BACKUP_DIR/env_$DATE.tar.gz" /opt/ai-admin/.env* 2>/dev/null || true

# Удаление старых бэкапов (старше 7 дней)
find "$BACKUP_DIR" -name "*.rdb" -mtime +7 -delete
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete

echo "Backup completed: $DATE"
BACKUP_EOF

chmod +x /opt/ai-admin/backup.sh

# Добавление в cron (ежедневно в 3:00)
(crontab -l 2>/dev/null; echo "0 3 * * * /opt/ai-admin/backup.sh >> /var/log/ai-admin/backup.log 2>&1") | crontab -

# Создание README с инструкциями
cat > /root/SETUP_COMPLETE.txt << 'README_EOF'
╔════════════════════════════════════════════════════════════════╗
║                  🎉 AI Admin v2 Setup Complete!                ║
╚════════════════════════════════════════════════════════════════╝

📋 INSTALLATION SUMMARY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ System packages updated
✅ Node.js 18.x installed
✅ PM2 installed with log rotation
✅ Redis installed and configured
✅ Nginx installed and configured
✅ Firewall (UFW) configured
✅ SSH hardened (key-based auth only)
✅ Swap file created (2GB)
✅ Automatic security updates enabled
✅ Daily backup script configured

🔐 IMPORTANT CREDENTIALS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Redis Password: See /root/.redis_password

📂 DIRECTORY STRUCTURE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

/opt/ai-admin/          - Application directory
/backups/ai-admin/      - Daily backups
/var/log/ai-admin/      - Application logs

📝 NEXT STEPS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Configure environment variables:

   cd /opt/ai-admin
   cp .env.production .env

   Edit .env and set:
   - REDIS_PASSWORD (from /root/.redis_password)
   - Update API_BASE_URL to your server IP
   - Update WEBHOOK_URL to your server IP

2. Build TypeScript:

   npm run build

3. Start services with PM2:

   pm2 start ecosystem.config.js
   pm2 save
   pm2 startup

4. Check PM2 status:

   pm2 status
   pm2 logs

5. (Optional) Configure SSL with Let's Encrypt:

   certbot --nginx -d your-domain.com

   Or update Nginx config to use your domain

6. Test the API:

   curl http://localhost:3000/health

📊 MONITORING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# PM2 Status
pm2 status

# View logs
pm2 logs

# Monitor resources
pm2 monit

# Redis status
redis-cli -a $(cat /root/.redis_password) INFO

# Nginx status
systemctl status nginx

# Check disk space
df -h

🔧 USEFUL COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Restart all services
pm2 restart all

# Pull latest code
cd /opt/ai-admin && git pull && npm run build && pm2 restart all

# Manual backup
/opt/ai-admin/backup.sh

# View backup logs
tail -f /var/log/ai-admin/backup.log

📚 DOCUMENTATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

See /opt/ai-admin/docs/ for detailed documentation:
- ARCHITECTURE.md
- MCP_SERVERS_GUIDE.md
- TROUBLESHOOTING.md
- CLAUDE.md (Quick reference)

🆘 TROUBLESHOOTING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

If services don't start:
1. Check logs: pm2 logs --err
2. Check Redis: redis-cli -a $(cat /root/.redis_password) PING
3. Check Nginx: nginx -t
4. Check firewall: ufw status

Common issues:
- "Redis connection failed" → Check Redis password in .env
- "Port 3000 in use" → pm2 restart all
- "WhatsApp session error" → Delete baileys_sessions/ and reconnect

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

For support, check:
- /opt/ai-admin/docs/TROUBLESHOOTING.md
- Cloud-init logs: /var/log/cloud-init-output.log
- Custom setup log: /var/log/cloud-init-custom.log

Good luck! 🚀
README_EOF

# Вывод финального сообщения
echo ""
echo "============================================"
echo "✅ AI Admin v2 Setup Complete!"
echo "============================================"
echo ""
echo "📋 Next steps saved to: /root/SETUP_COMPLETE.txt"
echo ""
echo "🔐 Redis password saved to: /root/.redis_password"
echo ""
echo "📁 Application directory: /opt/ai-admin"
echo ""
echo "To continue setup:"
echo "  cat /root/SETUP_COMPLETE.txt"
echo ""
echo "Setup completed at: $(date)"

# Отправка уведомления об успешной установке
REDIS_PASS=$(cat /root/.redis_password)
SERVER_IP=$(hostname -I | awk '{print $1}')

send_telegram "✅ <b>AdminVPS Setup Complete!</b>%0A%0AServer IP: ${SERVER_IP}%0ARedis Password: ${REDIS_PASS}%0A%0ANext: Configure .env and start PM2"

echo ""
echo "🎉 All done! Server is ready for AI Admin v2"
echo ""
