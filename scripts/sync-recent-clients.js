#!/usr/bin/env node

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –ê–ö–¢–ò–í–ù–´–• –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
 * –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 */

require('dotenv').config();
const axios = require('axios');
const { supabase } = require('../src/database/supabase');

class RecentClientsSync {
  constructor() {
    this.COMPANY_ID = 962302;
    this.BATCH_SIZE = 10;
    this.bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
    this.userToken = process.env.YCLIENTS_USER_TOKEN;
    this.stats = {
      processed: 0,
      withVisits: 0,
      withoutVisits: 0,
      totalVisits: 0,
      errors: 0
    };
  }

  async syncAll() {
    const startTime = Date.now();
    
    console.log('\nüöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ò–ó–ò–¢–û–í –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ö–õ–ò–ï–ù–¢–û–í');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
      
      console.log(`üìÖ –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ ${sixMonthsAgo.toISOString().split('T')[0]}...\n`);
      
      const { data: activeClients } = await supabase
        .from('clients')
        .select('id, yclients_id, name, phone, visit_count, last_visit_date')
        .eq('company_id', this.COMPANY_ID)
        .gte('last_visit_date', sixMonthsAgo.toISOString().split('T')[0])
        .order('visit_count', { ascending: false });
      
      if (!activeClients || activeClients.length === 0) {
        console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeClients.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
      const { data: existingVisits } = await supabase
        .from('visits')
        .select('client_id');
      const alreadySynced = new Set(existingVisits?.map(v => v.client_id).filter(id => id));
      
      const clientsToSync = activeClients.filter(c => !alreadySynced.has(c.id));
      
      console.log(`üìä –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${alreadySynced.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
      console.log(`üìù –ù—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: ${clientsToSync.length} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
      
      if (clientsToSync.length === 0) {
        console.log('‚ú® –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
        return;
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞—Ç—á–∞–º–∏
      const totalBatches = Math.ceil(clientsToSync.length / this.BATCH_SIZE);
      
      for (let batchNum = 0; batchNum < totalBatches; batchNum++) {
        const batchStart = batchNum * this.BATCH_SIZE;
        const batchEnd = Math.min(batchStart + this.BATCH_SIZE, clientsToSync.length);
        const batch = clientsToSync.slice(batchStart, batchEnd);
        
        console.log(`\nüì¶ –ë–∞—Ç—á ${batchNum + 1}/${totalBatches} (–∫–ª–∏–µ–Ω—Ç—ã ${batchStart + 1}-${batchEnd}):`);
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞—Ç—á–µ
        const promises = batch.map(client => this.syncClientVisits(client));
        await Promise.all(promises);
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progress = Math.round((this.stats.processed / clientsToSync.length) * 100);
        console.log(`\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${this.stats.processed}/${clientsToSync.length} (${progress}%)`);
        console.log(`   –° –≤–∏–∑–∏—Ç–∞–º–∏: ${this.stats.withVisits}, –ë–µ–∑ –≤–∏–∑–∏—Ç–æ–≤: ${this.stats.withoutVisits}`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if (batchNum < totalBatches - 1) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n');
      console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.stats.processed}`);
      console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ${this.stats.withVisits}`);
      console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${this.stats.withoutVisits}`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${this.stats.totalVisits}`);
      console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${this.stats.errors}`);
      console.log(`  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      const { count: totalVisits } = await supabase
        .from('visits')
        .select('*', { count: 'exact', head: true });
      
      const { data: clientsWithVisits } = await supabase
        .from('visits')
        .select('client_id')
        .not('client_id', 'is', null);
      const uniqueClients = new Set(clientsWithVisits?.map(v => v.client_id)).size;
      
      console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ${totalVisits}`);
      console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ${uniqueClients}`);
      console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ${Math.round(uniqueClients / activeClients.length * 100)}%`);
      
    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  }
  
  async syncClientVisits(client) {
    this.stats.processed++;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
      const url = `https://api.yclients.com/api/v1/records/${this.COMPANY_ID}`;
      
      const response = await axios.get(url, {
        params: {
          client_id: client.yclients_id,
          start_date: '2023-12-11', // –° –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
          end_date: '2025-12-31',
          include_finance_transactions: 1,
          with_deleted: 0
        },
        headers: {
          'Authorization': `Bearer ${this.bearerToken}, User ${this.userToken}`,
          'Accept': 'application/vnd.api.v2+json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      const records = response.data?.data || [];
      const clientRecords = records.filter(r => 
        r.client?.id === client.yclients_id || 
        r.client?.id === parseInt(client.yclients_id)
      );
      
      if (clientRecords.length === 0) {
        console.log(`  ‚ö™ ${client.name}: –Ω–µ—Ç –≤–∏–∑–∏—Ç–æ–≤`);
        this.stats.withoutVisits++;
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç—ã
      const visitsToSave = clientRecords.map(record => this.formatVisit(record, client));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      const { data, error } = await supabase
        .from('visits')
        .upsert(visitsToSave, {
          onConflict: 'company_id,yclients_record_id',
          ignoreDuplicates: true
        })
        .select();
      
      if (error) {
        console.log(`  ‚ùå ${client.name}: –æ—à–∏–±–∫–∞`);
        this.stats.errors++;
      } else {
        const count = data?.length || 0;
        console.log(`  ‚úÖ ${client.name}: ${count} –≤–∏–∑–∏—Ç–æ–≤`);
        this.stats.withVisits++;
        this.stats.totalVisits += count;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        await this.updateClientData(client.id, visitsToSave);
      }
      
    } catch (error) {
      console.log(`  ‚ùå ${client.name}: ${error.message}`);
      this.stats.errors++;
    }
  }
  
  formatVisit(record, client) {
    const services = record.services || [];
    const staff = record.staff || {};
    
    return {
      yclients_visit_id: record.visit_id || null,
      yclients_record_id: record.id,
      company_id: this.COMPANY_ID,
      
      client_id: client.id,
      client_yclients_id: client.yclients_id,
      client_phone: this.normalizePhone(record.client?.phone) || client.phone || '',
      client_name: record.client?.name || client.name,
      
      staff_id: staff.id || null,
      staff_name: staff.name || '',
      staff_yclients_id: staff.id || null,
      
      services: services.map(s => ({
        id: s.id,
        name: s.title || s.name,
        cost: s.cost || s.price_min || 0,
        duration: s.duration || 0
      })),
      service_names: services.map(s => s.title || s.name),
      service_ids: services.map(s => s.id),
      services_cost: services.reduce((sum, s) => sum + (s.cost || s.price_min || 0), 0),
      
      visit_date: record.date?.split(' ')[0] || record.date,
      visit_time: record.datetime ? record.datetime.split(' ')[1]?.substring(0, 5) : null,
      datetime: record.datetime || record.date,
      duration: services.reduce((sum, s) => sum + (s.duration || 0), 0),
      
      total_cost: record.cost || 0,
      paid_amount: record.paid_full || record.paid || 0,
      discount_amount: record.discount || 0,
      tips_amount: record.tips || 0,
      payment_status: record.paid_full >= (record.cost || 0) ? 'paid_full' : 'not_paid',
      payment_method: record.payment_method || 'unknown',
      
      attendance: record.attendance || 1,
      status: record.deleted ? 'cancelled' : (record.attendance === -1 ? 'no_show' : 'completed'),
      is_online: record.online || false,
      
      comment: record.comment || null,
      rating: record.rate || null,
      review: record.review || null,
      source: record.from_url ? 'online' : 'unknown'
    };
  }
  
  normalizePhone(phone) {
    if (!phone) return null;
    return phone.toString().replace(/\D/g, '').replace(/^8/, '7');
  }
  
  async updateClientData(clientId, visits) {
    try {
      visits.sort((a, b) => new Date(b.visit_date) - new Date(a.visit_date));
      
      const visitHistory = visits.slice(0, 50).map(v => ({
        date: v.visit_date,
        time: v.visit_time,
        services: v.service_names
      }));
      
      const lastServices = visits[0]?.service_names || [];
      
      const staffCounts = {};
      visits.forEach(v => {
        if (v.staff_name) {
          staffCounts[v.staff_name] = (staffCounts[v.staff_name] || 0) + 1;
        }
      });
      const favoriteStaff = Object.entries(staffCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 3)
        .map(([name]) => name);
      
      const updateData = {
        visit_history: visitHistory,
        last_services: lastServices,
        favorite_staff_ids: favoriteStaff
      };
      
      delete updateData.id;
      
      await supabase
        .from('clients')
        .update(updateData)
        .eq('id', clientId);
      
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
const sync = new RecentClientsSync();
sync.syncAll().catch(console.error);