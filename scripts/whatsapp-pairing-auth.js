#!/usr/bin/env node

/**
 * WhatsApp Pairing Code Authentication
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ QR –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 *
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Baileys:
 * https://github.com/WhiskeySockets/Baileys
 */

const { default: makeWASocket, DisconnectReason, useMultiFileAuthState, fetchLatestBaileysVersion, makeCacheableSignalKeyStore } = require('@whiskeysockets/baileys');
const P = require('pino');
const path = require('path');
const fs = require('fs').promises;
const readline = require('readline');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function question(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise(resolve => rl.question(query, ans => {
    rl.close();
    resolve(ans);
  }));
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const COMPANY_ID = process.argv[2] || '962302';
const USE_PAIRING_CODE = true; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ QR
const REMOTE_PATH = '/opt/ai-admin';
const LOCAL_PATH = process.cwd();

async function initializeWithPairingCode() {
  log(`\n${colors.bright}üîê WhatsApp Pairing Code Authentication${colors.reset}`);
  log('=' .repeat(50));
  log(`Company ID: ${colors.cyan}${COMPANY_ID}${colors.reset}\n`);

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏
  const sessionPath = path.join(LOCAL_PATH, 'sessions', `company_${COMPANY_ID}`);
  await fs.mkdir(sessionPath, { recursive: true });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const { state, saveCreds } = await useMultiFileAuthState(sessionPath);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Baileys
  const { version } = await fetchLatestBaileysVersion();
  log(`üì¶ Using Baileys version: ${colors.cyan}${version.join('.')}${colors.reset}`);

  // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
  const sock = makeWASocket({
    version,
    logger: P({ level: 'silent' }),
    printQRInTerminal: false,
    auth: {
      creds: state.creds,
      keys: makeCacheableSignalKeyStore(state.keys, P({ level: 'silent' }))
    },
    browser: ['AI Admin Bot', 'Chrome', '1.0.0'],
    generateHighQualityLinkPreview: true,
    syncFullHistory: false,
    markOnlineOnConnect: true,
    keepAliveIntervalMs: 10_000,
    connectTimeoutMs: 60_000,
    defaultQueryTimeoutMs: 60_000,
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–¥—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  sock.ev.on('creds.update', saveCreds);

  // –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º pairing code
  if (USE_PAIRING_CODE && !sock.authState.creds.registered) {
    log(`\n${colors.yellow}üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è:${colors.reset}`);
    log(`1. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ`);
    log(`2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`);
    log(`3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"`);
    log(`4. –í—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"`);
    log(`5. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥\n`);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let phoneNumber = await question(`${colors.cyan}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79686484488): ${colors.reset}`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    phoneNumber = phoneNumber.replace(/\D/g, '');
    if (!phoneNumber.startsWith('7') && phoneNumber.length === 10) {
      phoneNumber = '7' + phoneNumber;
    }

    log(`\n‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è ${colors.bright}+${phoneNumber}${colors.reset}...`);

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º pairing code
      const code = await sock.requestPairingCode(phoneNumber);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (XXXX-XXXX)
      const formattedCode = code.match(/.{1,4}/g)?.join('-') || code;

      log(`\n${colors.bright}${colors.green}‚úÖ –ö–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω!${colors.reset}`);
      log(`\n${colors.bright}${colors.magenta}üì± –í–ê–® –ö–û–î: ${formattedCode}${colors.reset}`);
      log(`\n${colors.yellow}–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ${colors.reset}`);
      log(`${colors.yellow}–£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥${colors.reset}\n`);

    } catch (error) {
      log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: ${error.message}${colors.reset}`);

      if (error.message.includes('rate')) {
        log(`\n${colors.yellow}‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–æ–≤${colors.reset}`);
        log(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
      }

      process.exit(1);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
      // –ï—Å–ª–∏ –≤—Å–µ –∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è QR (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏ pairing code)
      log(`\n${colors.yellow}‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω QR –∫–æ–¥ (–Ω–µ –æ–∂–∏–¥–∞–ª—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ pairing code)${colors.reset}`);
    }

    if (connection === 'close') {
      const disconnectReason = lastDisconnect?.error?.output?.statusCode;
      const shouldReconnect = (disconnectReason !== DisconnectReason.loggedOut);

      log(`\n${colors.red}üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ${colors.reset}`);
      log(`–ü—Ä–∏—á–∏–Ω–∞: ${disconnectReason}`);

      if (disconnectReason === DisconnectReason.loggedOut) {
        log(`${colors.red}‚ùå –°–µ—Å—Å–∏—è —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω–∞${colors.reset}`);
        process.exit(0);
      } else if (shouldReconnect) {
        log(`${colors.yellow}üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...${colors.reset}`);
        // Baileys –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
      }
    } else if (connection === 'open') {
      log(`\n${colors.bright}${colors.green}‚úÖ WhatsApp —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!${colors.reset}`);
      log(`${colors.cyan}üì± –ù–æ–º–µ—Ä: ${sock.user?.id}${colors.reset}`);

      // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –∫–æ–ø–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await syncToServer(sessionPath);

      // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const testPhone = await question(`\n${colors.cyan}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ${colors.reset}`);

      if (testPhone) {
        try {
          const formattedPhone = formatPhoneForWhatsApp(testPhone);
          await sock.sendMessage(formattedPhone, { text: '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI Admin Bot' });
          log(`${colors.green}‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!${colors.reset}`);
        } catch (error) {
          log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}${colors.reset}`);
        }
      }

      // Graceful shutdown
      setTimeout(() => {
        log(`\n${colors.yellow}–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...${colors.reset}`);
        sock.end();
        process.exit(0);
      }, 5000);
    } else if (connection === 'connecting') {
      log(`${colors.yellow}üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...${colors.reset}`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∞)
  sock.ev.on('messages.upsert', async (m) => {
    const msg = m.messages[0];
    if (!msg.key.fromMe && m.type === 'notify') {
      log(`\n${colors.cyan}üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.key.remoteJid}${colors.reset}`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  sock.ev.on('error', (error) => {
    log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è WhatsApp
function formatPhoneForWhatsApp(phone) {
  let cleanPhone = phone.replace(/\D/g, '');

  if (!cleanPhone.startsWith('7') && cleanPhone.length === 10) {
    cleanPhone = '7' + cleanPhone;
  }

  return cleanPhone + '@s.whatsapp.net';
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function syncToServer(sessionPath) {
  log(`\n${colors.yellow}üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...${colors.reset}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await execPromise(`ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "mkdir -p ${REMOTE_PATH}/sessions/company_${COMPANY_ID}"`);

    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
    await execPromise(`scp -i ~/.ssh/id_ed25519_ai_admin -r ${sessionPath}/* root@46.149.70.219:${REMOTE_PATH}/sessions/company_${COMPANY_ID}/`);

    log(`${colors.green}‚úÖ –°–µ—Å—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä${colors.reset}`);

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API
    log(`${colors.yellow}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...${colors.reset}`);
    await execPromise(`ssh -i ~/.ssh/id_ed25519_ai_admin root@46.149.70.219 "pm2 restart ai-admin-api"`);

    log(`${colors.green}‚úÖ API —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω${colors.reset}`);

  } catch (error) {
    log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}${colors.reset}`);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    log(`\n${colors.bright}${colors.cyan}WhatsApp Pairing Code Authentication Tool${colors.reset}`);
    log(`${colors.cyan}–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã "linking new devices is not possible"${colors.reset}\n`);

    log(`${colors.yellow}‚ÑπÔ∏è –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ QR${colors.reset}`);
    log(`${colors.yellow}‚ÑπÔ∏è –û–Ω –æ–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤${colors.reset}`);
    log(`${colors.yellow}‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Baileys${colors.reset}\n`);

    await initializeWithPairingCode();

  } catch (error) {
    log(`\n${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    console.error(error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
  log(`\n${colors.yellow}–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è${colors.reset}`);
  process.exit(0);
});

process.on('unhandledRejection', (error) => {
  log(`\n${colors.red}‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main();