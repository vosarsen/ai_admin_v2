#!/usr/bin/env node

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã visits
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const logger = require('../src/utils/logger').child({ module: 'update-clients' });

class ClientsUpdater {
  constructor() {
    this.BATCH_SIZE = 50;
    this.updatedCount = 0;
    this.errorCount = 0;
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateAllClients() {
    const startTime = Date.now();
    
    try {
      logger.info('üîÑ Starting clients update from visits data...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤–∏–∑–∏—Ç—ã
      const { data: clientsWithVisits } = await supabase
        .from('visits')
        .select('client_id')
        .not('client_id', 'is', null)
        .order('client_id');
      
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ client_id
      const uniqueClientIds = [...new Set(clientsWithVisits?.map(v => v.client_id))];
      
      logger.info(`Found ${uniqueClientIds.length} clients with visits to update`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
      for (let i = 0; i < uniqueClientIds.length; i += this.BATCH_SIZE) {
        const batch = uniqueClientIds.slice(i, i + this.BATCH_SIZE);
        await this.updateClientsBatch(batch);
        
        logger.info(`Progress: ${Math.min(i + this.BATCH_SIZE, uniqueClientIds.length)}/${uniqueClientIds.length} clients`);
      }
      
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      logger.info(`‚úÖ Update completed in ${duration} seconds`, {
        updated: this.updatedCount,
        errors: this.errorCount
      });
      
      return {
        success: true,
        updated: this.updatedCount,
        errors: this.errorCount,
        duration
      };
      
    } catch (error) {
      logger.error('Update failed:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –±–∞—Ç—á –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async updateClientsBatch(clientIds) {
    const updates = [];
    
    for (const clientId of clientIds) {
      try {
        const updateData = await this.calculateClientData(clientId);
        if (updateData) {
          updates.push({
            id: clientId,
            ...updateData
          });
        }
      } catch (error) {
        logger.error(`Failed to calculate data for client ${clientId}:`, error.message);
        this.errorCount++;
      }
    }
    
    // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (updates.length > 0) {
      for (const update of updates) {
        try {
          // –£–¥–∞–ª—è–µ–º id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å id)
          const clientId = update.id;
          delete update.id;
          
          const { error } = await supabase
            .from('clients')
            .update(update)
            .eq('id', clientId);
          
          if (error) {
            logger.error(`Failed to update client ${clientId}:`, error);
            this.errorCount++;
          } else {
            this.updatedCount++;
          }
        } catch (error) {
          logger.error(`Error updating client ${clientId}:`, error.message);
          this.errorCount++;
        }
      }
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–∑–∏—Ç–æ–≤
   */
  async calculateClientData(clientId) {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    const { data: visits, error } = await supabase
      .from('visits')
      .select('*')
      .eq('client_id', clientId)
      .order('visit_date', { ascending: false });
    
    if (error || !visits || visits.length === 0) {
      return null;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ª—É–≥–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞)
    const lastVisit = visits[0];
    const last_services = lastVisit.service_names || [];
    const last_service_ids = lastVisit.service_ids || [];
    
    // –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ø-3 –ø–æ —á–∞—Å—Ç–æ—Ç–µ)
    const staffFrequency = {};
    visits.forEach(v => {
      if (v.staff_id) {
        staffFrequency[v.staff_id] = (staffFrequency[v.staff_id] || 0) + 1;
      }
    });
    
    const favorite_staff_ids = Object.entries(staffFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([staffId]) => parseInt(staffId));
    
    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è (–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–æ–≤)
    const timeSlots = visits.map(v => {
      if (v.visit_time) {
        const hour = parseInt(v.visit_time.split(':')[0]);
        if (hour < 12) return 'morning';
        if (hour < 17) return 'afternoon';
        return 'evening';
      }
      return null;
    }).filter(Boolean);
    
    const slotFrequency = {};
    timeSlots.forEach(slot => {
      slotFrequency[slot] = (slotFrequency[slot] || 0) + 1;
    });
    
    const preferred_time_slots = Object.entries(slotFrequency)
      .sort((a, b) => b[1] - a[1])
      .map(([slot]) => slot);
    
    // –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤ (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –≤–∏–∑–∏—Ç–∞—Ö)
    const visit_history = visits.slice(0, 10).map(v => ({
      date: v.visit_date,
      services: v.service_names,
      staff: v.staff_name,
      cost: v.paid_amount || v.total_cost || 0,
      id: v.yclients_record_id
    }));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const visit_count = visits.length;
    const total_spent = visits.reduce((sum, v) => sum + (v.paid_amount || v.total_cost || 0), 0);
    const average_bill = visit_count > 0 ? Math.round(total_spent / visit_count) : 0;
    
    // –î–∞—Ç—ã
    const first_visit_date = visits[visits.length - 1].visit_date;
    const last_visit_date = visits[0].visit_date;
    
    // Loyalty level –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let loyalty_level = 'New';
    if (visit_count >= 20 && total_spent >= 50000) {
      loyalty_level = 'VIP';
    } else if (visit_count >= 10 && total_spent >= 20000) {
      loyalty_level = 'Gold';
    } else if (visit_count >= 5 && total_spent >= 8000) {
      loyalty_level = 'Silver';
    } else if (visit_count >= 2) {
      loyalty_level = 'Bronze';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    const serviceFrequency = {};
    visits.forEach(v => {
      v.service_names?.forEach(service => {
        serviceFrequency[service] = (serviceFrequency[service] || 0) + 1;
      });
    });
    
    const topServices = Object.entries(serviceFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([service]) => service);
    
    const preferences = {
      top_services: topServices,
      favorite_time: preferred_time_slots[0] || null,
      visit_frequency: visit_count > 0 ? Math.round(365 / visit_count) : null, // –¥–Ω–µ–π –º–µ–∂–¥—É –≤–∏–∑–∏—Ç–∞–º–∏
      last_staff: lastVisit.staff_name,
      regular_client: visit_count >= 5
    };
    
    return {
      // –ú–∞—Å—Å–∏–≤—ã
      last_services,
      last_service_ids,
      favorite_staff_ids,
      preferred_time_slots,
      visit_history,
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      visit_count,
      total_spent,
      average_bill,
      first_visit_date,
      last_visit_date,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
      loyalty_level,
      client_segment: loyalty_level,
      preferences,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      last_sync_at: new Date().toISOString()
    };
  }
}

async function main() {
  try {
    console.log('\nüìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–û–í –ò–ó –ò–°–¢–û–†–ò–ò –í–ò–ó–ò–¢–û–í');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const { data: sample } = await supabase
      .from('clients')
      .select('last_services, favorite_staff_ids, visit_history')
      .eq('company_id', 962302)
      .gt('visit_count', 5)
      .limit(10);
    
    const emptyCount = sample?.filter(c => 
      c.last_services?.length === 0 && 
      c.favorite_staff_ids?.length === 0
    ).length || 0;
    
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${emptyCount}/${sample?.length || 0}`);
    console.log('');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updater = new ClientsUpdater();
    const result = await updater.updateAllClients();
    
    if (result.success) {
      console.log('\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log(`  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${result.updated}`);
      console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${result.errors}`);
      console.log(`  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.duration} —Å–µ–∫—É–Ω–¥`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const { data: after } = await supabase
        .from('clients')
        .select('name, last_services, favorite_staff_ids, visit_history')
        .eq('company_id', 962302)
        .not('last_services', 'is', null)
        .limit(3);
      
      if (after && after.length > 0) {
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
        after.forEach(client => {
          console.log(`\n  ${client.name}:`);
          console.log(`    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ª—É–≥–∏: ${client.last_services?.join(', ')}`);
          console.log(`    ‚Ä¢ –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: ${client.favorite_staff_ids?.length || 0} –º–∞—Å—Ç–µ—Ä–æ–≤`);
          console.log(`    ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤: ${client.visit_history?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
        });
      }
    } else {
      console.error('\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', result.error);
    }
    
  } catch (error) {
    console.error('Fatal error:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('Error:', error);
  process.exit(1);
});