#!/usr/bin/env node

import crypto from 'crypto';

const API_URL = 'http://46.149.70.219:3000';
const SECRET_KEY = 'sk_venom_webhook_3553';

async function sendMessage(phone, message) {
  const webhookPayload = {
    from: phone,
    message: message,
    timestamp: Date.now()
  };

  // Create signature
  const timestamp = Date.now().toString();
  const method = 'POST';
  const path = '/webhook/whatsapp';
  const body = JSON.stringify(webhookPayload);
  const payload = `${method}:${path}:${timestamp}:${body}`;
  const signature = crypto.createHmac('sha256', SECRET_KEY).update(payload).digest('hex');

  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: "${message}" –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`);

  try {
    const response = await fetch(`${API_URL}/webhook/whatsapp`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-signature': signature,
        'x-timestamp': timestamp
      },
      body: body
    });

    const responseData = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! Job ID: ${responseData.jobId}`);
      return responseData;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${responseData.error}`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const phone = args[0] || '79001234567';
const message = args[1] || '–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?';

sendMessage(phone, message);