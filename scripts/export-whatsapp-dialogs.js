// scripts/export-whatsapp-dialogs.js
// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

require('dotenv').config();
const { supabase } = require('../src/database/supabase');
const fs = require('fs').promises;
const path = require('path');

async function exportDialogs() {
  console.log('üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ WhatsApp...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const { data: messages, error } = await supabase
      .from('messages')
      .select(`
        id,
        phone_from,
        message_text,
        ai_response,
        intent_detected,
        commands_executed,
        created_at,
        company_id,
        processing_time_ms
      `)
      .order('created_at', { ascending: false })
      .limit(100);
    
    if (error) throw error;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–ª–æ–≥–∞–º
    const dialogs = {};
    messages.forEach(msg => {
      const phone = msg.phone_from;
      if (!dialogs[phone]) {
        dialogs[phone] = [];
      }
      dialogs[phone].push({
        time: msg.created_at,
        user: msg.message_text,
        bot: msg.ai_response,
        intent: msg.intent_detected,
        commands: msg.commands_executed,
        processingMs: msg.processing_time_ms
      });
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
    const exportDir = path.join(__dirname, '../test-data/real-dialogs');
    await fs.mkdir(exportDir, { recursive: true });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    for (const [phone, messages] of Object.entries(dialogs)) {
      const filename = `dialog_${phone.slice(-4)}_${new Date().toISOString().split('T')[0]}.json`;
      await fs.writeFile(
        path.join(exportDir, filename),
        JSON.stringify(messages, null, 2)
      );
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∏–∞–ª–æ–≥: ${filename} (${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    const report = {
      exportDate: new Date().toISOString(),
      totalDialogs: Object.keys(dialogs).length,
      totalMessages: messages.length,
      intentsDetected: {},
      commandsUsed: {},
      avgProcessingTime: 0
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    let totalTime = 0;
    let countTime = 0;
    
    messages.forEach(msg => {
      // –ò–Ω—Ç–µ–Ω—Ç—ã
      if (msg.intent_detected) {
        report.intentsDetected[msg.intent_detected] = (report.intentsDetected[msg.intent_detected] || 0) + 1;
      }
      
      // –ö–æ–º–∞–Ω–¥—ã
      if (msg.commands_executed) {
        try {
          const commands = JSON.parse(msg.commands_executed);
          commands.forEach(cmd => {
            report.commandsUsed[cmd.command] = (report.commandsUsed[cmd.command] || 0) + 1;
          });
        } catch (e) {}
      }
      
      // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (msg.processing_time_ms) {
        totalTime += msg.processing_time_ms;
        countTime++;
      }
    });
    
    report.avgProcessingTime = countTime > 0 ? Math.round(totalTime / countTime) : 0;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    await fs.writeFile(
      path.join(exportDir, 'report.json'),
      JSON.stringify(report, null, 2)
    );
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –î–∏–∞–ª–æ–≥–æ–≤: ${report.totalDialogs}`);
    console.log(`- –°–æ–æ–±—â–µ–Ω–∏–π: ${report.totalMessages}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${report.avgProcessingTime}ms`);
    console.log('\nüéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã:');
    Object.entries(report.intentsDetected).forEach(([intent, count]) => {
      console.log(`  - ${intent}: ${count}`);
    });
    console.log('\nüîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    Object.entries(report.commandsUsed).forEach(([command, count]) => {
      console.log(`  - ${command}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
exportDialogs();