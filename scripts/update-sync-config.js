#!/usr/bin/env node
/**
 * üîß SYNC CONFIG UPDATER
 * 
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API –ª–∏–º–∏—Ç–∞–º–∏ YClients
 * 
 * USAGE:
 * node scripts/update-sync-config.js [command] [options]
 * 
 * COMMANDS:
 * preset <name>     –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 * custom            –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é
 * show              –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 * reset             –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 
 * PRESETS:
 * aggressive        –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
 * balanced          –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
 * conservative      –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)
 * night             –ù–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫)
 */

const fs = require('fs');
const path = require('path');

class SyncConfigUpdater {
  constructor() {
    this.configPath = path.join(__dirname, '../src/config/sync-config.js');
    this.backupPath = path.join(__dirname, '../src/config/sync-config.backup.js');
  }

  /**
   * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getPresets() {
    return {
      aggressive: {
        name: 'Aggressive',
        description: '–ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤)',
        config: {
          API_LIMITS: {
            REQUESTS_PER_MINUTE: 200,
            REQUESTS_PER_SECOND: 5,
            MIN_DELAY_MS: 200,
            VISIT_SYNC_DELAY_MS: 250,
            BATCH_SIZE: 200,
            MAX_RETRIES: 3
          },
          CLIENTS: {
            MAX_VISITS_SYNC_PER_RUN: 100,
            SYNC_RECENT_DAYS: 30
          }
        }
      },
      
      balanced: {
        name: 'Balanced (Recommended)',
        description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (80% –æ—Ç –ª–∏–º–∏—Ç–æ–≤)',
        config: {
          API_LIMITS: {
            REQUESTS_PER_MINUTE: 160,
            REQUESTS_PER_SECOND: 4,
            MIN_DELAY_MS: 300,
            VISIT_SYNC_DELAY_MS: 400,
            BATCH_SIZE: 150,
            MAX_RETRIES: 3
          },
          CLIENTS: {
            MAX_VISITS_SYNC_PER_RUN: 75,
            SYNC_RECENT_DAYS: 60
          }
        }
      },
      
      conservative: {
        name: 'Conservative',
        description: '–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (50% –æ—Ç –ª–∏–º–∏—Ç–æ–≤)',
        config: {
          API_LIMITS: {
            REQUESTS_PER_MINUTE: 100,
            REQUESTS_PER_SECOND: 3,
            MIN_DELAY_MS: 500,
            VISIT_SYNC_DELAY_MS: 600,
            BATCH_SIZE: 100,
            MAX_RETRIES: 5
          },
          CLIENTS: {
            MAX_VISITS_SYNC_PER_RUN: 50,
            SYNC_RECENT_DAYS: 90
          }
        }
      },
      
      night: {
        name: 'Night Mode',
        description: '–ù–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (25% –æ—Ç –ª–∏–º–∏—Ç–æ–≤)',
        config: {
          API_LIMITS: {
            REQUESTS_PER_MINUTE: 50,
            REQUESTS_PER_SECOND: 2,
            MIN_DELAY_MS: 1000,
            VISIT_SYNC_DELAY_MS: 1200,
            BATCH_SIZE: 50,
            MAX_RETRIES: 5
          },
          CLIENTS: {
            MAX_VISITS_SYNC_PER_RUN: 25,
            SYNC_RECENT_DAYS: 180
          }
        }
      }
    };
  }

  /**
   * –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getCurrentConfig() {
    try {
      // –û—á–∏—â–∞–µ–º require cache
      delete require.cache[require.resolve(this.configPath)];
      return require(this.configPath);
    } catch (error) {
      console.error('‚ùå Failed to read current config:', error.message);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  createBackup() {
    try {
      if (fs.existsSync(this.configPath)) {
        fs.copyFileSync(this.configPath, this.backupPath);
        console.log(`üì¶ Backup created: ${this.backupPath}`);
        return true;
      }
    } catch (error) {
      console.error('‚ùå Failed to create backup:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  showCurrentConfig() {
    console.log('üìã CURRENT SYNC CONFIGURATION');
    console.log('==============================\n');

    const config = this.getCurrentConfig();
    if (!config) return;

    console.log('API Limits:');
    console.log(`  Requests per minute: ${config.API_LIMITS.REQUESTS_PER_MINUTE}`);
    console.log(`  Requests per second: ${config.API_LIMITS.REQUESTS_PER_SECOND}`);
    console.log(`  Min delay: ${config.API_LIMITS.MIN_DELAY_MS}ms`);
    console.log(`  Visit sync delay: ${config.API_LIMITS.VISIT_SYNC_DELAY_MS}ms`);
    console.log(`  Batch size: ${config.API_LIMITS.BATCH_SIZE}`);
    console.log(`  Max retries: ${config.API_LIMITS.MAX_RETRIES}\n`);

    console.log('Client Sync:');
    console.log(`  Max visits sync per run: ${config.CLIENTS.MAX_VISITS_SYNC_PER_RUN}`);
    console.log(`  Sync recent days: ${config.CLIENTS.SYNC_RECENT_DAYS}`);
    console.log(`  Sync visit history: ${config.CLIENTS.SYNC_VISIT_HISTORY}\n`);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
   */
  showPresets() {
    console.log('üéØ AVAILABLE PRESETS');
    console.log('====================\n');

    const presets = this.getPresets();
    Object.entries(presets).forEach(([key, preset]) => {
      console.log(`${key.toUpperCase()}: ${preset.name}`);
      console.log(`  ${preset.description}`);
      console.log(`  Max clients per run: ${preset.config.CLIENTS.MAX_VISITS_SYNC_PER_RUN}`);
      console.log(`  Min delay: ${preset.config.API_LIMITS.MIN_DELAY_MS}ms`);
      console.log(`  Command: node scripts/update-sync-config.js preset ${key}\n`);
    });
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
   */
  async applyPreset(presetName) {
    const presets = this.getPresets();
    const preset = presets[presetName];
    
    if (!preset) {
      console.error(`‚ùå Unknown preset: ${presetName}`);
      console.log('Available presets:', Object.keys(presets).join(', '));
      return false;
    }

    console.log(`üéØ Applying preset: ${preset.name}`);
    console.log(`   ${preset.description}\n`);

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if (!this.createBackup()) {
      console.error('‚ùå Failed to create backup, aborting');
      return false;
    }

    try {
      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const currentConfig = this.getCurrentConfig();
      if (!currentConfig) {
        throw new Error('Failed to read current config');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const updatedConfig = {
        ...currentConfig,
        API_LIMITS: {
          ...currentConfig.API_LIMITS,
          ...preset.config.API_LIMITS
        },
        CLIENTS: {
          ...currentConfig.CLIENTS,
          ...preset.config.CLIENTS
        }
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const configContent = this.generateConfigFile(updatedConfig);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
      fs.writeFileSync(this.configPath, configContent, 'utf8');
      
      console.log('‚úÖ Configuration updated successfully!');
      console.log(`üìÅ Config file: ${this.configPath}`);
      console.log(`üì¶ Backup saved: ${this.backupPath}\n`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.showCurrentConfig();

      console.log('üîÑ Next steps:');
      console.log('1. Restart any running sync processes');
      console.log('2. Test with: node scripts/incremental-client-sync.js --dry-run --max-batches=1');
      console.log('3. Run actual sync: node scripts/incremental-client-sync.js');

      return true;

    } catch (error) {
      console.error('‚ùå Failed to apply preset:', error.message);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      if (fs.existsSync(this.backupPath)) {
        try {
          fs.copyFileSync(this.backupPath, this.configPath);
          console.log('üîô Configuration restored from backup');
        } catch (restoreError) {
          console.error('‚ùå Failed to restore backup:', restoreError.message);
        }
      }
      
      return false;
    }
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  generateConfigFile(config) {
    return `/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YClients
 * 
 * UPDATED: ${new Date().toISOString()}
 */
module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  COMPANY_ID: process.env.YCLIENTS_COMPANY_ID || ${config.COMPANY_ID},
  
  // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ UTC+3)
  SCHEDULE: ${JSON.stringify(config.SCHEDULE, null, 4).replace(/"/g, "'")},
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
  CLIENTS: {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤
    SYNC_VISIT_HISTORY: process.env.SYNC_CLIENT_VISITS === 'true' || ${config.CLIENTS.SYNC_VISIT_HISTORY},
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Ä–∞–∑
    // (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API)
    MAX_VISITS_SYNC_PER_RUN: parseInt(process.env.MAX_VISITS_SYNC_PER_RUN) || ${config.CLIENTS.MAX_VISITS_SYNC_PER_RUN},
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    // 0 = —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö
    SYNC_RECENT_DAYS: parseInt(process.env.SYNC_RECENT_DAYS) || ${config.CLIENTS.SYNC_RECENT_DAYS},
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    MIN_VISITS_TO_SYNC: parseInt(process.env.MIN_VISITS_TO_SYNC) || ${config.CLIENTS.MIN_VISITS_TO_SYNC || 1}
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –ª–∏–º–∏—Ç–æ–≤
  API_LIMITS: {
    REQUESTS_PER_MINUTE: ${config.API_LIMITS.REQUESTS_PER_MINUTE},
    REQUESTS_PER_SECOND: ${config.API_LIMITS.REQUESTS_PER_SECOND},
    MIN_DELAY_MS: ${config.API_LIMITS.MIN_DELAY_MS},        // –ú–∏–Ω–∏–º—É–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    VISIT_SYNC_DELAY_MS: ${config.API_LIMITS.VISIT_SYNC_DELAY_MS}, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤–∏–∑–∏—Ç–æ–≤
    BATCH_SIZE: ${config.API_LIMITS.BATCH_SIZE},          // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
    MAX_RETRIES: ${config.API_LIMITS.MAX_RETRIES}
  },
  
  // –†–µ–∂–∏–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  MODES: ${JSON.stringify(config.MODES, null, 4).replace(/"/g, "'")},
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  PRIORITIES: ${JSON.stringify(config.PRIORITIES, null, 4).replace(/"/g, "'")}
};`;
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  resetToDefault() {
    if (fs.existsSync(this.backupPath)) {
      try {
        fs.copyFileSync(this.backupPath, this.configPath);
        console.log('‚úÖ Configuration reset to backup');
        this.showCurrentConfig();
        return true;
      } catch (error) {
        console.error('‚ùå Failed to reset configuration:', error.message);
        return false;
      }
    } else {
      console.error('‚ùå No backup file found');
      return false;
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  const option = process.argv[3];
  
  const updater = new SyncConfigUpdater();
  
  switch (command) {
    case 'preset':
      if (!option) {
        console.error('‚ùå Please specify preset name');
        updater.showPresets();
        return;
      }
      await updater.applyPreset(option);
      break;
      
    case 'show':
      updater.showCurrentConfig();
      break;
      
    case 'presets':
      updater.showPresets();
      break;
      
    case 'reset':
      updater.resetToDefault();
      break;
      
    default:
      console.log(`
üîß SYNC CONFIG UPDATER

USAGE:
  node scripts/update-sync-config.js <command> [options]

COMMANDS:
  preset <name>     Apply preset configuration
  show              Show current configuration  
  presets           List available presets
  reset             Reset to backup

EXAMPLES:
  node scripts/update-sync-config.js presets
  node scripts/update-sync-config.js preset balanced
  node scripts/update-sync-config.js show
  node scripts/update-sync-config.js reset
`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { SyncConfigUpdater };