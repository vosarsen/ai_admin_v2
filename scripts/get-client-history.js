#!/usr/bin/env node

const axios = require('axios');
const config = require('../src/config');
const logger = require('../src/utils/logger');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ YClients
 */

const PHONE = process.argv[2]; // –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

if (!PHONE) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/get-client-history.js +79XXXXXXXXX');
  process.exit(1);
}

async function findClientByPhone(phone) {
  try {
    const normalizedPhone = phone.replace(/\D/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    
    // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const response = await axios.get(
      `${config.yclients.apiUrl}/company/${config.yclients.companyId}/clients/search`,
      {
        headers: {
          'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
          'Accept': 'application/vnd.yclients.v2+json',
          'Content-Type': 'application/json'
        },
        params: {
          phone: normalizedPhone
        }
      }
    );

    if (response.data.success && response.data.data.length > 0) {
      return response.data.data[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    }
    
    return null;
  } catch (error) {
    logger.error('Error finding client:', error.response?.data || error.message);
    return null;
  }
}

async function getClientRecords(clientId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    const response = await axios.get(
      `${config.yclients.apiUrl}/records/${config.yclients.companyId}`,
      {
        headers: {
          'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
          'Accept': 'application/vnd.yclients.v2+json',
          'Content-Type': 'application/json'
        },
        params: {
          client_id: clientId,
          count: 50 // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
        }
      }
    );

    return response.data.data || [];
  } catch (error) {
    logger.error('Error getting client records:', error.response?.data || error.message);
    return [];
  }
}

async function getRecordsByPhone(phone) {
  try {
    const normalizedPhone = phone.replace(/\D/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞–ø—Ä—è–º—É—é
    const response = await axios.get(
      `${config.yclients.apiUrl}/records/${config.yclients.companyId}`,
      {
        headers: {
          'Authorization': `Bearer ${config.yclients.bearerToken}, User ${config.yclients.userToken}`,
          'Accept': 'application/vnd.yclients.v2+json',
          'Content-Type': 'application/json'
        },
        params: {
          phone: normalizedPhone,
          count: 100
        }
      }
    );

    return response.data.data || [];
  } catch (error) {
    logger.error('Error getting records by phone:', error.response?.data || error.message);
    return [];
  }
}

async function main() {
  console.log(`üîç –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${PHONE}`);
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  
  // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
  const client = await findClientByPhone(PHONE);
  
  let records = [];
  
  if (client) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${client.name} (ID: ${client.id})`);
    console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π –ø–æ ID –∫–ª–∏–µ–Ω—Ç–∞...');
    records = await getClientRecords(client.id);
  } else {
    console.log('‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É...');
    records = await getRecordsByPhone(PHONE);
  }
  
  if (records.length === 0) {
    console.log('\nüîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞...');
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    try {
      const today = new Date();
      const monthAgo = new Date();
      monthAgo.setMonth(monthAgo.getMonth() - 1);
      
      const response = await axios.get(
        `${config.yclients.apiUrl}/records/${config.yclients.companyId}`,
        {
          headers: {
            'Authorization': `Bearer ${config.yclients.bearerToken}${config.yclients.partnerId ? `, Partner ${config.yclients.partnerId}` : ''}, User ${config.yclients.userToken}`,
            'Accept': 'application/vnd.yclients.v2+json',
            'Content-Type': 'application/json'
          },
          params: {
            start_date: monthAgo.toISOString().split('T')[0],
            end_date: today.toISOString().split('T')[0],
            count: 300
          }
        }
      );
      
      const allRecords = response.data.data || [];
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü: ${allRecords.length}`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const normalizedSearchPhone = PHONE.replace(/\D/g, '');
      records = allRecords.filter(record => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        const clientPhone = record.client?.phone?.replace(/\D/g, '');
        const recordPhone = record.phone?.replace(/\D/g, '');
        return clientPhone === normalizedSearchPhone || recordPhone === normalizedSearchPhone;
      });
      
      if (records.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –≤–∞—à–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${records.length}`);
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏:', error.response?.data || error.message);
    }
  }
  
  if (records.length === 0) {
    console.log('\nüì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    console.log('- –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–≤');
    console.log('- –ó–∞–ø–∏—Å–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º');
    return;
  }
  
  // 3. –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é
  console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}\n`);
  
  records.forEach((record, index) => {
    console.log(`${index + 1}. –ó–∞–ø–∏—Å—å #${record.id}`);
    console.log(`   üìÖ –î–∞—Ç–∞: ${record.date}`);
    console.log(`   üë§ –ú–∞—Å—Ç–µ—Ä: ${record.staff?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`   üìã –£—Å–ª—É–≥–∏:`);
    record.services.forEach(service => {
      console.log(`      - ${service.title} (${service.cost}‚ÇΩ)`);
    });
    console.log(`   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${record.services.reduce((sum, s) => sum + s.cost, 0)}‚ÇΩ`);
    console.log(`   üìå –°—Ç–∞—Ç—É—Å: ${record.deleted ? '–û—Ç–º–µ–Ω–µ–Ω–∞' : (record.attendance === 1 ? '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª' : '–û–∂–∏–¥–∞–µ—Ç—Å—è')}`);
    console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${record.comment || '–ù–µ—Ç'}`);
    console.log('---');
  });
}

main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});