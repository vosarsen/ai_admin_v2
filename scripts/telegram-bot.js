#!/usr/bin/env node

// scripts/telegram-bot.js
// Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI Admin
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π PM2 –ø—Ä–æ—Ü–µ—Å—Å

const axios = require('axios');
const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);
const logger = require('../src/utils/logger');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8301218575:AAFRhNPuARDnkiKY2aQKbDkUWPbaSiINPpc';
const ADMIN_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '601999';
const HEALTH_URL = 'http://localhost:3000/health';

if (!BOT_TOKEN || !ADMIN_CHAT_ID) {
  console.error('Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID');
  console.error('BOT_TOKEN:', BOT_TOKEN ? 'present' : 'missing');
  console.error('ADMIN_CHAT_ID:', ADMIN_CHAT_ID ? 'present' : 'missing');
  process.exit(1);
}

class TelegramBot {
  constructor() {
    this.offset = 0;
    this.isRunning = true;
  }

  async sendMessage(chatId, text, options = {}) {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const response = await axios.post(url, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      });
      return response.data;
    } catch (error) {
      logger.error('Failed to send message:', error.message);
      return null;
    }
  }

  async getUpdates() {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`;
      const response = await axios.get(url, {
        params: {
          offset: this.offset,
          timeout: 30
        }
      });

      if (response.data.ok && response.data.result.length > 0) {
        return response.data.result;
      }
      return [];
    } catch (error) {
      logger.error('Failed to get updates:', error.message);
      return [];
    }
  }

  async handleCommand(message) {
    const chatId = message.chat.id;
    const text = message.text || '';
    const fromId = message.from.id.toString();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if (fromId !== ADMIN_CHAT_ID) {
      await this.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    const command = text.toLowerCase().split(' ')[0];

    switch (command) {
      case '/start':
      case '/help':
        await this.handleHelp(chatId);
        break;

      case '/status':
        await this.handleStatus(chatId);
        break;

      case '/health':
        await this.handleHealth(chatId);
        break;

      case '/restart':
        await this.handleRestart(chatId, text);
        break;

      case '/recover':
        await this.handleRecover(chatId, text);
        break;

      case '/logs':
        await this.handleLogs(chatId);
        break;

      case '/queue':
        await this.handleQueue(chatId);
        break;

      case '/test':
        await this.handleTest(chatId);
        break;

      default:
        if (text.startsWith('/')) {
          await this.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help');
        }
    }
  }

  async handleHelp(chatId) {
    const helpText = `
üìö <b>–ö–æ–º–∞–Ω–¥—ã AI Admin Bot</b>

/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/health - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
/restart [service] - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
/recover [type] - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
/queue - –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
/test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/restart api - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å API
/restart all - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë
/recover whatsapp - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WhatsApp
/recover full - –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
`;
    await this.sendMessage(chatId, helpText);
  }

  async handleStatus(chatId) {
    await this.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...');

    try {
      const { stdout } = await execAsync('pm2 jlist');
      const processes = JSON.parse(stdout);

      let statusText = 'üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n\n';

      for (const proc of processes) {
        const name = proc.name;
        const status = proc.pm2_env.status;
        const restarts = proc.pm2_env.restart_time;
        const memory = Math.round(proc.monit.memory / 1024 / 1024);
        const uptime = this.formatUptime(Date.now() - proc.pm2_env.pm_uptime);

        const statusIcon = status === 'online' ? '‚úÖ' : '‚ùå';
        statusText += `${statusIcon} <b>${name}</b>\n`;
        statusText += `   –°—Ç–∞—Ç—É—Å: ${status}\n`;
        statusText += `   Uptime: ${uptime}\n`;
        statusText += `   –ü–∞–º—è—Ç—å: ${memory}MB\n`;
        statusText += `   –†–µ—Å—Ç–∞—Ä—Ç—ã: ${restarts}\n\n`;
      }

      await this.sendMessage(chatId, statusText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async handleHealth(chatId) {
    await this.sendMessage(chatId, 'üè• –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...');

    try {
      const response = await axios.get(HEALTH_URL, { timeout: 10000 });
      const health = response.data;

      let healthText = `üè• <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</b>\n\n`;
      healthText += `–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${this.getStatusIcon(health.status)} ${health.status}\n\n`;

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      if (health.checks) {
        healthText += '<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n';

        // Redis
        if (health.checks.redis) {
          const redis = health.checks.redis;
          healthText += `${this.getStatusIcon(redis.status)} Redis: ${redis.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`;
          if (redis.keys) healthText += ` (${redis.keys} –∫–ª—é—á–µ–π)`;
          healthText += '\n';
        }

        // Database
        if (health.checks.database) {
          const db = health.checks.database;
          healthText += `${this.getStatusIcon(db.status)} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${db.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n`;
        }

        // WhatsApp
        if (health.checks.whatsapp) {
          const wa = health.checks.whatsapp;
          healthText += `${this.getStatusIcon(wa.status)} WhatsApp: ${wa.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`;
          if (wa.phoneNumber) healthText += ` (${wa.phoneNumber})`;
          healthText += '\n';
        }

        // Queue
        if (health.checks.queue) {
          const queue = health.checks.queue;
          healthText += `${this.getStatusIcon(queue.status)} –û—á–µ—Ä–µ–¥—å: ${queue.totalJobs} –∑–∞–¥–∞—á`;
          if (queue.pendingBatches) healthText += ` (${queue.pendingBatches} –±–∞—Ç—á–µ–π)`;
          healthText += '\n';
        }

        // Memory
        if (health.checks.memory) {
          const mem = health.checks.memory;
          healthText += `${this.getStatusIcon(mem.status)} –ü–∞–º—è—Ç—å: ${mem.rssMB}MB (${mem.percentage}%)\n`;
        }

        // Last Activity
        if (health.checks.lastActivity) {
          const activity = health.checks.lastActivity;
          healthText += `${this.getStatusIcon(activity.status)} –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity.lastMessageMinutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`;
          if (activity.activeChats) healthText += ` (${activity.activeChats} —á–∞—Ç–æ–≤)`;
          healthText += '\n';
        }
      }

      await this.sendMessage(chatId, healthText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: ${error.message}`);
    }
  }

  async handleRestart(chatId, text) {
    const parts = text.split(' ');
    const service = parts[1] || 'all';

    await this.sendMessage(chatId, `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é ${service}...`);

    try {
      const { stdout } = await execAsync(`pm2 restart ${service}`);
      await this.sendMessage(chatId, `‚úÖ ${service} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    }
  }

  async handleRecover(chatId, text) {
    const parts = text.split(' ');
    const type = parts[1] || 'status';

    const validTypes = ['status', 'soft', 'whatsapp', 'redis', 'full'];
    if (!validTypes.includes(type)) {
      await this.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –î–æ—Å—Ç—É–ø–Ω—ã: ${validTypes.join(', ')}`);
      return;
    }

    await this.sendMessage(chatId, `üîß –ó–∞–ø—É—Å–∫–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (${type})...`);

    try {
      const { stdout, stderr } = await execAsync(`/opt/ai-admin/scripts/recovery.sh ${type}`);

      // –û–±—Ä–µ–∑–∞–µ–º –≤—ã–≤–æ–¥, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
      let output = stdout || stderr;
      if (output.length > 3000) {
        output = output.substring(0, 3000) + '\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)';
      }

      await this.sendMessage(chatId, `‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n<pre>${output}</pre>`);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }

  async handleLogs(chatId) {
    await this.sendMessage(chatId, 'üìú –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏...');

    try {
      const { stdout } = await execAsync('pm2 logs --err --nostream --lines 20');

      // –û–±—Ä–µ–∑–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
      let logs = stdout.substring(0, 2000);

      if (!logs.includes('error') && !logs.includes('Error')) {
        await this.sendMessage(chatId, '‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–∞—Ö');
      } else {
        await this.sendMessage(chatId, `üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n<pre>${logs}</pre>`);
      }
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: ${error.message}`);
    }
  }

  async handleQueue(chatId) {
    await this.sendMessage(chatId, 'üìä –ü—Ä–æ–≤–µ—Ä—è—é –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π...');

    try {
      const response = await axios.get(HEALTH_URL);
      const queue = response.data.checks?.queue;

      if (!queue) {
        await this.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏');
        return;
      }

      let queueText = 'üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n';
      queueText += `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${queue.totalJobs || 0}\n`;
      queueText += `–û–∂–∏–¥–∞—é—â–∏—Ö –±–∞—Ç—á–µ–π: ${queue.pendingBatches || 0}\n`;

      const status = queue.totalJobs > 20 ? '‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' : '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞';
      queueText += `\n–°—Ç–∞—Ç—É—Å: ${status}`;

      await this.sendMessage(chatId, queueText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async handleTest(chatId) {
    await this.sendMessage(chatId, 'üì± –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp...');

    try {
      const { stdout } = await execAsync('cd /opt/ai-admin && node test-direct-webhook.js');
      await this.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WhatsApp.');
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    }
  }

  getStatusIcon(status) {
    switch (status) {
      case 'ok':
      case 'healthy':
        return '‚úÖ';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'error':
      case 'unhealthy':
        return '‚ùå';
      default:
        return '‚ùì';
    }
  }

  formatUptime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days}–¥ ${hours % 24}—á`;
    if (hours > 0) return `${hours}—á ${minutes % 60}–º`;
    if (minutes > 0) return `${minutes}–º ${seconds % 60}—Å`;
    return `${seconds}—Å`;
  }

  async run() {
    logger.info('Telegram bot started');
    logger.info(`Bot token: ${BOT_TOKEN.substring(0, 10)}...`);
    logger.info(`Admin chat ID: ${ADMIN_CHAT_ID}`);

    await this.sendMessage(ADMIN_CHAT_ID, 'ü§ñ AI Admin Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');

    while (this.isRunning) {
      try {
        const updates = await this.getUpdates();

        for (const update of updates) {
          if (update.message) {
            logger.info(`Received message from ${update.message.from.id}: ${update.message.text}`);
            await this.handleCommand(update.message);
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º offset
          this.offset = update.update_id + 1;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        logger.error('Bot error:', error);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
  }

  async stop() {
    this.isRunning = false;
    logger.info('Telegram bot stopped');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if (require.main === module) {
  const bot = new TelegramBot();

  // Graceful shutdown
  process.on('SIGINT', async () => {
    logger.info('Received SIGINT, stopping bot...');
    await bot.stop();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    logger.info('Received SIGTERM, stopping bot...');
    await bot.stop();
    process.exit(0);
  });

  bot.run().catch(error => {
    logger.error('Failed to start bot:', error);
    process.exit(1);
  });
}

module.exports = TelegramBot;