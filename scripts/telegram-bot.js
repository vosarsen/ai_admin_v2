#!/usr/bin/env node

// scripts/telegram-bot.js
// Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI Admin
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π PM2 –ø—Ä–æ—Ü–µ—Å—Å

const axios = require('axios');
const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);
const logger = require('../src/utils/logger');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8301218575:AAFRhNPuARDnkiKY2aQKbDkUWPbaSiINPpc';
const ADMIN_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '601999';
const HEALTH_URL = 'http://localhost:3000/health';

if (!BOT_TOKEN || !ADMIN_CHAT_ID) {
  console.error('Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID');
  console.error('BOT_TOKEN:', BOT_TOKEN ? 'present' : 'missing');
  console.error('ADMIN_CHAT_ID:', ADMIN_CHAT_ID ? 'present' : 'missing');
  process.exit(1);
}

class TelegramBot {
  constructor() {
    this.offset = 0;
    this.isRunning = true;
  }

  async sendMessage(chatId, text, options = {}) {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const response = await axios.post(url, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      });
      return response.data;
    } catch (error) {
      logger.error('Failed to send message:', error.message);
      return null;
    }
  }

  async answerCallbackQuery(callbackQueryId, text = '') {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
      await axios.post(url, {
        callback_query_id: callbackQueryId,
        text
      });
    } catch (error) {
      logger.error('Failed to answer callback query:', error.message);
    }
  }

  async setMyCommands() {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/setMyCommands`;
      await axios.post(url, {
        commands: [
          { command: 'start', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
          { command: 'status', description: 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' },
          { command: 'health', description: 'üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è' },
          { command: 'db_health', description: 'üíæ Database Auth State' },
          { command: 'stats', description: 'üìà –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞' },
          { command: 'ai_metrics', description: 'ü§ñ –ú–µ—Ç—Ä–∏–∫–∏ AI' },
          { command: 'queue', description: 'üì® –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π' },
          { command: 'logs', description: 'üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏' },
          { command: 'restart', description: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞' },
          { command: 'test', description: 'üì± –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }
        ]
      });
      logger.info('Bot commands menu configured');
    } catch (error) {
      logger.error('Failed to set bot commands:', error.message);
    }
  }

  // Inline keyboard helpers
  getMainMenuKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'cmd_status' },
          { text: 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', callback_data: 'cmd_health' }
        ],
        [
          { text: 'üíæ DB Health', callback_data: 'cmd_db_health' },
          { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'cmd_stats' }
        ],
        [
          { text: 'ü§ñ AI –ú–µ—Ç—Ä–∏–∫–∏', callback_data: 'cmd_ai_metrics' },
          { text: 'üì® –û—á–µ—Ä–µ–¥—å', callback_data: 'cmd_queue' }
        ],
        [
          { text: 'üìú –õ–æ–≥–∏', callback_data: 'cmd_logs' },
          { text: 'üì± –¢–µ—Å—Ç', callback_data: 'cmd_test' }
        ],
        [
          { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', callback_data: 'menu_restart' }
        ]
      ]
    };
  }

  getRestartMenuKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: 'üîÑ API', callback_data: 'restart_api' },
          { text: 'üîÑ Worker', callback_data: 'restart_worker' }
        ],
        [
          { text: 'üîÑ WhatsApp', callback_data: 'restart_whatsapp' },
          { text: 'üîÑ Redis', callback_data: 'restart_redis' }
        ],
        [
          { text: 'üîÑ –í—Å—ë', callback_data: 'restart_all' }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'menu_main' }
        ]
      ]
    };
  }

  getStatsKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'stats_today' },
          { text: '–ù–µ–¥–µ–ª—è', callback_data: 'stats_week' }
        ],
        [
          { text: '–ú–µ—Å—è—Ü', callback_data: 'stats_month' },
          { text: '–í—Å—ë –≤—Ä–µ–º—è', callback_data: 'stats_all' }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'menu_main' }
        ]
      ]
    };
  }

  async getUpdates() {
    try {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`;
      const response = await axios.get(url, {
        params: {
          offset: this.offset,
          timeout: 30
        }
      });

      if (response.data.ok && response.data.result.length > 0) {
        return response.data.result;
      }
      return [];
    } catch (error) {
      logger.error('Failed to get updates:', error.message);
      return [];
    }
  }

  async handleCommand(message) {
    const chatId = message.chat.id;
    const text = message.text || '';
    const fromId = message.from.id.toString();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if (fromId !== ADMIN_CHAT_ID) {
      await this.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    const command = text.toLowerCase().split(' ')[0];

    switch (command) {
      case '/start':
      case '/help':
        await this.handleHelp(chatId);
        break;

      case '/status':
        await this.handleStatus(chatId);
        break;

      case '/health':
        await this.handleHealth(chatId);
        break;

      case '/db_health':
        await this.handleDatabaseHealth(chatId);
        break;

      case '/stats':
        await this.handleStats(chatId, 'today');
        break;

      case '/ai_metrics':
        await this.handleAIMetrics(chatId);
        break;

      case '/restart':
        await this.handleRestart(chatId, text);
        break;

      case '/recover':
        await this.handleRecover(chatId, text);
        break;

      case '/logs':
        await this.handleLogs(chatId);
        break;

      case '/queue':
        await this.handleQueue(chatId);
        break;

      case '/test':
        await this.handleTest(chatId);
        break;

      default:
        if (text.startsWith('/')) {
          await this.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help');
        }
    }
  }

  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    // Answer callback query
    await this.answerCallbackQuery(callbackQuery.id);

    // Handle different callbacks
    if (data.startsWith('cmd_')) {
      const cmd = data.replace('cmd_', '');
      switch (cmd) {
        case 'status':
          await this.handleStatus(chatId);
          break;
        case 'health':
          await this.handleHealth(chatId);
          break;
        case 'db_health':
          await this.handleDatabaseHealth(chatId);
          break;
        case 'stats':
          await this.sendMessage(chatId, 'üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', {
            reply_markup: this.getStatsKeyboard()
          });
          break;
        case 'ai_metrics':
          await this.handleAIMetrics(chatId);
          break;
        case 'queue':
          await this.handleQueue(chatId);
          break;
        case 'logs':
          await this.handleLogs(chatId);
          break;
        case 'test':
          await this.handleTest(chatId);
          break;
      }
    } else if (data.startsWith('menu_')) {
      const menu = data.replace('menu_', '');
      switch (menu) {
        case 'main':
          await this.handleHelp(chatId);
          break;
        case 'restart':
          await this.sendMessage(chatId, 'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', {
            reply_markup: this.getRestartMenuKeyboard()
          });
          break;
      }
    } else if (data.startsWith('restart_')) {
      const service = data.replace('restart_', '');
      const serviceMap = {
        'api': 'ai-admin-api',
        'worker': 'ai-admin-worker-v2',
        'whatsapp': 'baileys-whatsapp-service',
        'redis': 'redis',
        'all': 'all'
      };
      await this.handleRestartService(chatId, serviceMap[service] || service);
    } else if (data.startsWith('stats_')) {
      const period = data.replace('stats_', '');
      await this.handleStats(chatId, period);
    }
  }

  async handleHelp(chatId) {
    const helpText = `ü§ñ <b>AI Admin Control Panel</b>

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI Admin!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
üìà –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
ü§ñ –ú–µ—Ç—Ä–∏–∫–∏ AI
üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è</i>`;

    await this.sendMessage(chatId, helpText, {
      reply_markup: this.getMainMenuKeyboard()
    });
  }

  async handleStatus(chatId) {
    await this.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...');

    try {
      const { stdout } = await execAsync('pm2 jlist');
      const processes = JSON.parse(stdout);

      let statusText = 'üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n\n';

      for (const proc of processes) {
        const name = proc.name;
        const status = proc.pm2_env.status;
        const restarts = proc.pm2_env.restart_time;
        const memory = Math.round(proc.monit.memory / 1024 / 1024);
        const uptime = this.formatUptime(Date.now() - proc.pm2_env.pm_uptime);

        const statusIcon = status === 'online' ? '‚úÖ' : '‚ùå';
        statusText += `${statusIcon} <b>${name}</b>\n`;
        statusText += `   –°—Ç–∞—Ç—É—Å: ${status}\n`;
        statusText += `   Uptime: ${uptime}\n`;
        statusText += `   –ü–∞–º—è—Ç—å: ${memory}MB\n`;
        statusText += `   –†–µ—Å—Ç–∞—Ä—Ç—ã: ${restarts}\n\n`;
      }

      await this.sendMessage(chatId, statusText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async handleHealth(chatId) {
    await this.sendMessage(chatId, 'üè• –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...');

    try {
      const response = await axios.get(HEALTH_URL, { timeout: 10000 });
      const health = response.data;

      let healthText = `üè• <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</b>\n\n`;
      healthText += `–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${this.getStatusIcon(health.status)} ${health.status}\n\n`;

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      if (health.checks) {
        healthText += '<b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n';

        // Redis
        if (health.checks.redis) {
          const redis = health.checks.redis;
          healthText += `${this.getStatusIcon(redis.status)} Redis: ${redis.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`;
          if (redis.keys) healthText += ` (${redis.keys} –∫–ª—é—á–µ–π)`;
          healthText += '\n';
        }

        // Database
        if (health.checks.database) {
          const db = health.checks.database;
          healthText += `${this.getStatusIcon(db.status)} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${db.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n`;
        }

        // WhatsApp
        if (health.checks.whatsapp) {
          const wa = health.checks.whatsapp;
          healthText += `${this.getStatusIcon(wa.status)} WhatsApp: ${wa.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`;
          if (wa.phoneNumber) healthText += ` (${wa.phoneNumber})`;
          healthText += '\n';
        }

        // Queue
        if (health.checks.queue) {
          const queue = health.checks.queue;
          healthText += `${this.getStatusIcon(queue.status)} –û—á–µ—Ä–µ–¥—å: ${queue.totalJobs} –∑–∞–¥–∞—á`;
          if (queue.pendingBatches) healthText += ` (${queue.pendingBatches} –±–∞—Ç—á–µ–π)`;
          healthText += '\n';
        }

        // Memory
        if (health.checks.memory) {
          const mem = health.checks.memory;
          healthText += `${this.getStatusIcon(mem.status)} –ü–∞–º—è—Ç—å: ${mem.rssMB}MB (${mem.percentage}%)\n`;
        }

        // Last Activity
        if (health.checks.lastActivity) {
          const activity = health.checks.lastActivity;
          healthText += `${this.getStatusIcon(activity.status)} –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity.lastMessageMinutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`;
          if (activity.activeChats) healthText += ` (${activity.activeChats} —á–∞—Ç–æ–≤)`;
          healthText += '\n';
        }
      }

      await this.sendMessage(chatId, healthText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: ${error.message}`);
    }
  }

  async handleDatabaseHealth(chatId) {
    await this.sendMessage(chatId, 'üíæ –ü—Ä–æ–≤–µ—Ä—è—é Database Auth State...');

    try {
      const { createClient } = require('@supabase/supabase-js');
      const supabaseUrl = process.env.SUPABASE_URL;
      const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

      if (!supabaseUrl || !supabaseKey) {
        await this.sendMessage(chatId, '‚ùå Supabase credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
      }

      const supabase = createClient(supabaseUrl, supabaseKey);

      // Count total keys
      const { count: totalKeys, error: countError } = await supabase
        .from('whatsapp_keys')
        .select('*', { count: 'exact', head: true });

      // Count expired keys
      const { count: expiredKeys, error: expiredError } = await supabase
        .from('whatsapp_keys')
        .select('*', { count: 'exact', head: true })
        .lt('expires_at', new Date().toISOString());

      // Get recent activity
      const { data: recentKeys, error: recentError } = await supabase
        .from('whatsapp_keys')
        .select('created_at')
        .order('created_at', { ascending: false })
        .limit(1);

      const lastActivity = recentKeys && recentKeys[0]
        ? new Date(recentKeys[0].created_at)
        : null;

      const minutesAgo = lastActivity
        ? Math.floor((Date.now() - lastActivity.getTime()) / 60000)
        : null;

      let healthText = 'üíæ <b>Database Auth State</b>\n\n';

      const statusIcon = totalKeys < 200 ? '‚úÖ' : totalKeys < 300 ? '‚ö†Ô∏è' : 'üî¥';
      healthText += `${statusIcon} –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${totalKeys || 0}\n`;

      const expiredIcon = expiredKeys > 0 ? '‚ö†Ô∏è' : '‚úÖ';
      healthText += `${expiredIcon} –ò—Å—Ç—ë–∫—à–∏—Ö –∫–ª—é—á–µ–π: ${expiredKeys || 0}\n`;

      if (lastActivity) {
        healthText += `üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥\n`;
      }

      healthText += '\n<b>–°—Ç–∞—Ç—É—Å:</b>\n';
      if (totalKeys < 100) {
        healthText += '‚úÖ –û—Ç–ª–∏—á–Ω–æ - —Ä–∞–∑–º–µ—Ä –ë–î –æ–ø—Ç–∏–º–∞–ª–µ–Ω';
      } else if (totalKeys < 200) {
        healthText += '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ - –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç';
      } else if (totalKeys < 300) {
        healthText += '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ - –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ TTL cleanup';
      } else {
        healthText += 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ - TTL cleanup –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!';
      }

      await this.sendMessage(chatId, healthText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`);
    }
  }

  async handleStats(chatId, period = 'today') {
    await this.sendMessage(chatId, `üìà –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (${period})...`);

    try {
      const { createClient } = require('@supabase/supabase-js');
      const supabaseUrl = process.env.SUPABASE_URL;
      const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

      if (!supabaseUrl || !supabaseKey) {
        await this.sendMessage(chatId, '‚ùå Supabase credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
      }

      const supabase = createClient(supabaseUrl, supabaseKey);

      // Calculate date range
      const now = new Date();
      let startDate = new Date();

      switch (period) {
        case 'today':
          startDate.setHours(0, 0, 0, 0);
          break;
        case 'week':
          startDate.setDate(now.getDate() - 7);
          break;
        case 'month':
          startDate.setDate(now.getDate() - 30);
          break;
        case 'all':
          startDate = new Date('2020-01-01');
          break;
      }

      // Count bookings in period
      const { count: bookingsCount, error: bookingsError } = await supabase
        .from('records')
        .select('*', { count: 'exact', head: true })
        .gte('created_at', startDate.toISOString())
        .eq('company_id', 962302);

      // Count new clients
      const { count: newClientsCount, error: clientsError } = await supabase
        .from('clients')
        .select('*', { count: 'exact', head: true })
        .gte('created_at', startDate.toISOString())
        .eq('company_id', 962302);

      // Get top services
      const { data: topServices, error: servicesError } = await supabase
        .from('records')
        .select('services')
        .gte('created_at', startDate.toISOString())
        .eq('company_id', 962302)
        .limit(100);

      let statsText = `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${this.getPeriodName(period)}</b>\n\n`;
      statsText += `üìÖ –ó–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ: ${bookingsCount || 0}\n`;
      statsText += `üë§ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${newClientsCount || 0}\n`;

      if (topServices && topServices.length > 0) {
        statsText += '\n<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n';
        // Simple service count (would need better processing in real scenario)
        statsText += `üìä –í—Å–µ–≥–æ —É—Å–ª—É–≥: ${topServices.length}\n`;
      }

      await this.sendMessage(chatId, statsText, {
        reply_markup: this.getStatsKeyboard()
      });
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
  }

  async handleAIMetrics(chatId) {
    await this.sendMessage(chatId, 'ü§ñ –°–æ–±–∏—Ä–∞—é –º–µ—Ç—Ä–∏–∫–∏ AI...');

    try {
      const { createClient } = require('@supabase/supabase-js');
      const supabaseUrl = process.env.SUPABASE_URL;
      const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

      if (!supabaseUrl || !supabaseKey) {
        await this.sendMessage(chatId, '‚ùå Supabase credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
      }

      const supabase = createClient(supabaseUrl, supabaseKey);

      // Get conversation metrics (last 24h)
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);

      const { data: conversations, error } = await supabase
        .from('conversation_logs')
        .select('processing_time, stage, status')
        .gte('created_at', yesterday.toISOString())
        .limit(1000);

      let metricsText = 'ü§ñ <b>AI Performance Metrics (24h)</b>\n\n';

      if (conversations && conversations.length > 0) {
        const avgTime = conversations.reduce((sum, c) => sum + (c.processing_time || 0), 0) / conversations.length;
        const successRate = (conversations.filter(c => c.status === 'success').length / conversations.length * 100).toFixed(1);

        metricsText += `‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${(avgTime / 1000).toFixed(2)}—Å\n`;
        metricsText += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: ${successRate}%\n`;
        metricsText += `üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${conversations.length}\n\n`;

        // Count by stage
        const stageCount = {};
        conversations.forEach(c => {
          stageCount[c.stage] = (stageCount[c.stage] || 0) + 1;
        });

        metricsText += '<b>–ü–æ —Å—Ç–∞–¥–∏—è–º:</b>\n';
        for (const [stage, count] of Object.entries(stageCount)) {
          metricsText += `  ${stage}: ${count}\n`;
        }
      } else {
        metricsText += 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n';
        metricsText += '\n<i>–í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</i>';
      }

      await this.sendMessage(chatId, metricsText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${error.message}`);
    }
  }

  getPeriodName(period) {
    switch (period) {
      case 'today': return '—Å–µ–≥–æ–¥–Ω—è';
      case 'week': return '–Ω–µ–¥–µ–ª—é';
      case 'month': return '–º–µ—Å—è—Ü';
      case 'all': return '–≤—Å—ë –≤—Ä–µ–º—è';
      default: return period;
    }
  }

  async handleRestart(chatId, text) {
    const parts = text.split(' ');
    const service = parts[1] || 'all';
    await this.handleRestartService(chatId, service);
  }

  async handleRestartService(chatId, service) {
    await this.sendMessage(chatId, `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é ${service}...`);

    try {
      const { stdout } = await execAsync(`pm2 restart ${service}`);
      await this.sendMessage(chatId, `‚úÖ ${service} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
    }
  }

  async handleRecover(chatId, text) {
    const parts = text.split(' ');
    const type = parts[1] || 'status';

    const validTypes = ['status', 'soft', 'whatsapp', 'redis', 'full'];
    if (!validTypes.includes(type)) {
      await this.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –î–æ—Å—Ç—É–ø–Ω—ã: ${validTypes.join(', ')}`);
      return;
    }

    await this.sendMessage(chatId, `üîß –ó–∞–ø—É—Å–∫–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (${type})...`);

    try {
      const { stdout, stderr } = await execAsync(`/opt/ai-admin/scripts/recovery.sh ${type}`);

      // –û–±—Ä–µ–∑–∞–µ–º –≤—ã–≤–æ–¥, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
      let output = stdout || stderr;
      if (output.length > 3000) {
        output = output.substring(0, 3000) + '\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)';
      }

      await this.sendMessage(chatId, `‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n<pre>${output}</pre>`);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }

  async handleLogs(chatId) {
    await this.sendMessage(chatId, 'üìú –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏...');

    try {
      const { stdout } = await execAsync('pm2 logs --err --nostream --lines 20');

      // –û–±—Ä–µ–∑–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
      let logs = stdout.substring(0, 2000);

      if (!logs.includes('error') && !logs.includes('Error')) {
        await this.sendMessage(chatId, '‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–∞—Ö');
      } else {
        await this.sendMessage(chatId, `üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n<pre>${logs}</pre>`);
      }
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: ${error.message}`);
    }
  }

  async handleQueue(chatId) {
    await this.sendMessage(chatId, 'üìä –ü—Ä–æ–≤–µ—Ä—è—é –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π...');

    try {
      const response = await axios.get(HEALTH_URL);
      const queue = response.data.checks?.queue;

      if (!queue) {
        await this.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏');
        return;
      }

      let queueText = 'üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n';
      queueText += `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${queue.totalJobs || 0}\n`;
      queueText += `–û–∂–∏–¥–∞—é—â–∏—Ö –±–∞—Ç—á–µ–π: ${queue.pendingBatches || 0}\n`;

      const status = queue.totalJobs > 20 ? '‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' : '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞';
      queueText += `\n–°—Ç–∞—Ç—É—Å: ${status}`;

      await this.sendMessage(chatId, queueText);
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  async handleTest(chatId) {
    await this.sendMessage(chatId, 'üì± –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp...');

    try {
      const { stdout } = await execAsync('cd /opt/ai-admin && node test-direct-webhook.js');
      await this.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WhatsApp.');
    } catch (error) {
      await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    }
  }

  getStatusIcon(status) {
    switch (status) {
      case 'ok':
      case 'healthy':
        return '‚úÖ';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'error':
      case 'unhealthy':
        return '‚ùå';
      default:
        return '‚ùì';
    }
  }

  formatUptime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days}–¥ ${hours % 24}—á`;
    if (hours > 0) return `${hours}—á ${minutes % 60}–º`;
    if (minutes > 0) return `${minutes}–º ${seconds % 60}—Å`;
    return `${seconds}—Å`;
  }

  async run() {
    logger.info('Telegram bot started');
    logger.info(`Bot token: ${BOT_TOKEN.substring(0, 10)}...`);
    logger.info(`Admin chat ID: ${ADMIN_CHAT_ID}`);

    // Set bot commands menu
    await this.setMyCommands();

    await this.sendMessage(ADMIN_CHAT_ID, 'ü§ñ AI Admin Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é üëá');

    while (this.isRunning) {
      try {
        const updates = await this.getUpdates();

        for (const update of updates) {
          if (update.message) {
            logger.info(`Received message from ${update.message.from.id}: ${update.message.text}`);
            await this.handleCommand(update.message);
          } else if (update.callback_query) {
            logger.info(`Received callback from ${update.callback_query.from.id}: ${update.callback_query.data}`);
            await this.handleCallbackQuery(update.callback_query);
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º offset
          this.offset = update.update_id + 1;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        logger.error('Bot error:', error);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
  }

  async stop() {
    this.isRunning = false;
    logger.info('Telegram bot stopped');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if (require.main === module) {
  const bot = new TelegramBot();

  // Graceful shutdown
  process.on('SIGINT', async () => {
    logger.info('Received SIGINT, stopping bot...');
    await bot.stop();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    logger.info('Received SIGTERM, stopping bot...');
    await bot.stop();
    process.exit(0);
  });

  bot.run().catch(error => {
    logger.error('Failed to start bot:', error);
    process.exit(1);
  });
}

module.exports = TelegramBot;