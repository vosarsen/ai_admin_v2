// test-intent-simple.js
// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤

require('dotenv').config();
const aiAdmin = require('./src/services/ai-admin-v2'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const testMessages = [
  // –ó–∞–ø–∏—Å—å
  '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
  '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É?',
  
  // –¶–µ–Ω—ã
  '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?',
  '–∫–∞–∫–∏–µ —Ü–µ–Ω—ã?',
  '—á–µ –ø–æ —Ü–µ–Ω–∞–º?',
  
  // –í—Ä–µ–º—è
  '—Å–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞?',
  '–µ—Å—Ç—å –≤—Ä–µ–º—è –≤ –ø—è—Ç–Ω–∏—Ü—É?',
  '–º–æ–∂–Ω–æ –≤–µ—á–µ—Ä–æ–º?',
  
  // –û—Ç–º–µ–Ω–∞
  '—Ö–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
  '–Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏'
];

async function testIntent() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤ AI Admin v2\n');
  
  for (const message of testMessages) {
    try {
      console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
      
      const result = await aiAdmin.processMessage(
        message,
        '79000000001',
        509113
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (result.executedCommands && result.executedCommands.length > 0) {
        console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞: ${result.executedCommands.map(c => c.command).join(', ')}`);
      } else {
        console.log('‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      console.log(`üí¨ –û—Ç–≤–µ—Ç: ${result.response.substring(0, 100)}...`);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

testIntent().catch(console.error);