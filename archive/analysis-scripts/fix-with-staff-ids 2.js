const { supabase } = require('./src/database/supabase');

async function fixWithStaffIds() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò ID –ú–ê–°–¢–ï–†–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
  const { data: staffList } = await supabase
    .from('staff')
    .select('id, name, yclients_id')
    .eq('company_id', 962302);
  
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–º—è -> id
  const staffNameToId = {};
  const staffYclientsToId = {};
  
  staffList?.forEach(staff => {
    if (staff.name) staffNameToId[staff.name] = staff.id;
    if (staff.yclients_id) staffYclientsToId[staff.yclients_id] = staff.id;
  });
  
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${staffList?.length || 0} –º–∞—Å—Ç–µ—Ä–æ–≤\n`);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏
  const { data: clientsWithVisits } = await supabase
    .from('visits')
    .select('client_id')
    .not('client_id', 'is', null);
  
  const uniqueClientIds = [...new Set(clientsWithVisits?.map(v => v.client_id))];
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${uniqueClientIds.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏\n`);
  
  let updated = 0;
  let errors = 0;
  
  for (const clientId of uniqueClientIds) {
    // –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    const { data: visits } = await supabase
      .from('visits')
      .select('*')
      .eq('client_id', clientId)
      .order('visit_date', { ascending: false });
    
    if (!visits || visits.length === 0) continue;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const visitHistory = visits.slice(0, 50).map(v => ({
      date: v.visit_date,
      time: v.visit_time,
      services: v.service_names || []
    }));
    
    const lastServices = visits[0]?.service_names || [];
    
    // –°—á–∏—Ç–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º staff_yclients_id –∏–ª–∏ staff_name)
    const staffCounts = {};
    visits.forEach(v => {
      let staffId = null;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ yclients_id
      if (v.staff_yclients_id && staffYclientsToId[v.staff_yclients_id]) {
        staffId = staffYclientsToId[v.staff_yclients_id];
      }
      // –ü–æ—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏
      else if (v.staff_name && staffNameToId[v.staff_name]) {
        staffId = staffNameToId[v.staff_name];
      }
      
      if (staffId) {
        staffCounts[staffId] = (staffCounts[staffId] || 0) + 1;
      }
    });
    
    const favoriteStaffIds = Object.entries(staffCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([id]) => parseInt(id));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    const updateData = {
      visit_history: visitHistory,
      last_services: lastServices
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º favorite_staff_ids —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (favoriteStaffIds.length > 0) {
      updateData.favorite_staff_ids = favoriteStaffIds;
    }
    
    const { error } = await supabase
      .from('clients')
      .update(updateData)
      .eq('id', clientId);
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}: ${error.message}`);
      errors++;
    } else {
      updated++;
      if (updated % 10 === 0) {
        console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∫–ª–∏–µ–Ω—Ç–æ–≤...`);
      }
    }
  }
  
  console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, visit_history, last_services, favorite_staff_ids')
    .eq('company_id', 962302)
    .order('visit_count', { ascending: false })
    .limit(5);
  
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –¢–û–ü-5 –ö–õ–ò–ï–ù–¢–û–í:');
  for (const client of topClients || []) {
    console.log(`\n${client.name}:`);
    console.log(`  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: ${client.visit_history?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ª—É–≥–∏: ${client.last_services?.join(', ') || '–ø—É—Å—Ç–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ ID
    if (client.favorite_staff_ids && client.favorite_staff_ids.length > 0) {
      const { data: staffNames } = await supabase
        .from('staff')
        .select('name')
        .in('id', client.favorite_staff_ids);
      
      const names = staffNames?.map(s => s.name).join(', ') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ';
      console.log(`  ‚Ä¢ –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: ${names} (ID: ${client.favorite_staff_ids.join(', ')})`);
    } else {
      console.log(`  ‚Ä¢ –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: –ø—É—Å—Ç–æ`);
    }
  }
}

fixWithStaffIds().catch(console.error);