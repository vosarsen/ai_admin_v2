const { supabase } = require('./src/database/supabase');

async function finalReport() {
  console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302);
  
  const { count: clientsWithHistory } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302)
    .not('visit_history', 'eq', '[]');
  
  const { count: clientsWithServices } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302)
    .not('last_services', 'eq', '[]');
  
  const { count: clientsWithStaff } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302)
    .not('favorite_staff_ids', 'eq', '[]');
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∑–∏—Ç–æ–≤
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
  
  const { data: uniqueClients } = await supabase
    .from('visits')
    .select('client_id')
    .not('client_id', 'is', null);
  const uniqueCount = new Set(uniqueClients?.map(v => v.client_id)).size;
  
  console.log('üìä –ö–õ–ò–ï–ù–¢–´:');
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤ –ë–î: ${totalClients}`);
  console.log(`  ‚Ä¢ –° –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∏–∑–∏—Ç–æ–≤: ${clientsWithHistory || 0} (${Math.round((clientsWithHistory||0)/totalClients*100)}%)`);
  console.log(`  ‚Ä¢ –° –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏: ${clientsWithServices || 0} (${Math.round((clientsWithServices||0)/totalClients*100)}%)`);
  console.log(`  ‚Ä¢ –° –ª—é–±–∏–º—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏: ${clientsWithStaff || 0} (${Math.round((clientsWithStaff||0)/totalClients*100)}%)`);
  console.log('');
  
  console.log('üìÖ –í–ò–ó–ò–¢–´:');
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${totalVisits}`);
  console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${uniqueCount}`);
  console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${Math.round(totalVisits/uniqueCount)}`);
  console.log('');
  
  // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, visit_count, visit_history, last_services')
    .eq('company_id', 962302)
    .order('visit_count', { ascending: false })
    .limit(5);
  
  console.log('üèÜ –¢–û–ü-5 –ö–õ–ò–ï–ù–¢–û–í:');
  for (const client of topClients || []) {
    const hasData = client.visit_history && client.visit_history.length > 0;
    const icon = hasData ? '‚úÖ' : '‚ö™';
    console.log(`  ${icon} ${client.name}: ${client.visit_count} –≤–∏–∑–∏—Ç–æ–≤ (–≤ –∏—Å—Ç–æ—Ä–∏–∏: ${client.visit_history?.length || 0})`);
  }
  console.log('');
  
  // –í—ã–≤–æ–¥—ã
  console.log('üí° –ò–¢–û–ì–ò:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  if (clientsWithHistory && clientsWithHistory > 50) {
    console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
    console.log(`  ‚Ä¢ ${totalClients} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
    console.log(`  ‚Ä¢ ${totalVisits} –≤–∏–∑–∏—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
    console.log(`  ‚Ä¢ ${clientsWithHistory} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏`);
  } else {
    console.log('‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø');
    console.log(`  ‚Ä¢ ${totalClients} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
    console.log(`  ‚Ä¢ ${totalVisits} –≤–∏–∑–∏—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
    console.log(`  ‚Ä¢ –¢–æ–ª—å–∫–æ ${clientsWithHistory || 0} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é`);
    console.log('\n  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - YClients API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç');
    console.log('  –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.');
  }
  
  console.log('\nüìå AI Admin v2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
}

finalReport().catch(console.error);