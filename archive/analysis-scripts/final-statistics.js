const { supabase } = require('./src/database/supabase');

async function finalStatistics() {
  console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302);
  
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
  
  // –ö–ª–∏–µ–Ω—Ç—ã —Å –≤–∏–∑–∏—Ç–∞–º–∏
  const { data: clientsWithVisits } = await supabase
    .from('visits')
    .select('client_id')
    .not('client_id', 'is', null);
  
  const uniqueClientIds = new Set(clientsWithVisits?.map(v => v.client_id));
  const uniqueClientsCount = uniqueClientIds.size;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
  const topClients = [
    { id: 1453, name: '–ê–ª–µ–∫—Å–µ–π', expected: 33 },
    { id: 2210, name: '–õ–µ–æ–Ω–∏–¥', expected: 27 },
    { id: 2002, name: '–ï–≤–≥–µ–Ω–∏–π', expected: 27 },
    { id: 17222, name: '–°–µ—Ä–≥–µ–π', expected: 25 },
    { id: 1941, name: '–î–º–∏—Ç—Ä–∏–π', expected: 25 }
  ];
  
  console.log('üìà –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:');
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î: ${totalClients}`);
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ${totalVisits}`);
  console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ${uniqueClientsCount}`);
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${Math.round(uniqueClientsCount / totalClients * 100)}%`);
  console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${Math.round(totalVisits / uniqueClientsCount)}\n`);
  
  console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–û–ü –ö–õ–ò–ï–ù–¢–û–í:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  let allSynced = true;
  for (const client of topClients) {
    const { count } = await supabase
      .from('visits')
      .select('*', { count: 'exact', head: true })
      .eq('client_id', client.id);
    
    const status = count > 0 ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${client.name}: ${count || 0} –≤–∏–∑–∏—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å ~${client.expected})`);
    
    if (count === 0) allSynced = false;
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
  const { data: visitDates } = await supabase
    .from('visits')
    .select('visit_date')
    .order('visit_date', { ascending: true })
    .limit(1);
  
  const { data: latestVisit } = await supabase
    .from('visits')
    .select('visit_date')
    .order('visit_date', { ascending: false })
    .limit(1);
  
  console.log('\nüìÖ –î–ò–ê–ü–ê–ó–û–ù –î–ê–¢ –í–ò–ó–ò–¢–û–í:');
  console.log(`  ‚Ä¢ –°–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≤–∏–∑–∏—Ç: ${visitDates?.[0]?.visit_date || '–Ω/–¥'}`);
  console.log(`  ‚Ä¢ –°–∞–º—ã–π –ø–æ–∑–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${latestVisit?.[0]?.visit_date || '–Ω/–¥'}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
  const { data: servicesData } = await supabase
    .from('visits')
    .select('service_names')
    .not('service_names', 'is', null);
  
  const serviceCounts = {};
  servicesData?.forEach(visit => {
    visit.service_names?.forEach(service => {
      serviceCounts[service] = (serviceCounts[service] || 0) + 1;
    });
  });
  
  const topServices = Object.entries(serviceCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);
  
  console.log('\nüèÜ –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –£–°–õ–£–ì:');
  topServices.forEach(([service, count], i) => {
    console.log(`  ${i+1}. ${service}: ${count} —Ä–∞–∑`);
  });
  
  // –í–´–í–û–î–´
  console.log('\nüí° –í–´–í–û–î–´:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  if (allSynced && uniqueClientsCount > 100) {
    console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
    console.log(`   ‚Ä¢ ${uniqueClientsCount} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã`);
    console.log(`   ‚Ä¢ ${totalVisits} –≤–∏–∑–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã`);
    console.log('   ‚Ä¢ –í—Å–µ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤');
  } else if (uniqueClientsCount > 0) {
    console.log('‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø');
    console.log(`   ‚Ä¢ –¢–æ–ª—å–∫–æ ${uniqueClientsCount} –∏–∑ ${totalClients} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –≤–∏–∑–∏—Ç—ã`);
    console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('     - YClients API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('     - –ú–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤');
    console.log('     - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ API');
  } else {
    console.log('‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨');
    console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const { data: clientsWithData } = await supabase
    .from('clients')
    .select('id')
    .eq('company_id', 962302)
    .not('visit_history', 'is', null);
  
  console.log(`\nüìä –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π: ${clientsWithData?.length || 0} –∏–∑ ${totalClients}`);
}

finalStatistics().catch(console.error);