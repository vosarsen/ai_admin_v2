const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function checkCurrentState() {
  console.log('üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  // –ö–ª–∏–µ–Ω—Ç—ã
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302)
    .gt('visit_count', 0);
    
  // –í–∏–∑–∏—Ç—ã
  const { data: visits } = await supabase
    .from('visits')
    .select('client_id');
  const uniqueClientsInVisits = new Set(visits?.map(v => v.client_id).filter(id => id)).size;
  
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
    
  // –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –≤–∏–∑–∏—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ visits
  const clientIdsWithVisits = new Set(visits?.map(v => v.client_id).filter(id => id));
  
  const { data: allClients } = await supabase
    .from('clients')
    .select('id, name, yclients_id, visit_count')
    .eq('company_id', 962302)
    .gt('visit_count', 0)
    .order('visit_count', { ascending: false });
    
  const clientsNotSynced = allClients?.filter(c => !clientIdsWithVisits.has(c.id));
  
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log('  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏): ' + totalClients);
  console.log('  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ visits: ' + uniqueClientsInVisits);
  console.log('  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤ –≤ –ë–î: ' + totalVisits);
  console.log('');
  console.log('‚ùó –ù—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: ' + (totalClients - uniqueClientsInVisits) + ' –∫–ª–∏–µ–Ω—Ç–æ–≤');
  console.log('   –≠—Ç–æ ' + Math.round((totalClients - uniqueClientsInVisits) / totalClients * 100) + '% –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  
  if (clientsNotSynced && clientsNotSynced.length > 0) {
    console.log('');
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:');
    clientsNotSynced.slice(0, 10).forEach(c => {
      console.log(`  ‚Ä¢ ${c.name} (ID: ${c.id}, YClients: ${c.yclients_id}, –í–∏–∑–∏—Ç–æ–≤: ${c.visit_count})`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ visit_count
    const byVisitCount = {};
    clientsNotSynced.forEach(c => {
      const count = c.visit_count;
      if (!byVisitCount[count]) byVisitCount[count] = 0;
      byVisitCount[count]++;
    });
    
    console.log('');
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ visit_count:');
    Object.entries(byVisitCount)
      .sort((a, b) => parseInt(b[0]) - parseInt(a[0]))
      .slice(0, 10)
      .forEach(([count, num]) => {
        console.log(`  ‚Ä¢ ${count} –≤–∏–∑–∏—Ç–æ–≤: ${num} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
      });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const nameGroups = {};
  allClients?.forEach(c => {
    if (!nameGroups[c.name]) nameGroups[c.name] = [];
    nameGroups[c.name].push(c);
  });
  
  const duplicates = Object.entries(nameGroups)
    .filter(([name, clients]) => clients.length > 1)
    .length;
    
  console.log('');
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
  console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: ' + Object.keys(nameGroups).length);
  console.log('  ‚Ä¢ –ò–º–µ–Ω —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: ' + duplicates);
  
  if (duplicates > 0) {
    console.log('');
    console.log('‚ö†Ô∏è –í—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã! –¢–æ–ø-5:');
    Object.entries(nameGroups)
      .filter(([name, clients]) => clients.length > 1)
      .sort((a, b) => b[1].length - a[1].length)
      .slice(0, 5)
      .forEach(([name, clients]) => {
        console.log(`  ‚Ä¢ ${name}: ${clients.length} –∑–∞–ø–∏—Å–µ–π`);
      });
  }
}

checkCurrentState().catch(console.error);