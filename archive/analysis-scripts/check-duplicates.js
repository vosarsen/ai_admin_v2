const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function checkDuplicates() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ö–õ–ò–ï–ù–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const { data: allClients } = await supabase
    .from('clients')
    .select('id, yclients_id, name, visit_count')
    .eq('company_id', 962302)
    .gt('visit_count', 0);
    
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  const nameGroups = {};
  allClients?.forEach(c => {
    const name = c.name;
    if (!nameGroups[name]) nameGroups[name] = [];
    nameGroups[name].push(c);
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const duplicates = Object.entries(nameGroups)
    .filter(([name, clients]) => clients.length > 1)
    .sort((a, b) => b[1].length - a[1].length);
    
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log('  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏: ' + allClients?.length);
  console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: ' + Object.keys(nameGroups).length);
  console.log('  ‚Ä¢ –ò–º–µ–Ω —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: ' + duplicates.length);
  console.log('');
  
  console.log('üîù –¢–æ–ø –∏–º–µ–Ω —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:');
  duplicates.slice(0, 10).forEach(([name, clients]) => {
    console.log(`  ‚Ä¢ ${name}: ${clients.length} –∑–∞–ø–∏—Å–µ–π`);
    const sample = clients.slice(0, 3);
    sample.forEach(c => {
      console.log(`    - ID: ${c.id}, YClients: ${c.yclients_id}, –í–∏–∑–∏—Ç—ã: ${c.visit_count}`);
    });
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ visits
  const { data: visitsData } = await supabase
    .from('visits')
    .select('client_id, client_name');
    
  const uniqueVisitClientIds = new Set(visitsData?.map(v => v.client_id).filter(id => id));
  const uniqueVisitNames = new Set(visitsData?.map(v => v.client_name).filter(n => n));
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ visits –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
  const clientsInVisits = allClients?.filter(c => uniqueVisitClientIds.has(c.id));
  const namesOfClientsInVisits = new Set(clientsInVisits?.map(c => c.name));
  
  console.log('');
  console.log('üìå –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã visits:');
  console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö client_id: ' + uniqueVisitClientIds.size);
  console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –≤ visits: ' + uniqueVisitNames.size);
  console.log('  ‚Ä¢ –ò–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ ID –∏–∑ visits): ' + namesOfClientsInVisits.size);
  
  // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏
  let totalClientsWithSameNames = 0;
  let examplesOfDuplicates = [];
  
  namesOfClientsInVisits.forEach(name => {
    const clientsWithThisName = nameGroups[name] || [];
    totalClientsWithSameNames += clientsWithThisName.length;
    
    if (clientsWithThisName.length > 1) {
      const inVisits = clientsWithThisName.filter(c => uniqueVisitClientIds.has(c.id));
      const notInVisits = clientsWithThisName.filter(c => !uniqueVisitClientIds.has(c.id));
      
      if (inVisits.length > 0 && notInVisits.length > 0 && examplesOfDuplicates.length < 5) {
        examplesOfDuplicates.push({
          name: name,
          inVisits: inVisits,
          notInVisits: notInVisits
        });
      }
    }
  });
  
  console.log('');
  console.log('üí° –ì–õ–ê–í–ù–´–ô –í–´–í–û–î:');
  console.log(`  ‚Ä¢ –í visits —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ${uniqueVisitClientIds.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  console.log(`  ‚Ä¢ –£ –Ω–∏—Ö ${namesOfClientsInVisits.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω`);
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤ –ë–î ${totalClientsWithSameNames} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏`);
  console.log(`  ‚Ä¢ –¢–æ –µ—Å—Ç—å ${totalClientsWithSameNames - uniqueVisitClientIds.size} –∫–ª–∏–µ–Ω—Ç–æ–≤ - —ç—Ç–æ –î–£–ë–õ–ò!`);
  
  if (examplesOfDuplicates.length > 0) {
    console.log('');
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
    examplesOfDuplicates.forEach(ex => {
      console.log(`  ‚Ä¢ ${ex.name}:`);
      console.log(`    –í visits: ID ${ex.inVisits[0].id} (YClients: ${ex.inVisits[0].yclients_id})`);
      console.log(`    –ù–ï –≤ visits: ID ${ex.notInVisits[0].id} (YClients: ${ex.notInVisits[0].yclients_id})`);
    });
  }
  
  console.log('');
  console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('  YClients API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑–∏—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.');
  console.log('  –í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π ID).');
  console.log('  –ò–ª–∏ YClients API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ã–¥–∞—á—É –∏—Å—Ç–æ—Ä–∏–∏.');
}

checkDuplicates().catch(console.error);