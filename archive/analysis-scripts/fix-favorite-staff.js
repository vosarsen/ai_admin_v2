const { supabase } = require('./src/database/supabase');

async function fixFavoriteStaff() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• favorite_staff_ids');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏
  const { data: visits } = await supabase
    .from('visits')
    .select('client_id, staff_name')
    .not('client_id', 'is', null)
    .not('staff_name', 'is', null);
  
  if (!visits || visits.length === 0) {
    console.log('–ù–µ—Ç –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
  const clientStaff = {};
  
  visits.forEach(visit => {
    if (!clientStaff[visit.client_id]) {
      clientStaff[visit.client_id] = {};
    }
    
    if (visit.staff_name) {
      clientStaff[visit.client_id][visit.staff_name] = 
        (clientStaff[visit.client_id][visit.staff_name] || 0) + 1;
    }
  });
  
  console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${Object.keys(clientStaff).length} –∫–ª–∏–µ–Ω—Ç–æ–≤...\n`);
  
  let updated = 0;
  
  for (const [clientId, staffCounts] of Object.entries(clientStaff)) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3 –º–∞—Å—Ç–µ—Ä–æ–≤
    const favoriteStaff = Object.entries(staffCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([name]) => name);
    
    if (favoriteStaff.length > 0) {
      const { error } = await supabase
        .from('clients')
        .update({ favorite_staff_ids: favoriteStaff })
        .eq('id', parseInt(clientId));
      
      if (!error) {
        updated++;
      }
    }
  }
  
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { count: withStaff } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .not('favorite_staff_ids', 'eq', '[]');
  
  console.log(`–ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ª—é–±–∏–º—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏: ${withStaff}`);
}

fixFavoriteStaff().catch(console.error);