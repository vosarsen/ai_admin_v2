const { supabase } = require('./src/database/supabase');

async function finalStatus() {
  console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302);
  
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
  
  // –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const { data: clientsWithData } = await supabase
    .from('clients')
    .select('id')
    .eq('company_id', 962302)
    .not('visit_history', 'eq', '[]')
    .not('visit_history', 'is', null)
    .not('last_services', 'eq', '[]')
    .not('last_services', 'is', null);
  
  const withFullData = clientsWithData?.length || 0;
  
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`  ‚úÖ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}`);
  console.log(`  ‚úÖ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${totalVisits}`);
  console.log(`  ‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${withFullData} (${Math.round(withFullData/totalClients*100)}%)`);
  console.log('');
  
  // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, visit_count, visit_history, last_services')
    .eq('company_id', 962302)
    .order('visit_count', { ascending: false })
    .limit(10);
  
  console.log('üèÜ –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í (–í–°–ï –° –î–ê–ù–ù–´–ú–ò):');
  let allHaveData = true;
  
  for (const client of topClients || []) {
    const hasData = client.visit_history && client.visit_history.length > 0;
    const icon = hasData ? '‚úÖ' : '‚ùå';
    
    if (!hasData) allHaveData = false;
    
    console.log(`  ${icon} ${client.name}: ${client.visit_count} –≤–∏–∑–∏—Ç–æ–≤`);
    
    if (hasData) {
      const services = client.last_services?.slice(0, 2).join(', ');
      console.log(`      –ò—Å—Ç–æ—Ä–∏—è: ${client.visit_history.length}, –£—Å–ª—É–≥–∏: ${services}`);
    }
  }
  
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  if (allHaveData) {
    console.log('üéä –û–¢–õ–ò–ß–ù–û! –í—Å–µ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!');
  }
  
  console.log('\nüìå –†–ï–ó–Æ–ú–ï:');
  console.log(`  ‚Ä¢ ${withFullData} –∫–ª–∏–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –¥–ª—è AI –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏`);
  console.log(`  ‚Ä¢ ${totalVisits} –≤–∏–∑–∏—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
  console.log(`  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
  const { count: withoutData } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302)
    .gt('visit_count', 0)
    .or('visit_history.is.null,visit_history.eq.[]');
  
  if (withoutData > 0) {
    console.log(`\n‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${withoutData} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç visit_count > 0, –Ω–æ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏.`);
    console.log('   –≠—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö YClients API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
  }
}

finalStatus().catch(console.error);