const { YclientsClient } = require('./src/integrations/yclients/client');

async function analyzeClientVisits() {
  try {
    const yclient = new YclientsClient();
    
    console.log('–ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –º–∞–π-–∞–≤–≥—É—Å—Ç 2025...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const records = await yclient.getRecords({
      start_date: '2025-05-01',
      end_date: '2025-08-08',
      count: 500
    });

    if (!records || records.length === 0) {
      console.log('–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    const clientStats = {};
    
    records.forEach(record => {
      if (!record.client || !record.client.id) return;
      
      const clientId = record.client.id;
      const clientName = record.client.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
      const clientPhone = record.client.phone || '';
      
      if (!clientStats[clientId]) {
        clientStats[clientId] = {
          id: clientId,
          name: clientName,
          phone: clientPhone,
          visits: [],
          totalSpent: 0,
          services: {},
          masters: {},
          cancelCount: 0,
          completedCount: 0
        };
      }
      
      const visitDate = new Date(record.date);
      const cost = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;
      const services = record.services?.map(s => s.title) || [];
      const master = record.staff?.name;
      
      clientStats[clientId].visits.push({
        date: visitDate,
        cost: cost,
        status: record.attendance === 1 ? 'completed' : (record.attendance === -1 ? 'canceled' : 'pending'),
        services: services.join(', '),
        master: master
      });
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (record.attendance === 1) {
        clientStats[clientId].totalSpent += cost;
        clientStats[clientId].completedCount++;
      } else if (record.attendance === -1) {
        clientStats[clientId].cancelCount++;
      }
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
      services.forEach(service => {
        clientStats[clientId].services[service] = (clientStats[clientId].services[service] || 0) + 1;
      });
      
      if (master) {
        clientStats[clientId].masters[master] = (clientStats[clientId].masters[master] || 0) + 1;
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const clientsArray = Object.values(clientStats)
      .map(client => {
        // –ù–∞—Ö–æ–¥–∏–º –ª—é–±–∏–º—É—é —É—Å–ª—É–≥—É
        const favoriteService = Object.entries(client.services)
          .sort((a, b) => b[1] - a[1])[0];
        
        // –ù–∞—Ö–æ–¥–∏–º –ª—é–±–∏–º–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        const favoriteMaster = Object.entries(client.masters)
          .sort((a, b) => b[1] - a[1])[0];
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç–æ—Ç—É –≤–∏–∑–∏—Ç–æ–≤
        const visitDates = client.visits
          .filter(v => v.status === 'completed')
          .map(v => v.date)
          .sort((a, b) => a - b);
        
        let avgDaysBetweenVisits = 0;
        if (visitDates.length > 1) {
          const intervals = [];
          for (let i = 1; i < visitDates.length; i++) {
            const days = Math.floor((visitDates[i] - visitDates[i-1]) / (1000 * 60 * 60 * 24));
            if (days > 0) intervals.push(days);
          }
          avgDaysBetweenVisits = intervals.length > 0 
            ? Math.round(intervals.reduce((a, b) => a + b, 0) / intervals.length)
            : 0;
        }
        
        return {
          ...client,
          visitCount: client.visits.length,
          avgCheck: client.completedCount > 0 ? Math.round(client.totalSpent / client.completedCount) : 0,
          favoriteService: favoriteService ? favoriteService[0] : null,
          favoriteServiceCount: favoriteService ? favoriteService[1] : 0,
          favoriteMaster: favoriteMaster ? favoriteMaster[0] : null,
          favoriteMasterCount: favoriteMaster ? favoriteMaster[1] : 0,
          lastVisit: client.visits[client.visits.length - 1]?.date,
          daysSinceLastVisit: Math.floor((new Date() - new Date(client.visits[client.visits.length - 1]?.date)) / (1000 * 60 * 60 * 24)),
          avgDaysBetweenVisits,
          cancelRate: client.visitCount > 0 ? Math.round((client.cancelCount / client.visitCount) * 100) : 0
        };
      })
      .sort((a, b) => b.visitCount - a.visitCount);

    // –í—ã–≤–æ–¥–∏–º –¢–û–ü-100 –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('=== –¢–û–ü-100 –ö–õ–ò–ï–ù–¢–û–í –ü–û –ß–ê–°–¢–û–¢–ï –í–ò–ó–ò–¢–û–í (–ú–ê–ô-–ê–í–ì–£–°–¢ 2025) ===\n');
    
    const top100 = clientsArray.slice(0, 100);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    const groups = {
      superVip: top100.filter(c => c.visitCount >= 8),
      vip: top100.filter(c => c.visitCount >= 5 && c.visitCount < 8),
      regular: top100.filter(c => c.visitCount >= 3 && c.visitCount < 5),
      growing: top100.filter(c => c.visitCount === 2),
      single: top100.filter(c => c.visitCount === 1)
    };

    console.log('üìä –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –¢–û–ü-100:\n');
    console.log(`SUPER VIP (8+ –≤–∏–∑–∏—Ç–æ–≤): ${groups.superVip.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`VIP (5-7 –≤–∏–∑–∏—Ç–æ–≤): ${groups.vip.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ (3-4 –≤–∏–∑–∏—Ç–∞): ${groups.regular.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`–†–∞—Å—Ç—É—â–∏–µ (2 –≤–∏–∑–∏—Ç–∞): ${groups.growing.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`–†–∞–∑–æ–≤—ã–µ (1 –≤–∏–∑–∏—Ç): ${groups.single.length} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    console.log('=== SUPER VIP –ö–õ–ò–ï–ù–¢–´ (8+ –≤–∏–∑–∏—Ç–æ–≤) ===\n');
    groups.superVip.forEach((client, i) => {
      console.log(`${i + 1}. ${client.name} (${client.phone})`);
      console.log(`   üìä ${client.visitCount} –≤–∏–∑–∏—Ç–æ–≤ –∑–∞ 3 –º–µ—Å—è—Ü–∞ (–∫–∞–∂–¥—ã–µ ${client.avgDaysBetweenVisits} –¥–Ω–µ–π)`);
      console.log(`   üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: ${client.totalSpent}‚ÇΩ | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${client.avgCheck}‚ÇΩ`);
      console.log(`   ‚≠ê –õ—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞: ${client.favoriteService} (${client.favoriteServiceCount} —Ä–∞–∑)`);
      console.log(`   üë® –õ—é–±–∏–º—ã–π –º–∞—Å—Ç–µ—Ä: ${client.favoriteMaster} (${client.favoriteMasterCount} —Ä–∞–∑)`);
      console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${client.daysSinceLastVisit} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
      console.log(`   ‚ùå –û—Ç–º–µ–Ω—ã: ${client.cancelRate}%\n`);
    });

    console.log('=== VIP –ö–õ–ò–ï–ù–¢–´ (5-7 –≤–∏–∑–∏—Ç–æ–≤) ===\n');
    groups.vip.slice(0, 10).forEach((client, i) => {
      console.log(`${i + 1}. ${client.name} - ${client.visitCount} –≤–∏–∑–∏—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ ${client.avgCheck}‚ÇΩ`);
      console.log(`   –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ ${client.avgDaysBetweenVisits} –¥–Ω–µ–π | –£—Å–ª—É–≥–∞: ${client.favoriteService}`);
    });

    console.log('\n=== –ü–ê–¢–¢–ï–†–ù–´ –ü–û–í–ï–î–ï–ù–ò–Ø ===\n');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patterns = {
      weekly: top100.filter(c => c.avgDaysBetweenVisits > 0 && c.avgDaysBetweenVisits <= 10),
      biweekly: top100.filter(c => c.avgDaysBetweenVisits > 10 && c.avgDaysBetweenVisits <= 20),
      monthly: top100.filter(c => c.avgDaysBetweenVisits > 20 && c.avgDaysBetweenVisits <= 35),
      rare: top100.filter(c => c.avgDaysBetweenVisits > 35)
    };

    console.log(`üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ (—Ä–∞–∑ –≤ 7-10 –¥–Ω–µ–π): ${patterns.weekly.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`üìÖ –ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ (11-20 –¥–Ω–µ–π): ${patterns.biweekly.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ (21-35 –¥–Ω–µ–π): ${patterns.monthly.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    console.log(`üìÖ –†–µ–¥–∫–∏–µ (—Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü): ${patterns.rare.length} –∫–ª–∏–µ–Ω—Ç–æ–≤\n`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Å–ª—É–≥–∞–º
    console.log('=== –ê–ù–ê–õ–ò–ó –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô ===\n');
    
    const allServices = {};
    const allMasters = {};
    
    top100.forEach(client => {
      Object.entries(client.services).forEach(([service, count]) => {
        allServices[service] = (allServices[service] || 0) + count;
      });
      Object.entries(client.masters).forEach(([master, count]) => {
        allMasters[master] = (allMasters[master] || 0) + count;
      });
    });

    const topServices = Object.entries(allServices)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);

    console.log('–¢–û–ü-10 –£–°–õ–£–ì:');
    topServices.forEach(([service, count], i) => {
      console.log(`${i + 1}. ${service} - ${count} —Ä–∞–∑`);
    });

    console.log('\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ú–ê–°–¢–ï–†–ê–ú:');
    Object.entries(allMasters)
      .sort((a, b) => b[1] - a[1])
      .forEach(([master, count]) => {
        console.log(`${master}: ${count} –≤–∏–∑–∏—Ç–æ–≤`);
      });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Grand Slam Offers
    console.log('\n\nüéØ GRAND SLAM OFFERS –ù–ê –û–°–ù–û–í–ï –î–ê–ù–ù–´–•:\n');
    
    console.log('1Ô∏è‚É£ "–ë–ï–ó–õ–ò–ú–ò–¢ –≠–õ–ò–¢" –¥–ª—è SUPER VIP (8+ –≤–∏–∑–∏—Ç–æ–≤):');
    console.log(`   –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${groups.superVip.length} —á–µ–ª–æ–≤–µ–∫`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${Math.round(groups.superVip.reduce((sum, c) => sum + c.avgCheck, 0) / groups.superVip.length)}‚ÇΩ`);
    console.log(`   –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ ${Math.round(groups.superVip.reduce((sum, c) => sum + c.avgDaysBetweenVisits, 0) / groups.superVip.length)} –¥–Ω–µ–π`);
    console.log('   –û–§–§–ï–†: –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 9,900‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è –¥–æ 50%)');
    console.log('   + –õ–∏—á–Ω—ã–π WhatsApp –º–∞—Å—Ç–µ—Ä–∞');
    console.log('   + –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å\n');

    console.log('2Ô∏è‚É£ "–ü–û–î–ü–ò–°–ö–ê VIP" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 5-7 –≤–∏–∑–∏—Ç–∞–º–∏:');
    console.log(`   –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${groups.vip.length} —á–µ–ª–æ–≤–µ–∫`);
    console.log('   –û–§–§–ï–†: 2 –≤–∏–∑–∏—Ç–∞ –≤ –º–µ—Å—è—Ü –∑–∞ 3,500‚ÇΩ (–≤–º–µ—Å—Ç–æ 4,000‚ÇΩ)');
    console.log('   + –ë–æ–Ω—É—Å–Ω–∞—è —É—Å–ª—É–≥–∞ –∫–∞–∂–¥—ã–π 3-–π –≤–∏–∑–∏—Ç\n');

    console.log('3Ô∏è‚É£ "–ü–ê–ö–ï–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨" –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö (3-4 –≤–∏–∑–∏—Ç–∞):');
    console.log(`   –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${groups.regular.length} —á–µ–ª–æ–≤–µ–∫`);
    console.log('   –û–§–§–ï–†: –ö—É–ø–∏ 3 —Å—Ç—Ä–∏–∂–∫–∏ = 4-—è –≤ –ø–æ–¥–∞—Ä–æ–∫');
    console.log('   –¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞: 5,400‚ÇΩ (1,800‚ÇΩ –∑–∞ —Å—Ç—Ä–∏–∂–∫—É)\n');

    console.log('4Ô∏è‚É£ "–£–¢–†–ï–ù–ù–ò–ô –ö–õ–£–ë" (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤):');
    console.log('   –î–ª—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —á–∞—Å–æ–≤');
    console.log('   –û–§–§–ï–†: -40% –Ω–∞ —É—Å–ª—É–≥–∏ —Å 10:00 –¥–æ 14:00');
    console.log('   –ü–∞–∫–µ—Ç –∏–∑ 5 —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–∏–∑–∏—Ç–æ–≤: 6,000‚ÇΩ\n');

    console.log('5Ô∏è‚É£ "–ú–ê–°–¢–ï–† & –ö–õ–ò–ï–ù–¢" (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è):');
    const masterPreferences = {};
    top100.forEach(c => {
      if (c.favoriteMaster && c.favoriteMasterCount >= 3) {
        if (!masterPreferences[c.favoriteMaster]) {
          masterPreferences[c.favoriteMaster] = [];
        }
        masterPreferences[c.favoriteMaster].push(c.name);
      }
    });
    
    Object.entries(masterPreferences).forEach(([master, clients]) => {
      if (clients.length >= 5) {
        console.log(`   –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ${master} (${clients.length} –ª–æ—è–ª—å–Ω—ã—Ö):`);
        console.log(`   –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ —É —Å–≤–æ–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞`);
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }
}

analyzeClientVisits();