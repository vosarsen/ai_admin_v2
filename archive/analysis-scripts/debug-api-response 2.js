const axios = require('axios');
const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function debugAPIResponse() {
  console.log('üîç DEBUG: –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í API –î–õ–Ø –†–ê–ó–ù–´–• –ö–õ–ò–ï–ù–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  // –ë–µ—Ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤: –æ–¥–∏–Ω —Å –≤–∏–∑–∏—Ç–∞–º–∏ –∏ –æ–¥–∏–Ω –±–µ–∑
  const { data: clientWithVisits } = await supabase
    .from('clients')
    .select('id, yclients_id, name, visit_count')
    .eq('id', 1453) // –ö–ª–∏–µ–Ω—Ç —Å 32 –≤–∏–∑–∏—Ç–∞–º–∏ –≤ –Ω–∞—à–µ–π –ë–î
    .single();
    
  const { data: clientWithoutVisits } = await supabase
    .from('clients')
    .select('id, yclients_id, name, visit_count')
    .eq('name', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä')
    .eq('visit_count', 11) // –ö–ª–∏–µ–Ω—Ç —Å 11 –≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ —Å—á–µ—Ç—á–∏–∫—É, –Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤ visits
    .limit(1)
    .single();
    
  console.log('üìå –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:');
  console.log(`1. ${clientWithVisits.name} (ID: ${clientWithVisits.id}, YClients: ${clientWithVisits.yclients_id})`);
  console.log(`   Visit count: ${clientWithVisits.visit_count}, –í –Ω–∞—à–µ–π visits: –î–ê`);
  console.log(`2. ${clientWithoutVisits.name} (ID: ${clientWithoutVisits.id}, YClients: ${clientWithoutVisits.yclients_id})`);
  console.log(`   Visit count: ${clientWithoutVisits.visit_count}, –í –Ω–∞—à–µ–π visits: –ù–ï–¢`);
  console.log('');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –æ–±–æ–∏—Ö
  for (const client of [clientWithVisits, clientWithoutVisits]) {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${client.name} (YClients ID: ${client.yclients_id}):`);
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    try {
      const url = `https://api.yclients.com/api/v1/records/${companyId}`;
      
      console.log('–ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:');
      console.log(`  client_id: ${client.yclients_id}`);
      console.log(`  start_date: 2020-01-01`);
      console.log(`  end_date: 2025-12-31`);
      
      const response = await axios.get(url, {
        params: {
          client_id: client.yclients_id,
          start_date: '2020-01-01',
          end_date: '2025-12-31',
          include_finance_transactions: 1,
          with_deleted: 1
        },
        headers: {
          'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
          'Accept': 'application/vnd.api.v2+json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      const records = response.data?.data || [];
      console.log(`\nüì• API –≤–µ—Ä–Ω—É–ª ${records.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (records.length > 0) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        const clientIds = new Set();
        const clientNames = new Set();
        let ourClientRecords = 0;
        let otherClientRecords = 0;
        
        records.forEach(record => {
          const recordClientId = record.client?.id;
          const recordClientName = record.client?.name;
          
          if (recordClientId) clientIds.add(recordClientId);
          if (recordClientName) clientNames.add(recordClientName);
          
          if (recordClientId === client.yclients_id) {
            ourClientRecords++;
          } else {
            otherClientRecords++;
          }
        });
        
        console.log('üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π:');
        console.log(`  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ${ourClientRecords}`);
        console.log(`  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${otherClientRecords}`);
        console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö client_id: ${clientIds.size}`);
        console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: ${clientNames.size}`);
        
        if (clientIds.size > 1) {
          console.log('  ‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –∑–∞–ø–∏—Å–∏ –†–ê–ó–ù–´–• –∫–ª–∏–µ–Ω—Ç–æ–≤!');
          console.log(`     Client IDs: ${Array.from(clientIds).join(', ')}`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
        console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        records.slice(0, 3).forEach((record, i) => {
          console.log(`  ${i+1}. –î–∞—Ç–∞: ${record.date}`);
          console.log(`     Client ID: ${record.client?.id} (–∑–∞–ø—Ä–æ—à–µ–Ω: ${client.yclients_id})`);
          console.log(`     Client Name: ${record.client?.name}`);
          console.log(`     Deleted: ${record.deleted}`);
          console.log(`     Attendance: ${record.attendance}`);
        });
      } else {
        console.log('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      if (error.response?.data) {
        console.log('   –û—Ç–≤–µ—Ç API:', JSON.stringify(error.response.data, null, 2));
      }
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∑–∞–ø—Ä–æ—Å –ë–ï–ó client_id
  console.log('\n\nüîç –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –∑–∞–ø—Ä–æ—Å –ë–ï–ó client_id:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  try {
    const url = `https://api.yclients.com/api/v1/records/${companyId}`;
    
    const response = await axios.get(url, {
      params: {
        start_date: '2025-08-01',
        end_date: '2025-08-31',
        page: 1,
        count: 10
      },
      headers: {
        'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
        'Accept': 'application/vnd.api.v2+json',
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    const records = response.data?.data || [];
    console.log(`API –≤–µ—Ä–Ω—É–ª ${records.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü`);
    
    const uniqueClients = new Set();
    records.forEach(r => {
      if (r.client?.id) uniqueClients.add(r.client.id);
    });
    
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${uniqueClients.size}`);
    console.log(`Client IDs: ${Array.from(uniqueClients).slice(0, 10).join(', ')}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

debugAPIResponse().catch(console.error);