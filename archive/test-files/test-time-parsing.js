#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 */

const config = require('./src/config');
const messageQueue = require('./src/queue/message-queue');
const logger = require('./src/utils/logger');

async function testTimeParsing() {
  try {
    logger.info('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π');
    
    // –¢–µ—Å—Ç 1: "–î–∞–≤–∞–π –Ω–∞ —á–∞—Å"
    await messageQueue.addMessage(config.yclients.companyId, {
      from: '79001234567',
      message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É —Å–µ–≥–æ–¥–Ω—è. –°–≤–æ–±–æ–¥–Ω–æ —á—Ç–æ-—Ç–æ?',
      metadata: {
        test: true,
        scenario: 'time-parsing-test'
      }
    });
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –¢–µ—Å—Ç 2: "–Ω–∞ —á–∞—Å"
    await messageQueue.addMessage(config.yclients.companyId, {
      from: '79001234567',
      message: '–î–∞–≤–∞–π –Ω–∞ —á–∞—Å',
      metadata: {
        test: true,
        scenario: 'time-parsing-test-hour'
      }
    });
    
    logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å');
    logger.info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ worker-–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTimeParsing()
  .then(() => {
    logger.info('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    setTimeout(() => process.exit(0), 1000);
  })
  .catch(error => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });