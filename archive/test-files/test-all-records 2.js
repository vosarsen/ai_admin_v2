#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç: –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
 * –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤–æ–æ–±—â–µ –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API
 */

require('dotenv').config();
const axios = require('axios');
const { supabase } = require('./src/database/supabase');

async function testAllRecords() {
  console.log('üîç –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –ó–ê–ü–ò–°–ò –ö–û–ú–ü–ê–ù–ò–ò –ë–ï–ó –§–ò–õ–¨–¢–†–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    console.log('üìÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü...\n');
    
    const url = `https://api.yclients.com/api/v1/records/${companyId}`;
    
    const response = await axios.get(url, {
      params: {
        start_date: '2025-07-01',
        end_date: '2025-08-31',
        include_finance_transactions: 1,
        with_deleted: 0, // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        page: 1,
        count: 300 // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
      },
      headers: {
        'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
        'Accept': 'application/vnd.api.v2+json',
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    const records = response.data?.data || [];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    const uniqueClients = new Map();
    const clientsWithPhone = new Set();
    
    records.forEach(record => {
      const clientId = record.client?.id;
      const clientName = record.client?.name;
      const clientPhone = record.client?.phone;
      
      if (clientId) {
        if (!uniqueClients.has(clientId)) {
          uniqueClients.set(clientId, {
            id: clientId,
            name: clientName,
            phone: clientPhone,
            visits: 0
          });
        }
        uniqueClients.get(clientId).visits++;
        
        if (clientPhone) {
          clientsWithPhone.add(clientId);
        }
      }
    });
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π:');
    console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}`);
    console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${uniqueClients.size}`);
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${clientsWithPhone.size}`);
    console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${(records.length / uniqueClients.size).toFixed(1)}\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
    const topClients = Array.from(uniqueClients.values())
      .sort((a, b) => b.visits - a.visits)
      .slice(0, 10);
    
    console.log('üèÜ –¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–∏–∑–∏—Ç–∞–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:');
    topClients.forEach((client, i) => {
      console.log(`  ${i+1}. ${client.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${client.id}): ${client.visits} –≤–∏–∑–∏—Ç–æ–≤`);
    });
    
    // 2. –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∑–∞ –≥–æ–¥
    console.log('\n\nüìÖ –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –≤–µ—Å—å 2025 –≥–æ–¥...\n');
    
    const yearResponse = await axios.get(url, {
      params: {
        start_date: '2025-01-01',
        end_date: '2025-12-31',
        include_finance_transactions: 1,
        with_deleted: 1, // –í–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        page: 1,
        count: 300
      },
      headers: {
        'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
        'Accept': 'application/vnd.api.v2+json',
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    const yearRecords = yearResponse.data?.data || [];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${yearRecords.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ 2025 –≥–æ–¥ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n`);
    
    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∞—à–µ–π –ë–î
    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:\n');
    
    const { count: totalClients } = await supabase
      .from('clients')
      .select('*', { count: 'exact', head: true })
      .eq('company_id', companyId)
      .gt('visit_count', 0);
    
    const { data: visits } = await supabase
      .from('visits')
      .select('client_id');
    const uniqueInVisits = new Set(visits?.map(v => v.client_id).filter(id => id)).size;
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—à–µ–π –ë–î: ${totalClients}`);
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑–∏—Ç–∞–º–∏ –≤ visits: ${uniqueInVisits}`);
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ API –∑–∞ –º–µ—Å—è—Ü: ${uniqueClients.size}`);
    console.log(`  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ API –∑–∞ –º–µ—Å—è—Ü: ${records.length}`);
    console.log(`  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ API –∑–∞ –≥–æ–¥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1): ${yearRecords.length}\n`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    console.log('üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ API...\n');
    
    const meta = yearResponse.data?.meta;
    if (meta) {
      console.log('Meta –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç API:');
      console.log(`  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${meta.page || 1}`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${meta.total_pages || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${meta.count || yearRecords.length}`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${meta.total_count || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`);
    }
    
    // 5. –í–∞–∂–Ω—ã–π –≤—ã–≤–æ–¥
    console.log('üí° –í–´–í–û–î–´:');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    if (yearRecords.length >= 300) {
      console.log('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π (300).');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏.');
      console.log('   –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.');
    }
    
    const apiClientsCount = uniqueClients.size;
    const percentageWithData = Math.round((uniqueInVisits / totalClients) * 100);
    
    console.log(`\nüìä –¢–æ–ª—å–∫–æ ${percentageWithData}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã.`);
    
    if (apiClientsCount < totalClients / 2) {
      console.log('‚ùó API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ API (–ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
      console.log('   2. –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      console.log('   3. –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ YClients');
      console.log('   4. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response?.data) {
      console.error('–û—Ç–≤–µ—Ç API:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testAllRecords().catch(console.error);