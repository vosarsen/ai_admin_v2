const axios = require('axios');
const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function testMultipleClients() {
  console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –ú–ù–û–ñ–ï–°–¢–í–û –ö–õ–ò–ï–ù–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  // –ë–µ—Ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–∑–∏—Ç–æ–≤
  const { data: clients } = await supabase
    .from('clients')
    .select('id, yclients_id, phone, name, visit_count')
    .eq('company_id', 962302)
    .gt('visit_count', 5)
    .order('visit_count', { ascending: false })
    .limit(20);
    
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  const results = {
    withData: [],
    withoutData: []
  };
  
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º ' + clients.length + ' –∫–ª–∏–µ–Ω—Ç–æ–≤...\n');
  
  for (const client of clients) {
    try {
      const url = `https://api.yclients.com/api/v1/records/${companyId}`;
      
      const response = await axios.get(url, {
        params: {
          client_id: client.yclients_id,
          start_date: '2020-01-01',
          end_date: '2025-12-31',
          include_finance_transactions: 1,
          with_deleted: 1
        },
        headers: {
          'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
          'Accept': 'application/vnd.api.v2+json',
          'Content-Type': 'application/json'
        },
        timeout: 5000
      });
      
      const records = response.data?.data || [];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const clientRecords = records.filter(r => r.client?.id === client.yclients_id);
      
      if (clientRecords.length > 0) {
        results.withData.push({
          name: client.name,
          yclients_id: client.yclients_id,
          visit_count: client.visit_count,
          api_records: clientRecords.length
        });
        console.log(`‚úÖ ${client.name}: ${clientRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ API (visit_count: ${client.visit_count})`);
      } else {
        results.withoutData.push({
          name: client.name,
          yclients_id: client.yclients_id,
          visit_count: client.visit_count
        });
        console.log(`‚ùå ${client.name}: 0 –∑–∞–ø–∏—Å–µ–π –≤ API (visit_count: ${client.visit_count})`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 200));
      
    } catch (error) {
      console.log(`‚ö†Ô∏è ${client.name}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`);
    }
  }
  
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ API: ${results.withData.length}`);
  console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö –≤ API: ${results.withoutData.length}`);
  
  if (results.withData.length > 0) {
    console.log('\nüìù –ö–ª–∏–µ–Ω—Ç—ã –° –¥–∞–Ω–Ω—ã–º–∏:');
    results.withData.forEach(c => {
      console.log(`  ‚Ä¢ ${c.name}: ${c.api_records} –∑–∞–ø–∏—Å–µ–π (visit_count: ${c.visit_count})`);
    });
  }
  
  if (results.withoutData.length > 0) {
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö:');
    results.withoutData.slice(0, 5).forEach(c => {
      console.log(`  ‚Ä¢ ${c.name} (YClients ID: ${c.yclients_id}, visit_count: ${c.visit_count})`);
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º YClients ID
  const withDataIds = results.withData.map(c => c.yclients_id);
  const withoutDataIds = results.withoutData.map(c => c.yclients_id);
  
  if (withDataIds.length > 0 && withoutDataIds.length > 0) {
    const minWithData = Math.min(...withDataIds);
    const maxWithData = Math.max(...withDataIds);
    const minWithoutData = Math.min(...withoutDataIds);
    const maxWithoutData = Math.max(...withoutDataIds);
    
    console.log(`  ‚Ä¢ YClients ID —Å –¥–∞–Ω–Ω—ã–º–∏: –æ—Ç ${minWithData} –¥–æ ${maxWithData}`);
    console.log(`  ‚Ä¢ YClients ID –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: –æ—Ç ${minWithoutData} –¥–æ ${maxWithoutData}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å ID
    if (minWithData > maxWithoutData || minWithoutData > maxWithData) {
      console.log('  ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å YClients ID!');
    }
  }
}

testMultipleClients().catch(console.error);