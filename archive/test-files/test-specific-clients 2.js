const axios = require('axios');
const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function testSpecificClients() {
  console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –ö–õ–ò–ï–ù–¢–û–í –ò–ó –°–ö–†–ò–ù–®–û–¢–ê');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  // –ö–ª–∏–µ–Ω—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
  const testClients = [
    { name: '–ò–ª—å—è', phone: '79999054501', visits: 4 },
    { name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', phone: '79266082244', visits: 1 },
    { name: '–•–∞—Ä–∞–ª—å–¥', phone: '79268004645', visits: 5 },
    { name: '–ö–∏—Ä–∏–ª–ª', phone: '79853627032', visits: 4 },
    { name: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', phone: '79261159593', visits: 22 },
    { name: '–î–µ–Ω–∏—Å', phone: '79163849098', visits: 2 },
    { name: '–ì–µ–Ω–Ω–∞–¥–∏–π', phone: '79880757777', visits: 18 },
    { name: '–ù–∏–∫–∏—Ç–∞', phone: '79257751488', visits: 13 }
  ];
  
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ YClients...\n');
  
  for (const client of testClients) {
    console.log(`\nüìå ${client.name} (${client.phone}, ${client.visits} –≤–∏–∑–∏—Ç–æ–≤):`);
    console.log('‚îÄ'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞—à–µ–π –ë–î
    const { data: dbClient } = await supabase
      .from('clients')
      .select('id, yclients_id, visit_count')
      .eq('phone', client.phone.replace(/\D/g, ''))
      .eq('company_id', companyId)
      .single();
      
    if (dbClient) {
      console.log(`  ‚úì –ù–∞–π–¥–µ–Ω –≤ –ë–î: ID ${dbClient.id}, YClients: ${dbClient.yclients_id}`);
      console.log(`    Visit count: ${dbClient.visit_count}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ visits
      const { count: visitsCount } = await supabase
        .from('visits')
        .select('*', { count: 'exact', head: true })
        .eq('client_id', dbClient.id);
        
      console.log(`    –í–∏–∑–∏—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ visits: ${visitsCount || 0}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API
      try {
        const url = `https://api.yclients.com/api/v1/records/${companyId}`;
        
        const response = await axios.get(url, {
          params: {
            client_id: dbClient.yclients_id,
            start_date: '2020-01-01',
            end_date: '2025-12-31',
            include_finance_transactions: 1,
            with_deleted: 1
          },
          headers: {
            'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
            'Accept': 'application/vnd.api.v2+json',
            'Content-Type': 'application/json'
          },
          timeout: 10000
        });
        
        const records = response.data?.data || [];
        const clientRecords = records.filter(r => r.client?.id === dbClient.yclients_id);
        
        console.log(`    API –≤–µ—Ä–Ω—É–ª: ${clientRecords.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (clientRecords.length !== client.visits) {
          console.log(`    ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: YClients –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${client.visits}, API –¥–∞–µ—Ç ${clientRecords.length}`);
        }
        
      } catch (error) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
      }
      
    } else {
      console.log(`  ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î!`);
      
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
      const { data: byName } = await supabase
        .from('clients')
        .select('id, phone, yclients_id')
        .eq('name', client.name)
        .eq('company_id', companyId);
        
      if (byName && byName.length > 0) {
        console.log(`    –ù–∞–π–¥–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º:`);
        byName.slice(0, 3).forEach(c => {
          console.log(`      - ID ${c.id}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${c.phone}, YClients: ${c.yclients_id}`);
        });
      }
    }
  }
  
  console.log('\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const { count: totalInDb } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', companyId);
    
  const { data: visitsData } = await supabase
    .from('visits')
    .select('client_id');
  const uniqueInVisits = new Set(visitsData?.map(v => v.client_id).filter(id => id)).size;
  
  console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î: ${totalInDb}`);
  console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ YClients: 1098`);
  console.log(`  ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: ${1098 - totalInDb}`);
  console.log(`  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è: ${uniqueInVisits} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${Math.round(uniqueInVisits / totalInDb * 100)}%`);
}

testSpecificClients().catch(console.error);