#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ª—É–≥
 */

require('dotenv').config();
const serviceMatcher = require('./src/services/ai-admin-v2/modules/service-matcher');
const logger = require('./src/utils/logger').child({ module: 'test-personalization' });

// –¢–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏
const testServices = [
  { id: 42, title: '–ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', price: 2000, category: '–°—Ç—Ä–∏–∂–∫–∏' },
  { id: 73, title: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', price: 1800, category: '–°—Ç—Ä–∏–∂–∫–∏' },
  { id: 44, title: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô | 1 –ù–ê–°–ê–î–ö–ê', price: 1200, category: '–°—Ç—Ä–∏–∂–∫–∏' },
  { id: 46, title: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', price: 2800, category: '–°—Ç—Ä–∏–∂–∫–∏' },
  { id: 50, title: '–ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –ë–û–†–û–î–´', price: 2000, category: '–ë–æ—Ä–æ–¥–∞' },
  { id: 47, title: '–°–¢–†–ò–ñ–ö–ê + –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –ë–û–†–û–î–´', price: 3800, category: '–ö–æ–º–ø–ª–µ–∫—Å' },
  { id: 51, title: '–ë–†–ò–¢–¨–ï', price: 2500, category: '–ë–æ—Ä–æ–¥–∞' },
  { id: 52, title: '–°–¢–†–ò–ñ–ö–ê LUXINA', price: 4500, category: '–ü—Ä–µ–º–∏—É–º' },
  { id: 45, title: '–°–¢–†–ò–ñ–ö–ê | –°–ß–ê–°–¢–õ–ò–í–´–ï –ß–ê–°–´', price: 1800, category: '–°—Ç—Ä–∏–∂–∫–∏' },
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
const testClients = [
  {
    name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º',
    phone: '+79001234567',
    gender: 'male',
    visits: [
      { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-07-01') },
      { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-07-15') },
      { service_id: 46, service_name: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò', date: new Date('2025-08-01') },
      { service_id: 50, service_name: '–ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –ë–û–†–û–î–´', date: new Date('2025-08-01') },
    ],
    favorite_services: [46], // –°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò
    average_check: 2800
  },
  {
    name: '–≠–∫–æ–Ω–æ–º –∫–ª–∏–µ–Ω—Ç',
    phone: '+79002345678',
    gender: 'male',
    visits: [
      { service_id: 44, service_name: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô', date: new Date('2025-06-01') },
      { service_id: 44, service_name: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô', date: new Date('2025-07-01') },
      { service_id: 44, service_name: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô', date: new Date('2025-08-01') },
    ],
    favorite_services: [44], // –°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô
    average_check: 1200
  },
  {
    name: '–†–æ–¥–∏—Ç–µ–ª—å —Å —Ä–µ–±–µ–Ω–∫–æ–º',
    phone: '+79003456789',
    gender: 'male',
    visits: [
      { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-06-15') },
      { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-07-15') },
      { service_id: 42, service_name: '–ú–£–ñ–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-07-15') },
      { service_id: 73, service_name: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê', date: new Date('2025-08-15') },
    ],
    favorite_services: [73], // –î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê
    average_check: 1850
  },
  {
    name: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
    phone: '+79004567890',
    gender: 'male',
    visits: [],
    favorite_services: [],
    average_check: 0
  },
  {
    name: '–ñ–µ–Ω—â–∏–Ω–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)',
    phone: '+79005678901',
    gender: 'female',
    visits: [],
    favorite_services: [],
    average_check: 0
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testScenarios = [
  {
    name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å—Ç—Ä–∏–∂–∫—É',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[0],
    expected: '–°–¢–†–ò–ñ–ö–ê –ù–û–ñ–ù–ò–¶–ê–ú–ò –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π'
  },
  {
    name: '–≠–∫–æ–Ω–æ–º –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å—Ç—Ä–∏–∂–∫—É',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[1],
    expected: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π'
  },
  {
    name: '–†–æ–¥–∏—Ç–µ–ª—å –∏—â–µ—Ç —Å—Ç—Ä–∏–∂–∫—É',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[2],
    expected: '–î–ï–¢–°–ö–ê–Ø –°–¢–†–ò–ñ–ö–ê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–æ–ø–µ'
  },
  {
    name: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å—Ç—Ä–∏–∂–∫—É',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[3],
    expected: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–µ—Ä–≤—ã–º–∏'
  },
  {
    name: '–£—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä—ã–µ —É—Å–ª—É–≥–∏)',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[3],
    timeOfDay: 8,
    expected: '–°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô (–±—ã—Å—Ç—Ä–∞—è) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ'
  },
  {
    name: '–í–µ—á–µ—Ä–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø—è—Ç–Ω–∏—Ü—ã (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ)',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[0],
    dayOfWeek: 5, // Friday
    timeOfDay: 18,
    expected: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ'
  },
  {
    name: '–ñ–µ–Ω—â–∏–Ω–∞ –∏—â–µ—Ç —É—Å–ª—É–≥–∏ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)',
    query: '—Å—Ç—Ä–∏–∂–∫–∞',
    client: testClients[4],
    expected: '–ú—É–∂—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã'
  }
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ª—É–≥\n');
console.log('=' .repeat(80));

// –ú–æ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const originalDate = global.Date;

testScenarios.forEach((scenario, index) => {
  console.log(`\nüìù –¢–µ—Å—Ç ${index + 1}: ${scenario.name}`);
  console.log(`   –ó–∞–ø—Ä–æ—Å: "${scenario.query}"`);
  console.log(`   –ö–ª–∏–µ–Ω—Ç: ${scenario.client.name}`);
  if (scenario.timeOfDay !== undefined) {
    console.log(`   –í—Ä–µ–º—è: ${scenario.timeOfDay}:00`);
  }
  if (scenario.dayOfWeek !== undefined) {
    console.log(`   –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${scenario.dayOfWeek}`);
  }
  console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ${scenario.expected}`);
  console.log('   ' + '-'.repeat(60));
  
  // –ú–æ–∫–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (scenario.timeOfDay !== undefined || scenario.dayOfWeek !== undefined) {
    const mockDate = new Date('2025-08-16T10:00:00');
    if (scenario.timeOfDay !== undefined) {
      mockDate.setHours(scenario.timeOfDay);
    }
    if (scenario.dayOfWeek !== undefined) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const currentDay = mockDate.getDay();
      const diff = scenario.dayOfWeek - currentDay;
      mockDate.setDate(mockDate.getDate() + diff);
    }
    global.Date = class extends originalDate {
      constructor() {
        return mockDate;
      }
      static now() {
        return mockDate.getTime();
      }
    };
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
  const results = serviceMatcher.findTopMatchesWithPersonalization(
    scenario.query,
    testServices,
    scenario.client,
    10
  );
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É
  global.Date = originalDate;
  
  if (results.length > 0) {
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —É—Å–ª—É–≥:`);
    results.slice(0, 5).forEach((service, i) => {
      const marker = service.personalization_boost ? '‚≠ê' : '  ';
      console.log(`     ${marker} ${i + 1}. ${service.title}: ${service.price}‚ÇΩ (score: ${service.final_score || 'N/A'})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
    const firstService = results[0];
    console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–µ—Ä–≤–∞—è —É—Å–ª—É–≥–∞ - ${firstService.title}`);
    
    // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    if (firstService.personalization_reason) {
      console.log(`   üí° –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: ${firstService.personalization_reason}`);
    }
  } else {
    console.log(`   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
  }
});

console.log('\n' + '=' .repeat(80));

// –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
console.log('\nüïê –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:\n');

const timeTests = [
  { hour: 7, expected: '–ë—ã—Å—Ç—Ä—ã–µ —É—Å–ª—É–≥–∏' },
  { hour: 10, expected: '–û–±—ã—á–Ω—ã–µ —É—Å–ª—É–≥–∏' },
  { hour: 13, expected: '–û–±—ã—á–Ω—ã–µ —É—Å–ª—É–≥–∏' },
  { hour: 18, expected: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –ø—è—Ç–Ω–∏—Ü–∞/—Å—É–±–±–æ—Ç–∞)' },
  { hour: 20, expected: '–ë—ã—Å—Ç—Ä—ã–µ —É—Å–ª—É–≥–∏' }
];

timeTests.forEach(test => {
  const mockDate = new Date('2025-08-16T10:00:00');
  mockDate.setHours(test.hour);
  
  global.Date = class extends originalDate {
    constructor() {
      return mockDate;
    }
    static now() {
      return mockDate.getTime();
    }
  };
  
  const recommendations = serviceMatcher.getTimeBasedRecommendations(testServices);
  
  console.log(`${test.hour}:00 - ${test.expected}`);
  console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: ${recommendations.slice(0, 3).map(s => s.title).join(', ')}`);
});

global.Date = originalDate;

console.log('\n' + '=' .repeat(80));
console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');