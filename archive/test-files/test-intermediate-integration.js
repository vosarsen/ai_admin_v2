// test-intermediate-integration.js
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º AI Admin v2

require('dotenv').config();
const AIAdminV2 = require('./src/services/ai-admin-v2');
const intermediateContext = require('./src/services/context/intermediate-context');
const contextService = require('./src/services/context');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function simulateRapidMessages() {
  const testPhone = '79001234567';
  const companyId = 962302;
  
  console.log('\n' + colors.bright + colors.magenta + 'üöÄ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI Admin v2\n' + colors.reset);
  
  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
  await contextService.clearContext(testPhone, companyId);
  log('üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω', 'cyan');
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π: –∫–ª–∏–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  const messages = [
    { text: '–ü—Ä–∏–≤–µ—Ç', delay: 0 },
    { text: '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', delay: 500 },  // —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫
    { text: '–Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', delay: 1000 },      // —á–µ—Ä–µ–∑ 1 —Å–µ–∫
    { text: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00', delay: 1500 }   // —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
  ];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  async function sendMessage(text, index) {
    log(`\nüì± –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}: "${text}"`, 'yellow');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const beforeContext = await intermediateContext.getIntermediateContext(testPhone);
    if (beforeContext && beforeContext.isRecent) {
      log(`‚è≥ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (${beforeContext.processingStatus})`, 'cyan');
      if (beforeContext.lastBotQuestion) {
        log(`‚ùì –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞: "${beforeContext.lastBotQuestion}"`, 'blue');
      }
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI Admin
      const startTime = Date.now();
      const response = await AIAdminV2.processMessage(text, testPhone, companyId);
      const processingTime = Date.now() - startTime;
      
      if (response.success) {
        log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${processingTime}ms`, 'green');
        log(`ü§ñ –û—Ç–≤–µ—Ç: "${response.response.substring(0, 100)}..."`, 'green');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const afterContext = await intermediateContext.getIntermediateContext(testPhone);
        if (afterContext && afterContext.processingStatus === 'completed') {
          if (afterContext.mentionedServices.length > 0) {
            log(`üìã –£–ø–æ–º—è–Ω—É—Ç—ã–µ —É—Å–ª—É–≥–∏: ${afterContext.mentionedServices.join(', ')}`, 'cyan');
          }
          if (afterContext.mentionedDates.length > 0) {
            log(`üìÖ –£–ø–æ–º—è–Ω—É—Ç—ã–µ –¥–∞—Ç—ã: ${afterContext.mentionedDates.join(', ')}`, 'cyan');
          }
          if (afterContext.mentionedTimes.length > 0) {
            log(`‚è∞ –£–ø–æ–º—è–Ω—É—Ç–æ–µ –≤—Ä–µ–º—è: ${afterContext.mentionedTimes.join(', ')}`, 'cyan');
          }
        }
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞: ${response.error}`, 'red');
      }
    } catch (error) {
      log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
  for (let i = 0; i < messages.length; i++) {
    const msg = messages[i];
    
    if (msg.delay > 0) {
      log(`\n‚è±Ô∏è  –ñ–¥–µ–º ${msg.delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...`, 'cyan');
      await new Promise(resolve => setTimeout(resolve, msg.delay));
    }
    
    await sendMessage(msg.text, i);
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
  log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞:', 'bright');
  
  const finalContext = await contextService.getContext(testPhone, companyId);
  const conversationSummary = await contextService.getConversationSummary(testPhone, companyId);
  
  if (finalContext && finalContext.conversation) {
    log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: ${finalContext.conversation.length}`, 'cyan');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    const userMessages = finalContext.conversation.filter(m => m.role === 'user').map(m => m.content);
    const expectedMessages = messages.map(m => m.text);
    
    let allMessagesSaved = true;
    for (const expected of expectedMessages) {
      if (!userMessages.some(msg => msg.includes(expected))) {
        log(`‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ "${expected}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ`, 'yellow');
        allMessagesSaved = false;
      }
    }
    
    if (allMessagesSaved) {
      log('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ!', 'green');
    } else {
      log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã', 'red');
    }
  }
  
  if (conversationSummary) {
    log('\nüìù –°–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞:', 'cyan');
    console.log(conversationSummary);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main() {
  try {
    await simulateRapidMessages();
    
    log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!', 'bright');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º, —á—Ç–æ–±—ã –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
    setTimeout(() => {
      process.exit(0);
    }, 2000);
  } catch (error) {
    log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  }
}

main();