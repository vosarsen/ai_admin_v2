#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Qwen3 —á–µ—Ä–µ–∑ DashScope
 */

const axios = require('axios');

// API –∫–ª—é—á –¥–ª—è DashScope
const DASHSCOPE_API_KEY = 'sk-5903551cd419422cbf47ac6f9c6fa4ac';

// –ü—Ä–æ–º–ø—Ç –∏–∑ AI Admin v2
const AI_ADMIN_PROMPT = `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞. –í—Å—Ç—Ä–∞–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]:
- [SEARCH_SLOTS date:"2025-08-03" service_ids:[45]] - –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
- [CREATE_BOOKING] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.`;

// –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const MODELS_TO_TEST = [
  'qwen3-30b-a3b',           // –ò—Å–∫–æ–º–∞—è –º–æ–¥–µ–ª—å MoE
  'qwen3-30b-a3b-instruct',  // –í–æ–∑–º–æ–∂–Ω–æ–µ –∏–º—è
  'qwen3-coder-plus',        // –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  'qwen-plus',               // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
  'qwen-turbo',              // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
  'qwen-max',                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
  'qwen2.5-72b-instruct',    // Qwen 2.5
  'qwen2.5-32b-instruct',    // Qwen 2.5 –º–µ–Ω—å—à–µ
  'qwen2.5-14b-instruct',    // Qwen 2.5 –µ—â–µ –º–µ–Ω—å—à–µ
];

// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const TEST_MESSAGE = '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00';

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ DashScope API
async function testModel(model) {
  const url = 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions';
  
  try {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${model}`);
    
    const start = Date.now();
    const response = await axios.post(url, {
      model: model,
      messages: [
        {
          role: 'system',
          content: AI_ADMIN_PROMPT
        },
        {
          role: 'user',
          content: TEST_MESSAGE
        }
      ],
      temperature: 0.7,
      max_tokens: 200
    }, {
      headers: {
        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    const time = Date.now() - start;
    const text = response.data.choices[0].message.content;
    const model_used = response.data.model;
    
    console.log(`‚úÖ –£–°–ü–ï–•! –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞`);
    console.log(`üìù –û—Ç–≤–µ—Ç: ${text}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${time}ms`);
    console.log(`üè∑Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${model_used}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥
    const hasCommands = /\[([A-Z_]+)(?:\s+([^\]]+))?\]/.test(text);
    console.log(`üéØ –ö–æ–º–∞–Ω–¥—ã: ${hasCommands ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    
    return { success: true, model, time, hasCommands };
    
  } catch (error) {
    console.log(`‚ùå –û–®–ò–ë–ö–ê: ${error.response?.data?.error?.message || error.message}`);
    
    if (error.response?.data?.error?.code) {
      console.log(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.response.data.error.code}`);
    }
    
    return { success: false, model, error: error.response?.data?.error?.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  console.log('üöÄ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Qwen3 –≤ DashScope\n');
  console.log(`üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${TEST_MESSAGE}"`);
  console.log('=' .repeat(80));
  
  const results = [];
  
  for (const model of MODELS_TO_TEST) {
    const result = await testModel(model);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  // –ò—Ç–æ–≥–∏
  console.log('\n\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' .repeat(80));
  
  const successful = results.filter(r => r.success);
  const withCommands = successful.filter(r => r.hasCommands);
  
  console.log(`\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (${successful.length}/${results.length}):`);
  successful.forEach(r => {
    console.log(`   - ${r.model} (${r.time}ms) ${r.hasCommands ? 'üéØ' : ''}`);
  });
  
  console.log(`\nüéØ –ú–æ–¥–µ–ª–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ (${withCommands.length}/${successful.length}):`);
  withCommands.forEach(r => {
    console.log(`   - ${r.model}`);
  });
  
  console.log(`\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:`);
  results.filter(r => !r.success).forEach(r => {
    console.log(`   - ${r.model}: ${r.error}`);
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  if (successful.length > 0) {
    const fastest = successful.reduce((min, r) => r.time < min.time ? r : min);
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:`);
    console.log(`   –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å: ${fastest.model} (${fastest.time}ms)`);
    
    if (withCommands.length > 0) {
      const bestWithCommands = withCommands.reduce((min, r) => r.time < min.time ? r : min);
      console.log(`   –õ—É—á—à–∞—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${bestWithCommands.model} (${bestWithCommands.time}ms)`);
    }
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Qwen3-30B-A3B
  const qwen30b = results.find(r => r.model.includes('30b-a3b'));
  if (qwen30b && !qwen30b.success) {
    console.log('\n‚ö†Ô∏è  –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Qwen3-30B-A3B –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ DashScope API');
    console.log('   –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑:');
    console.log('   - Hugging Face Inference API');
    console.log('   - Together AI');
    console.log('   - Replicate');
    console.log('   - –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫');
  }
}

// –ó–∞–ø—É—Å–∫
console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º DashScope API (Alibaba Cloud)\n');
runTests().catch(console.error);