#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * 2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * 3. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
 * 4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ AI –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
 */

const logger = require('./src/utils/logger');
const reminderContextTracker = require('./src/services/reminder/reminder-context-tracker');
const { createRedisClient } = require('./src/utils/redis-factory');
const axios = require('axios');
const config = require('./src/config');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_PHONE = '79001234567'; // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
const TEST_BOOKING = {
  record_id: 123456,
  datetime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
  service_name: '–°—Ç—Ä–∏–∂–∫–∞',
  staff_name: '–ú–∞—Å—Ç–µ—Ä –ò–≤–∞–Ω'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 */
async function testSaveReminderContext() {
  console.log(`\n${colors.blue}üìù –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è${colors.reset}`);
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
    const saved = await reminderContextTracker.saveReminderContext(
      TEST_PHONE,
      TEST_BOOKING,
      'day_before'
    );
    
    if (saved) {
      console.log(`${colors.green}‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω${colors.reset}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
      const context = await reminderContextTracker.getReminderContext(TEST_PHONE);
      if (context) {
        console.log(`${colors.green}‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:${colors.reset}`);
        console.log(`  - –¢–∏–ø: ${context.type}`);
        console.log(`  - –ó–∞–ø–∏—Å—å: ${context.booking.recordId}`);
        console.log(`  - –£—Å–ª—É–≥–∞: ${context.booking.serviceName}`);
        console.log(`  - –ú–∞—Å—Ç–µ—Ä: ${context.booking.staffName}`);
        console.log(`  - –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${context.awaitingConfirmation}`);
        return true;
      } else {
        console.log(`${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç${colors.reset}`);
        return false;
      }
    } else {
      console.log(`${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç${colors.reset}`);
      return false;
    }
  } catch (error) {
    console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
 */
async function testConfirmationDetection() {
  console.log(`\n${colors.blue}üìù –¢–µ—Å—Ç 2: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π${colors.reset}`);
  
  const testMessages = [
    { message: '–æ–∫', expected: true },
    { message: '–û–∫', expected: true },
    { message: '–¥–∞', expected: true },
    { message: '–±—É–¥—É', expected: true },
    { message: '–ø—Ä–∏–¥—É', expected: true },
    { message: '—Å–ø–∞—Å–∏–±–æ', expected: true },
    { message: '—Ö–æ—Ä–æ—à–æ', expected: true },
    { message: 'üëç', expected: true },
    { message: '+', expected: true },
    { message: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', expected: true },
    { message: '–æ–∫, —Å–ø–∞—Å–∏–±–æ', expected: true },
    { message: '–¥–∞, –±—É–¥—É', expected: true },
    { message: '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', expected: false },
    { message: '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', expected: false },
    { message: '–∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –µ—Å—Ç—å?', expected: false }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of testMessages) {
    const isConfirmation = reminderContextTracker.isConfirmationMessage(test.message);
    const result = isConfirmation === test.expected;
    
    if (result) {
      console.log(`  ${colors.green}‚úÖ "${test.message}" - ${isConfirmation ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' : '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'}${colors.reset}`);
      passed++;
    } else {
      console.log(`  ${colors.red}‚ùå "${test.message}" - –æ–∂–∏–¥–∞–ª–æ—Å—å ${test.expected}, –ø–æ–ª—É—á–µ–Ω–æ ${isConfirmation}${colors.reset}`);
      failed++;
    }
  }
  
  console.log(`\n  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${colors.green}${passed} —É—Å–ø–µ—à–Ω–æ${colors.reset}, ${colors.red}${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ${colors.reset}`);
  return failed === 0;
}

/**
 * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
async function testHandleConfirmation() {
  console.log(`\n${colors.blue}üìù –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ API${colors.reset}`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    await reminderContextTracker.saveReminderContext(
      TEST_PHONE,
      TEST_BOOKING,
      'day_before'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const shouldHandle = await reminderContextTracker.shouldHandleAsReminderResponse(
      TEST_PHONE,
      '–æ–∫'
    );
    
    if (shouldHandle) {
      console.log(`${colors.green}‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ "–æ–∫" –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ${colors.reset}`);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ
      const marked = await reminderContextTracker.markAsConfirmed(TEST_PHONE);
      if (marked) {
        console.log(`${colors.green}‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ${colors.reset}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        const shouldHandleAgain = await reminderContextTracker.shouldHandleAsReminderResponse(
          TEST_PHONE,
          '–æ–∫'
        );
        
        if (!shouldHandleAgain) {
          console.log(`${colors.green}‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ${colors.reset}`);
          return true;
        } else {
          console.log(`${colors.red}‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ)${colors.reset}`);
          return false;
        }
      } else {
        console.log(`${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ${colors.reset}`);
        return false;
      }
    } else {
      console.log(`${colors.red}‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ "–æ–∫" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ${colors.reset}`);
      return false;
    }
  } catch (error) {
    console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
 */
async function testWebhookIntegration() {
  console.log(`\n${colors.blue}üìù –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)${colors.reset}`);
  console.log(`${colors.yellow}‚ö†Ô∏è  –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
  
  const apiUrl = process.env.API_BASE_URL || 'http://localhost:3000';
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await reminderContextTracker.saveReminderContext(
      TEST_PHONE,
      TEST_BOOKING,
      '2hours'
    );
    console.log(`${colors.green}‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω${colors.reset}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook
    console.log(`\n  –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "–û–∫, —Å–ø–∞—Å–∏–±–æ!" —á–µ—Ä–µ–∑ webhook...`);
    
    const response = await axios.post(
      `${apiUrl}/webhook/whatsapp`,
      {
        from: `${TEST_PHONE}@c.us`,
        body: '–û–∫, —Å–ø–∞—Å–∏–±–æ!',
        type: 'chat',
        isGroupMsg: false
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );
    
    if (response.status === 200) {
      console.log(`${colors.green}‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ${colors.reset}`);
      console.log(`  –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      await sleep(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
      
      const context = await reminderContextTracker.getReminderContext(TEST_PHONE);
      if (context && !context.awaitingConfirmation) {
        console.log(`${colors.green}‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${colors.reset}`);
        return true;
      } else {
        console.log(`${colors.yellow}‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è${colors.reset}`);
        return false;
      }
    } else {
      console.log(`${colors.red}‚ùå Webhook –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}${colors.reset}`);
      return false;
    }
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log(`${colors.yellow}‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç${colors.reset}`);
      return null; // –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
    }
    console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanup() {
  console.log(`\n${colors.blue}üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö${colors.reset}`);
  
  try {
    await reminderContextTracker.clearReminderContext(TEST_PHONE);
    console.log(`${colors.green}‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω${colors.reset}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const redis = await createRedisClient();
    await redis.quit();
    console.log(`${colors.green}‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ${colors.reset}`);
  } catch (error) {
    console.log(`${colors.yellow}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error.message}${colors.reset}`);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(`${colors.magenta}${'='.repeat(60)}`);
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
  console.log(`${'='.repeat(60)}${colors.reset}`);
  
  // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis –≤ —Ç—Ä–µ–∫–µ—Ä–µ
  await sleep(1000);
  
  const results = {
    saveContext: await testSaveReminderContext(),
    detection: await testConfirmationDetection(),
    handling: await testHandleConfirmation(),
    webhook: await testWebhookIntegration()
  };
  
  // –û—á–∏—Å—Ç–∫–∞
  await cleanup();
  
  // –ò—Ç–æ–≥–∏
  console.log(`\n${colors.magenta}${'='.repeat(60)}`);
  console.log(`üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø`);
  console.log(`${'='.repeat(60)}${colors.reset}`);
  
  let passed = 0;
  let failed = 0;
  let skipped = 0;
  
  for (const [test, result] of Object.entries(results)) {
    if (result === true) {
      console.log(`  ${colors.green}‚úÖ ${test}: PASSED${colors.reset}`);
      passed++;
    } else if (result === false) {
      console.log(`  ${colors.red}‚ùå ${test}: FAILED${colors.reset}`);
      failed++;
    } else {
      console.log(`  ${colors.yellow}‚è≠Ô∏è  ${test}: SKIPPED${colors.reset}`);
      skipped++;
    }
  }
  
  console.log(`\n  ${colors.green}–£—Å–ø–µ—à–Ω–æ: ${passed}${colors.reset}`);
  console.log(`  ${colors.red}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}${colors.reset}`);
  console.log(`  ${colors.yellow}–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}${colors.reset}`);
  
  if (failed === 0) {
    console.log(`\n${colors.green}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${colors.reset}`);
    process.exit(0);
  } else {
    console.log(`\n${colors.red}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
main().catch(error => {
  console.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
  console.error(error.stack);
  process.exit(1);
});