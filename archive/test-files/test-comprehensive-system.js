#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã AI Admin v2
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –±–∞—Ç—á–∏–Ω–≥, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
 */

const axios = require('axios');
const crypto = require('crypto');
const colors = require('colors');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://46.149.70.219:3000';
const SECRET_KEY = process.env.SECRET_KEY || 'HhHCDduDxqLfQzjkWxVt3';
const TEST_PHONE = '79' + Math.floor(Math.random() * 1000000000); // –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞

console.log(colors.cyan('\nüß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ AI ADMIN V2\n'));
console.log(colors.gray(`–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${TEST_PHONE}`));
console.log(colors.gray(`API URL: ${API_URL}`));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createSignature(body, timestamp) {
    const payload = JSON.stringify(body) + timestamp;
    return crypto.createHmac('sha256', SECRET_KEY)
        .update(payload)
        .digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(message, delay = 0) {
    if (delay > 0) {
        await new Promise(resolve => setTimeout(resolve, delay));
    }
    
    const timestamp = Date.now();
    const body = {
        from: TEST_PHONE,
        message: message,
        timestamp: timestamp
    };
    
    const signature = createSignature(body, timestamp);
    
    try {
        const response = await axios.post(
            `${API_URL}/webhook/whatsapp/batched`,
            body,
            {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Signature': signature,
                    'X-Timestamp': timestamp
                }
            }
        );
        
        return response.data;
    } catch (error) {
        console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`));
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞—Ç—á–µ–π
async function checkBatchStatus() {
    try {
        const response = await axios.get(`${API_URL}/webhook/whatsapp/batched/stats`);
        return response.data.stats;
    } catch (error) {
        console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`));
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function runTests() {
    console.log(colors.yellow('\nüìù –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç—á–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n'));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞...');
    
    const messages = [
        { text: '–ü—Ä–∏–≤–µ—Ç!', delay: 0 },
        { text: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', delay: 500 },
        { text: '–Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', delay: 500 },
        { text: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00', delay: 500 }
    ];
    
    for (const msg of messages) {
        const result = await sendMessage(msg.text, msg.delay);
        if (result?.success) {
            console.log(colors.green(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ "${msg.text}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞—Ç—á`));
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ç—á–µ–π
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const stats = await checkBatchStatus();
    if (stats) {
        console.log(colors.cyan('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–µ–π:'));
        console.log(`  –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π: ${stats.pendingBatches}`);
        if (stats.batches && stats.batches.length > 0) {
            stats.batches.forEach(batch => {
                console.log(`  üì¶ ${batch.phone}: ${batch.size} —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑—Ä–∞—Å—Ç: ${batch.lastMessageAge}ms`);
            });
        }
    }
    
    console.log(colors.yellow('\nüìù –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –±–∞—Ç—á–∏–Ω–≥–∞\n'));
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ –±–∞—Ç—á–∏–Ω–≥–∞...');
    
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    const statsAfter = await checkBatchStatus();
    if (statsAfter) {
        console.log(colors.cyan('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞:'));
        console.log(`  –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π: ${statsAfter.pendingBatches}`);
        if (statsAfter.pendingBatches === 0) {
            console.log(colors.green('‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞'));
        }
    }
    
    console.log(colors.yellow('\nüìù –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n'));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');
    await sendMessage('–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç —Ü–µ–Ω—ã?');
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    console.log(colors.yellow('\nüìù –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞\n'));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ 8 –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    const longBatch = [
        '–ü—Ä–∏–≤–µ—Ç',
        '–º–Ω–µ',
        '–Ω—É–∂–Ω–∞',
        '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        '–ø–æ',
        '—É—Å–ª—É–≥–∞–º',
        '–≤–∞—à–µ–≥–æ',
        '—Å–∞–ª–æ–Ω–∞'
    ];
    
    for (const word of longBatch) {
        await sendMessage(word, 200);
        console.log(colors.gray(`  ‚Üí "${word}"`));
    }
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ (12 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 12000));
    
    const finalStats = await checkBatchStatus();
    if (finalStats) {
        console.log(colors.cyan('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'));
        console.log(`  –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—á–µ–π: ${finalStats.pendingBatches}`);
    }
    
    console.log(colors.green('\n‚ú® –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´\n'));
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(colors.cyan('üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:'));
    console.log(`  ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${TEST_PHONE}`);
    console.log(`  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length + 1 + longBatch.length}`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç—á–∏–Ω–≥–∞: ‚úÖ`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: ‚úÖ`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ‚úÖ`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π: ‚úÖ`);
    
    console.log(colors.yellow('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:'));
    console.log('  pm2 logs ai-admin-batch-processor --lines 100');
    console.log('  pm2 logs ai-admin-worker-v2 --lines 100');
    console.log('  pm2 logs ai-admin-api --lines 100');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
    console.error(colors.red('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:'), error);
    process.exit(1);
});