#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */

const axios = require('axios');
const config = require('./src/config');

const TEST_PHONE = process.env.TEST_PHONE || '+79686484488';
const API_URL = process.env.AI_ADMIN_API_URL || 'http://46.149.70.219:3000';
const SECRET_KEY = process.env.SECRET_KEY || config.auth.secretKey;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
const crypto = require('crypto');
function generateHmacSignature(data, secret) {
  return crypto.createHmac('sha256', secret).update(JSON.stringify(data)).digest('hex');
}

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function sendMessage(text) {
  const messageData = {
    from: TEST_PHONE.replace('+', '') + '@c.us',
    to: 'bot@c.us',
    body: text,
    timestamp: Date.now(),
    messageId: `test_${Date.now()}_${Math.random()}`
  };

  const signature = generateHmacSignature(messageData, SECRET_KEY);
  
  try {
    log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞: "${text}"`, 'cyan');
    
    const response = await axios.post(
      `${API_URL}/webhook/whatsapp/batched`,
      messageData,
      {
        headers: {
          'Content-Type': 'application/json',
          'X-Hub-Signature-256': `sha256=${signature}`
        }
      }
    );

    if (response.status === 200) {
      log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'green');
      
      // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
      log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...', 'yellow');
      await new Promise(resolve => setTimeout(resolve, 15000));
      
      return true;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'red');
    if (error.response?.data) {
      console.error('Response:', error.response.data);
    }
    return false;
  }
}

async function runTest() {
  log('\nüß™ –¢–ï–°–¢ –û–¢–ú–ï–ù–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô', 'bright');
  log('=====================================\n', 'bright');
  
  try {
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    log('üìù –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏', 'magenta');
    await sendMessage('–ó–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∫ –ë–∞—Ä–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00');
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å
    log('\nüìù –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏', 'magenta');
    await sendMessage('–ó–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∫ –ë–∞—Ä–∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 17:00');
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π', 'magenta');
    await sendMessage('–ü–æ–∫–∞–∂–∏—Ç–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏');
    
    // –®–∞–≥ 4: –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å (–±–ª–∏–∂–∞–π—à—É—é)
    log('\n‚ùå –®–∞–≥ 4: –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏', 'magenta');
    await sendMessage('–û—Ç–º–µ–Ω–∏—Ç–µ –º–æ—é –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞');
    
    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è
    log('\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π', 'magenta');
    await sendMessage('–ü–æ–∫–∞–∂–∏—Ç–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏');
    
    // –®–∞–≥ 6: –û—Ç–º–µ–Ω—è–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å
    log('\n‚ùå –®–∞–≥ 6: –û—Ç–º–µ–Ω–∞ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏', 'magenta');
    await sendMessage('–û—Ç–º–µ–Ω–∏—Ç–µ –º–æ—é –∑–∞–ø–∏—Å—å');
    
    // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    log('\nüìã –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', 'magenta');
    await sendMessage('–ü–æ–∫–∞–∂–∏—Ç–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏');
    
    log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù', 'green');
    log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', 'yellow');
    log('ssh root@46.149.70.219 "pm2 logs ai-admin-worker-v2 --lines 100 | grep -E \\"(cancel|CANCEL|booking|attendance)\\""\n', 'cyan');
    
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`, 'red');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runTest();