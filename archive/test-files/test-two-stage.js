#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Two-Stage –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å ReAct –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É
 */

require('dotenv').config();

// –ü—Ä–æ—Å—Ç–∞—è —Ü–≤–µ—Ç–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ chalk
const colors = {
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  cyan: (text) => `\x1b[36m${text}\x1b[0m`,
  magenta: (text) => `\x1b[35m${text}\x1b[0m`,
  gray: (text) => `\x1b[90m${text}\x1b[0m`,
  white: (text) => text,
  bold: {
    green: (text) => `\x1b[1m\x1b[32m${text}\x1b[0m`,
    yellow: (text) => `\x1b[1m\x1b[33m${text}\x1b[0m`
  }
};
const chalk = colors;

// –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Two-Stage —Ä–µ–∂–∏–º
process.env.USE_TWO_STAGE = 'true';
process.env.AI_PROMPT_VERSION = 'two-stage';

const aiAdmin = require('./src/services/ai-admin-v2');
const logger = require('./src/utils/logger').child({ module: 'test-two-stage' });

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testScenarios = [
  {
    name: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤',
    message: '–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞?',
    expectedCommands: ['SEARCH_SLOTS']
  },
  {
    name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º',
    message: '–ó–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00',
    expectedCommands: ['CREATE_BOOKING']
  },
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏ —Ü–µ–Ω',
    message: '–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ë–∞—Ä–∏ –≤ –ø—è—Ç–Ω–∏—Ü—É? –ò –ø–æ–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã',
    expectedCommands: ['CHECK_STAFF_SCHEDULE', 'SHOW_PRICES']
  },
  {
    name: '–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏',
    message: '–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',
    expectedCommands: ['CANCEL_BOOKING']
  },
  {
    name: '–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    message: '–ü—Ä–∏–≤–µ—Ç!',
    expectedCommands: []
  },
  {
    name: '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞',
    message: '–¥–∞–≤–∞–π—Ç–µ –≤ 14:00',
    expectedCommands: ['CREATE_BOOKING'],
    context: {
      lastService: '—Å—Ç—Ä–∏–∂–∫–∞',
      lastDate: '–∑–∞–≤—Ç—Ä–∞'
    }
  }
];

async function testScenario(scenario) {
  console.log(chalk.blue(`\nüìã –¢–µ—Å—Ç: ${scenario.name}`));
  console.log(chalk.gray(`–°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`));
  
  const startTime = Date.now();
  
  try {
    // –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (scenario.context) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Redis
      console.log(chalk.gray('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', JSON.stringify(scenario.context)));
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º AI Admin
    const result = await aiAdmin.processMessage(
      scenario.message,
      '+79001234567',
      962302
    );
    
    const executionTime = Date.now() - startTime;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞ ${executionTime}ms`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    const executedCommands = result.commands || result.executedCommands || [];
    const commandNames = executedCommands.map(c => c.command || c.name);
    
    console.log(chalk.cyan('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'), commandNames.length > 0 ? commandNames : '–Ω–µ—Ç –∫–æ–º–∞–Ω–¥');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
    const expectedSet = new Set(scenario.expectedCommands);
    const actualSet = new Set(commandNames);
    
    const isCorrect = scenario.expectedCommands.every(cmd => actualSet.has(cmd));
    
    if (isCorrect) {
      console.log(chalk.green('‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º'));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç'));
      console.log(chalk.gray('–û–∂–∏–¥–∞–ª–æ—Å—å:'), scenario.expectedCommands);
      console.log(chalk.gray('–ü–æ–ª—É—á–µ–Ω–æ:'), commandNames);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    console.log(chalk.magenta('–û—Ç–≤–µ—Ç:'));
    console.log(chalk.white(result.response.substring(0, 200) + (result.response.length > 200 ? '...' : '')));
    
    return {
      success: true,
      time: executionTime,
      correctCommands: isCorrect
    };
    
  } catch (error) {
    console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
    return {
      success: false,
      error: error.message
    };
  }
}

async function compareWithReact() {
  console.log(chalk.yellow('\n\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Two-Stage vs ReAct'));
  
  const testMessage = '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00';
  
  // –¢–µ—Å—Ç Two-Stage
  console.log(chalk.blue('\n1Ô∏è‚É£ Two-Stage:'));
  process.env.USE_TWO_STAGE = 'true';
  process.env.USE_REACT = 'false';
  
  const twoStageStart = Date.now();
  const twoStageResult = await aiAdmin.processMessage(testMessage, '+79001234567', 962302);
  const twoStageTime = Date.now() - twoStageStart;
  
  console.log(chalk.green(`–í—Ä–µ–º—è: ${twoStageTime}ms`));
  console.log(chalk.gray('–û—Ç–≤–µ—Ç:', twoStageResult.response.substring(0, 100)));
  
  // –¢–µ—Å—Ç ReAct
  console.log(chalk.blue('\n2Ô∏è‚É£ ReAct:'));
  process.env.USE_TWO_STAGE = 'false';
  process.env.USE_REACT = 'true';
  process.env.AI_PROMPT_VERSION = 'react-prompt';
  
  const reactStart = Date.now();
  const reactResult = await aiAdmin.processMessage(testMessage, '+79001234567', 962302);
  const reactTime = Date.now() - reactStart;
  
  console.log(chalk.green(`–í—Ä–µ–º—è: ${reactTime}ms`));
  console.log(chalk.gray('–û—Ç–≤–µ—Ç:', reactResult.response.substring(0, 100)));
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  console.log(chalk.yellow('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:'));
  const speedup = ((reactTime - twoStageTime) / reactTime * 100).toFixed(1);
  
  if (twoStageTime < reactTime) {
    console.log(chalk.green(`‚úÖ Two-Stage –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${speedup}%`));
  } else {
    console.log(chalk.red(`‚ùå ReAct –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${Math.abs(speedup)}%`));
  }
  
  console.log(chalk.cyan(`Two-Stage: ${twoStageTime}ms`));
  console.log(chalk.cyan(`ReAct: ${reactTime}ms`));
}

async function runAllTests() {
  console.log(chalk.bold.green('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Two-Stage –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n'));
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  for (const scenario of testScenarios) {
    const result = await testScenario(scenario);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(chalk.bold.yellow('\n\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'));
  
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  const correctCommands = results.filter(r => r.correctCommands).length;
  const avgTime = results
    .filter(r => r.time)
    .reduce((acc, r) => acc + r.time, 0) / results.filter(r => r.time).length;
  
  console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}/${results.length}`));
  console.log(chalk.red(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}/${results.length}`));
  console.log(chalk.cyan(`üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${correctCommands}/${results.length}`));
  console.log(chalk.magenta(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(avgTime)}ms`));
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å ReAct
  await compareWithReact();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests()
  .then(() => {
    console.log(chalk.bold.green('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'));
    process.exit(0);
  })
  .catch(error => {
    console.error(chalk.red('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'), error);
    process.exit(1);
  });