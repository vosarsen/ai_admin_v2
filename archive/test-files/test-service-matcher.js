#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ServiceMatcher
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
 */

require('dotenv').config();

const { supabase } = require('./src/database/supabase');
const serviceMatcher = require('./src/services/ai-admin-v2/modules/service-matcher');

async function testServiceMatcher() {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏
    const { data: services, error } = await supabase
      .from('services')
      .select('*')
      .eq('company_id', 962302)
      .eq('is_active', true);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
      return;
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${services.length} —É—Å–ª—É–≥\n`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const testQueries = [
      '—Å—Ç—Ä–∏–∂–∫–∏',
      '–∫–∞–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏',
      '—Å—Ç—Ä–∏–∂–∫–∞',
      '–º–æ–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
      '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞'
    ];
    
    for (const query of testQueries) {
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üîç –ó–∞–ø—Ä–æ—Å: "${query}"`);
      console.log(`${'='.repeat(60)}`);
      
      // –ò—â–µ–º —Ç–æ–ø-20 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      const matches = serviceMatcher.findTopMatches(query, services, 20);
      
      if (matches.length === 0) {
        console.log('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matches.length} —É—Å–ª—É–≥:\n`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        matches.slice(0, 10).forEach((service, index) => {
          const priceStr = service.price_min === service.price_max 
            ? `${service.price_min}‚ÇΩ`
            : `${service.price_min}-${service.price_max}‚ÇΩ`;
          
          console.log(`${index + 1}. ${service.title}`);
          console.log(`   –¶–µ–Ω–∞: ${priceStr}`);
          console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${service.category_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
          console.log(`   –û—Ü–µ–Ω–∫–∞: ${service.score || service.final_score || 0}`);
          console.log();
        });
        
        if (matches.length > 10) {
          console.log(`... –∏ –µ—â–µ ${matches.length - 10} —É—Å–ª—É–≥`);
        }
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏ —Å–æ —Å–ª–æ–≤–æ–º "—Å—Ç—Ä–∏–∂–∫–∞"
    console.log(`\n${'='.repeat(60)}`);
    console.log('üìã –í–°–ï –£–°–õ–£–ì–ò –°–û –°–õ–û–í–û–ú "–°–¢–†–ò–ñ–ö–ê":');
    console.log(`${'='.repeat(60)}\n`);
    
    const haircuts = services.filter(s => 
      s.title.toLowerCase().includes('—Å—Ç—Ä–∏–∂')
    );
    
    haircuts.forEach(service => {
      const priceStr = service.price_min === service.price_max 
        ? `${service.price_min}‚ÇΩ`
        : `${service.price_min}-${service.price_max}‚ÇΩ`;
      
      console.log(`‚Ä¢ ${service.title} - ${priceStr}`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${service.category_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    });
    
    console.log(`\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${haircuts.length} —É—Å–ª—É–≥ —Å–æ —Å–ª–æ–≤–æ–º "—Å—Ç—Ä–∏–∂–∫–∞"`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testServiceMatcher();