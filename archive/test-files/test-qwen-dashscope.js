#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Qwen —á–µ—Ä–µ–∑ DashScope API (Alibaba Cloud)
 */

const axios = require('axios');

// API –∫–ª—é—á –¥–ª—è DashScope
const DASHSCOPE_API_KEY = 'sk-5903551cd419422cbf47ac6f9c6fa4ac';

// –ü—Ä–æ–º–ø—Ç –∏–∑ AI Admin v2
const AI_ADMIN_PROMPT = `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ "–°—Ç–∏–ª—å".

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ê–õ–û–ù–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: –ë–∞—Ä–±–µ—Ä—à–æ–ø "–°—Ç–∏–ª—å"
–ê–¥—Ä–µ—Å: —É–ª. –õ–µ–Ω–∏–Ω–∞ 1, –ú–æ—Å–∫–≤–∞
–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00-20:00

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò:
- –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è (id: 45) - 1500 —Ä—É–±., 30 –º–∏–Ω
- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã (id: 46) - 800 —Ä—É–±., 20 –º–∏–Ω
- –ö–æ–º–ø–ª–µ–∫—Å —Å—Ç—Ä–∏–∂–∫–∞+–±–æ—Ä–æ–¥–∞ (id: 47) - 2000 —Ä—É–±., 45 –º–∏–Ω

–ú–ê–°–¢–ï–†–ê –°–ï–ì–û–î–ù–Ø:
- –ò–≤–∞–Ω (id: 101) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10:00 –¥–æ 20:00
- –ü–µ—Ç—Ä (id: 102) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 12:00 –¥–æ 18:00
- –ê–ª–µ–∫—Å–µ–π (id: 103) - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 14:00 –¥–æ 20:00, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–æ—Ä–æ–¥–µ

–í–ê–ñ–ù–û: –í—Å—Ç—Ä–∞–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]:
- [SEARCH_SLOTS date:"2025-08-03" service_ids:[45]] - –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
- [CREATE_BOOKING date:"2025-08-03" time:"15:00" service_id:45 staff_id:101] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
- [SHOW_PRICES] - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã
- [CANCEL_BOOKING] - –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ.`;

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const TEST_SCENARIOS = [
  {
    name: '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å',
    message: '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞'
  },
  {
    name: '–ó–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–µ–º',
    message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ò–≤–∞–Ω—É –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00'
  },
  {
    name: '–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω',
    message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞ –∏ –±–æ—Ä–æ–¥–∞?'
  }
];

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ DashScope API
async function callDashScope(message, model = 'qwen-plus') {
  const url = 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions';
  
  try {
    const start = Date.now();
    const response = await axios.post(url, {
      model: model,
      messages: [
        {
          role: 'system',
          content: AI_ADMIN_PROMPT
        },
        {
          role: 'user',
          content: message
        }
      ],
      temperature: 0.7,
      top_p: 0.8,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
    
    const time = Date.now() - start;
    const text = response.data.choices[0].message.content;
    const usage = response.data.usage;
    
    return { text, time, model, usage };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ DashScope (${model}):`, error.response?.data || error.message);
    if (error.response?.data?.error) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data.error, null, 2));
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ DeepSeek –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function callDeepSeek(message) {
  const DEEPSEEK_API_KEY = 'sk-cb40ab0d0272423abb726a9bebbba9a8';
  const url = 'https://api.deepseek.com/v1/chat/completions';
  
  try {
    const start = Date.now();
    const response = await axios.post(url, {
      model: 'deepseek-chat',
      messages: [
        { role: 'system', content: AI_ADMIN_PROMPT },
        { role: 'user', content: message }
      ],
      temperature: 0.3,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    const time = Date.now() - start;
    const text = response.data.choices[0].message.content;
    const usage = response.data.usage;
    
    return { text, time, model: 'deepseek-chat', usage };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ DeepSeek:', error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function extractCommands(text) {
  const regex = /\[([A-Z_]+)(?:\s+([^\]]+))?\]/g;
  const commands = [];
  let match;
  
  while ((match = regex.exec(text)) !== null) {
    commands.push(match[0]);
  }
  
  return commands;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Qwen —á–µ—Ä–µ–∑ DashScope API\n');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: qwen-plus, qwen-turbo, qwen-max\n');
  console.log('=' .repeat(80));
  
  const results = {
    qwenPlus: [],
    qwenTurbo: [],
    deepseek: []
  };
  
  for (const scenario of TEST_SCENARIOS) {
    console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`);
    console.log('-'.repeat(80));
    
    // –¢–µ—Å—Ç Qwen-Plus
    console.log('\nüü¢ –ü—Ä–æ–±—É–µ–º Qwen-Plus...');
    const qwenPlusResult = await callDashScope(scenario.message, 'qwen-plus');
    if (qwenPlusResult) {
      console.log(`‚úÖ Qwen-Plus:`);
      console.log(`–û—Ç–≤–µ—Ç: ${qwenPlusResult.text}`);
      console.log(`–í—Ä–µ–º—è: ${qwenPlusResult.time}ms`);
      console.log(`–ö–æ–º–∞–Ω–¥—ã: ${extractCommands(qwenPlusResult.text).join(', ') || '–Ω–µ—Ç'}`);
      console.log(`–¢–æ–∫–µ–Ω—ã: ${qwenPlusResult.usage?.total_tokens || '–Ω/–¥'}`);
      
      results.qwenPlus.push({
        scenario: scenario.name,
        time: qwenPlusResult.time,
        commands: extractCommands(qwenPlusResult.text).length,
        tokens: qwenPlusResult.usage?.total_tokens || 0
      });
    }
    
    // –¢–µ—Å—Ç Qwen-Turbo (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è)
    console.log('\nüîµ –ü—Ä–æ–±—É–µ–º Qwen-Turbo...');
    const qwenTurboResult = await callDashScope(scenario.message, 'qwen-turbo');
    if (qwenTurboResult) {
      console.log(`‚úÖ Qwen-Turbo:`);
      console.log(`–û—Ç–≤–µ—Ç: ${qwenTurboResult.text}`);
      console.log(`–í—Ä–µ–º—è: ${qwenTurboResult.time}ms`);
      console.log(`–ö–æ–º–∞–Ω–¥—ã: ${extractCommands(qwenTurboResult.text).join(', ') || '–Ω–µ—Ç'}`);
      console.log(`–¢–æ–∫–µ–Ω—ã: ${qwenTurboResult.usage?.total_tokens || '–Ω/–¥'}`);
      
      results.qwenTurbo.push({
        scenario: scenario.name,
        time: qwenTurboResult.time,
        commands: extractCommands(qwenTurboResult.text).length,
        tokens: qwenTurboResult.usage?.total_tokens || 0
      });
    }
    
    // –¢–µ—Å—Ç DeepSeek –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n‚ö´ –ü—Ä–æ–±—É–µ–º DeepSeek...');
    const deepseekResult = await callDeepSeek(scenario.message);
    if (deepseekResult) {
      console.log(`‚úÖ DeepSeek:`);
      console.log(`–û—Ç–≤–µ—Ç: ${deepseekResult.text}`);
      console.log(`–í—Ä–µ–º—è: ${deepseekResult.time}ms`);
      console.log(`–ö–æ–º–∞–Ω–¥—ã: ${extractCommands(deepseekResult.text).join(', ') || '–Ω–µ—Ç'}`);
      console.log(`–¢–æ–∫–µ–Ω—ã: ${deepseekResult.usage?.total_tokens || '–Ω/–¥'}`);
      
      results.deepseek.push({
        scenario: scenario.name,
        time: deepseekResult.time,
        commands: extractCommands(deepseekResult.text).length,
        tokens: deepseekResult.usage?.total_tokens || 0
      });
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(80));
  
  // Qwen-Plus
  if (results.qwenPlus.length > 0) {
    const avgTime = results.qwenPlus.reduce((sum, r) => sum + r.time, 0) / results.qwenPlus.length;
    const commandSuccess = results.qwenPlus.filter(r => r.commands > 0).length;
    const avgTokens = results.qwenPlus.reduce((sum, r) => sum + r.tokens, 0) / results.qwenPlus.length;
    
    console.log('\nüü¢ Qwen-Plus:');
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgTime)}ms`);
    console.log(`- –û—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${commandSuccess}/${results.qwenPlus.length}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã: ${Math.round(avgTokens)}`);
    console.log(`- –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.42 input / $1.26 output –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤`);
  }
  
  // Qwen-Turbo
  if (results.qwenTurbo.length > 0) {
    const avgTime = results.qwenTurbo.reduce((sum, r) => sum + r.time, 0) / results.qwenTurbo.length;
    const commandSuccess = results.qwenTurbo.filter(r => r.commands > 0).length;
    const avgTokens = results.qwenTurbo.reduce((sum, r) => sum + r.tokens, 0) / results.qwenTurbo.length;
    
    console.log('\nüîµ Qwen-Turbo:');
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgTime)}ms`);
    console.log(`- –û—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${commandSuccess}/${results.qwenTurbo.length}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã: ${Math.round(avgTokens)}`);
    console.log(`- –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.0525 input / $0.21 output –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤`);
  }
  
  // DeepSeek
  if (results.deepseek.length > 0) {
    const avgTime = results.deepseek.reduce((sum, r) => sum + r.time, 0) / results.deepseek.length;
    const commandSuccess = results.deepseek.filter(r => r.commands > 0).length;
    const avgTokens = results.deepseek.reduce((sum, r) => sum + r.tokens, 0) / results.deepseek.length;
    
    console.log('\n‚ö´ DeepSeek:');
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgTime)}ms`);
    console.log(`- –û—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${commandSuccess}/${results.deepseek.length}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã: ${Math.round(avgTokens)}`);
    console.log(`- –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.27 input / $1.09 output –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤`);
  }
  
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. Qwen-Turbo - —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–≤ 5 —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ DeepSeek)');
  console.log('2. Qwen-Plus - –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã');
  console.log('3. Qwen-Max - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏)');
  console.log('4. –í—Å–µ –º–æ–¥–µ–ª–∏ Qwen –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
}

// –ó–∞–ø—É—Å–∫
console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º DashScope API (Alibaba Cloud)\n');
console.log('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.alibabacloud.com/help/en/model-studio/');
console.log('');

runTests().catch(console.error);