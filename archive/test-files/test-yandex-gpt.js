#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YandexGPT 5 Lite –¥–ª—è AI Admin v2
 */

const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT
const YANDEX_API_KEY = process.env.YANDEX_API_KEY || 'YOUR_API_KEY';
const YANDEX_FOLDER_ID = process.env.YANDEX_FOLDER_ID || 'YOUR_FOLDER_ID';
const YANDEX_MODEL = 'yandexgpt-lite/latest'; // –∏–ª–∏ 'yandexgpt-lite/rc'

// –ü—Ä–æ–º–ø—Ç –∏–∑ AI Admin v2
const AI_ADMIN_PROMPT = `–í—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏.

–í–ê–ñ–ù–û: –í—ã –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã].

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- [SEARCH_SLOTS date:"YYYY-MM-DD" service_ids:[1,2,3]] - –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
- [CREATE_BOOKING ...–ø–∞—Ä–∞–º–µ—Ç—Ä—ã] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
- [SHOW_PRICES] - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
- [SHOW_PORTFOLIO] - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
"–ö–æ–Ω–µ—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏. [SEARCH_SLOTS date:"2025-08-03" service_ids:[45]] –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ?"

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ö–æ–º–ø–∞–Ω–∏—è: –ë–∞—Ä–±–µ—Ä—à–æ–ø "–°—Ç–∏–ª—å"
- –£—Å–ª—É–≥–∏: –°—Ç—Ä–∏–∂–∫–∞ (id: 45, 1500 —Ä—É–±), –ë–æ—Ä–æ–¥–∞ (id: 46, 800 —Ä—É–±)
- –ú–∞—Å—Ç–µ—Ä–∞: –ò–≤–∞–Ω (id: 101), –ü–µ—Ç—Ä (id: 102)
- –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 10:00-20:00`;

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const TEST_SCENARIOS = [
  {
    name: '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å',
    message: '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞'
  },
  {
    name: '–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω',
    message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã?'
  },
  {
    name: '–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
    message: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ò–≤–∞–Ω—É –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –≤ —Å—É–±–±–æ—Ç—É –ø–æ—Å–ª–µ 15:00'
  },
  {
    name: '–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏',
    message: '–ú–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ—é –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞'
  },
  {
    name: '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
    message: '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å?'
  }
];

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ YandexGPT API
async function callYandexGPT(prompt, userMessage) {
  const url = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion';
  
  const requestBody = {
    modelUri: `gpt://${YANDEX_FOLDER_ID}/${YANDEX_MODEL}`,
    completionOptions: {
      stream: false,
      temperature: 0.3,
      maxTokens: 1000
    },
    messages: [
      {
        role: 'system',
        text: prompt
      },
      {
        role: 'user',
        text: userMessage
      }
    ]
  };

  try {
    const response = await axios.post(url, requestBody, {
      headers: {
        'Authorization': `Api-Key ${YANDEX_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.result.alternatives[0].message.text;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ YandexGPT:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ DeepSeek –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function callDeepSeek(prompt, userMessage) {
  const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY || '';
  const url = 'https://api.deepseek.com/v1/chat/completions';
  
  const requestBody = {
    model: 'deepseek-chat',
    messages: [
      {
        role: 'system',
        content: prompt
      },
      {
        role: 'user',
        content: userMessage
      }
    ],
    temperature: 0.3,
    max_tokens: 1000
  };

  try {
    const response = await axios.post(url, requestBody, {
      headers: {
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ DeepSeek:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
function extractCommands(text) {
  const commandRegex = /\[([A-Z_]+)(?:\s+([^\]]+))?\]/g;
  const commands = [];
  let match;
  
  while ((match = commandRegex.exec(text)) !== null) {
    commands.push({
      command: match[1],
      params: match[2] || ''
    });
  }
  
  return commands;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YandexGPT 5 Lite vs DeepSeek\n');
  
  const results = [];
  
  for (const scenario of TEST_SCENARIOS) {
    console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`);
    console.log('-'.repeat(80));
    
    const result = {
      scenario: scenario.name,
      message: scenario.message,
      yandex: {},
      deepseek: {}
    };
    
    // –¢–µ—Å—Ç YandexGPT
    if (YANDEX_API_KEY !== 'YOUR_API_KEY') {
      try {
        const startTime = Date.now();
        const response = await callYandexGPT(AI_ADMIN_PROMPT, scenario.message);
        const endTime = Date.now();
        
        result.yandex = {
          response,
          time: endTime - startTime,
          commands: extractCommands(response),
          success: true
        };
        
        console.log('\nüü° YandexGPT 5 Lite:');
        console.log(`–û—Ç–≤–µ—Ç: ${response}`);
        console.log(`–í—Ä–µ–º—è: ${result.yandex.time}ms`);
        console.log(`–ö–æ–º–∞–Ω–¥—ã: ${JSON.stringify(result.yandex.commands)}`);
      } catch (error) {
        result.yandex = {
          error: error.message,
          success: false
        };
        console.log('\nüü° YandexGPT 5 Lite: –û–®–ò–ë–ö–ê', error.message);
      }
    } else {
      console.log('\nüü° YandexGPT 5 Lite: –ü–†–û–ü–£–©–ï–ù–û (–Ω–µ—Ç API –∫–ª—é—á–∞)');
    }
    
    // –¢–µ—Å—Ç DeepSeek
    if (process.env.DEEPSEEK_API_KEY) {
      try {
        const startTime = Date.now();
        const response = await callDeepSeek(AI_ADMIN_PROMPT, scenario.message);
        const endTime = Date.now();
        
        result.deepseek = {
          response,
          time: endTime - startTime,
          commands: extractCommands(response),
          success: true
        };
        
        console.log('\nüîµ DeepSeek:');
        console.log(`–û—Ç–≤–µ—Ç: ${response}`);
        console.log(`–í—Ä–µ–º—è: ${result.deepseek.time}ms`);
        console.log(`–ö–æ–º–∞–Ω–¥—ã: ${JSON.stringify(result.deepseek.commands)}`);
      } catch (error) {
        result.deepseek = {
          error: error.message,
          success: false
        };
        console.log('\nüîµ DeepSeek: –û–®–ò–ë–ö–ê', error.message);
      }
    }
    
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const resultsPath = path.join(__dirname, `test-results-${timestamp}.json`);
  await fs.writeFile(resultsPath, JSON.stringify(results, null, 2));
  
  console.log(`\n\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('-'.repeat(80));
  
  const yandexStats = results.filter(r => r.yandex.success);
  const deepseekStats = results.filter(r => r.deepseek.success);
  
  if (yandexStats.length > 0) {
    const avgYandexTime = yandexStats.reduce((sum, r) => sum + r.yandex.time, 0) / yandexStats.length;
    const yandexCommandsFound = yandexStats.filter(r => r.yandex.commands.length > 0).length;
    
    console.log('\nüü° YandexGPT 5 Lite:');
    console.log(`- –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${yandexStats.length}/${TEST_SCENARIOS.length}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgYandexTime)}ms`);
    console.log(`- –û—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${yandexCommandsFound}/${yandexStats.length}`);
  }
  
  if (deepseekStats.length > 0) {
    const avgDeepseekTime = deepseekStats.reduce((sum, r) => sum + r.deepseek.time, 0) / deepseekStats.length;
    const deepseekCommandsFound = deepseekStats.filter(r => r.deepseek.commands.length > 0).length;
    
    console.log('\nüîµ DeepSeek:');
    console.log(`- –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${deepseekStats.length}/${TEST_SCENARIOS.length}`);
    console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgDeepseekTime)}ms`);
    console.log(`- –û—Ç–≤–µ—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${deepseekCommandsFound}/${deepseekStats.length}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkConfig() {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');
  
  if (YANDEX_API_KEY === 'YOUR_API_KEY') {
    console.log('‚ö†Ô∏è  YandexGPT: –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å YANDEX_API_KEY –∏ YANDEX_FOLDER_ID');
    console.log('   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://cloud.yandex.ru/docs/iam/operations/api-key/create');
  } else {
    console.log('‚úÖ YandexGPT: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (!process.env.DEEPSEEK_API_KEY) {
    console.log('‚ö†Ô∏è  DeepSeek: DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } else {
    console.log('‚úÖ DeepSeek: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  console.log('\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('export YANDEX_API_KEY="your-key"');
  console.log('export YANDEX_FOLDER_ID="your-folder-id"');
  console.log('export DEEPSEEK_API_KEY="your-key"');
  console.log();
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  checkConfig();
  
  if (YANDEX_API_KEY !== 'YOUR_API_KEY' || process.env.DEEPSEEK_API_KEY) {
    runTests().catch(console.error);
  } else {
    console.log('\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
  }
}

module.exports = { callYandexGPT, callDeepSeek, extractCommands };