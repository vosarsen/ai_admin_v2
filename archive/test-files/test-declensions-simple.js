#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Redis
 */

require('dotenv').config();
const axios = require('axios');

async function testDeclensionGeneration() {
  const apiKey = process.env.DEEPSEEK_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå DEEPSEEK_API_KEY not configured');
    return;
  }

  const serviceName = '–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞';
  
  const prompt = `
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ "${serviceName}" –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "nominative": "${serviceName}",
  "genitive": "—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–≥–æ? —á–µ–≥–æ?)",
  "dative": "–¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–º—É? —á–µ–º—É?)",
  "accusative": "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–æ–≥–æ? —á—Ç–æ?)",
  "instrumental": "—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–∫–µ–º? —á–µ–º?)",
  "prepositional": "–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ (–æ –∫–æ–º? –æ —á—ë–º?)",
  "prepositional_na": "–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º –ù–ê (–Ω–∞ –∫–æ–º? –Ω–∞ —á—ë–º?)"
}

–ü—Ä–∏–º–µ—Ä—ã:
- "–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞" -> accusative: "–º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É", prepositional_na: "–º—É–∂—Å–∫–æ–π —Å—Ç—Ä–∏–∂–∫–µ"
- "–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º" -> accusative: "–º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º", prepositional_na: "–º–∞–Ω–∏–∫—é—Ä–µ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"

–í–∞–∂–Ω–æ: prepositional_na –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–∞ "–Ω–∞" (–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ù–ê —á—Ç–æ?)
`;

  try {
    console.log('üì° Calling DeepSeek API...');
    
    const response = await axios.post('https://api.deepseek.com/chat/completions', {
      model: 'deepseek-chat',
      messages: [
        { role: 'system', content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 500
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    const aiResponse = response.data.choices[0].message.content;
    console.log('\nüìù AI Response:');
    console.log(aiResponse);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
    const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const declensions = JSON.parse(jsonMatch[0]);
      
      console.log('\n‚úÖ Parsed declensions:');
      console.log(JSON.stringify(declensions, null, 2));
      
      console.log('\nüìã Examples of usage:');
      console.log(`  "–ó–∞–≤—Ç—Ä–∞ –∂–¥—ë–º –≤–∞—Å –Ω–∞ ${declensions.prepositional_na}"`);
      console.log(`  "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${declensions.accusative} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"`);
      console.log(`  "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ ${declensions.prepositional}"`);
    } else {
      console.error('‚ùå Could not find JSON in response');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
}

testDeclensionGeneration();