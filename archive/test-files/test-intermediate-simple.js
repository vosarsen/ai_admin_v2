// test-intermediate-simple.js
// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
require('dotenv').config();
const intermediateContext = require('./src/services/context/intermediate-context');

async function testSimpleFlow() {
  console.log('\nüß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n');
  
  const phone = '79111111111';
  
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('1Ô∏è‚É£  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    const context1 = {
      client: { name: '–¢–µ—Å—Ç' },
      conversation: [
        { role: 'assistant', content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?' }
      ]
    };
    
    await intermediateContext.saveProcessingStart(phone, '–°—Ç—Ä–∏–∂–∫–∞', context1);
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è
    console.log('2Ô∏è‚É£  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');
    const saved = await intermediateContext.getIntermediateContext(phone);
    console.log(`‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:`);
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: "${saved.currentMessage}"`);
    console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: "${saved.lastBotQuestion}"`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${saved.processingStatus}\n`);
    
    // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const isProcessing = await intermediateContext.isProcessing(phone);
    console.log(`   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${isProcessing ? '–î–ê' : '–ù–ï–¢'}\n`);
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞
    console.log('4Ô∏è‚É£  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞...');
    await intermediateContext.updateAfterAIAnalysis(phone, '–•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', [
      { command: 'SEARCH_SLOTS', params: { service_name: '–°—Ç—Ä–∏–∂–∫–∞' } }
    ]);
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω\n');
    
    // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('5Ô∏è‚É£  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    await intermediateContext.markAsCompleted(phone, { 
      success: true, 
      response: '–í–∞—Å –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É' 
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('6Ô∏è‚É£  –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    const final = await intermediateContext.getIntermediateContext(phone);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${final.processingStatus}`);
    console.log(`   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${final.processingTime}ms`);
    console.log(`   - –£–ø–æ–º—è–Ω—É—Ç—ã–µ —É—Å–ª—É–≥–∏: ${final.mentionedServices.join(', ')}`);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  process.exit(0);
}

testSimpleFlow();