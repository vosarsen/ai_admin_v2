#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Qwen
 */

require('dotenv').config();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á
process.env.DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY || 'sk-5903551cd419422cbf47ac6f9c6fa4ac';

const dashscopeProvider = require('./src/services/ai/dashscope-provider');
const colors = require('colors');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const TEST_SCENARIOS = [
  {
    name: '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å',
    message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞',
    expectedModel: 'fast',
    context: {}
  },
  {
    name: '–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã',
    message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?',
    expectedModel: 'fast',
    context: {}
  },
  {
    name: '–°–ª–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç',
    message: '–Ø –∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è –∫ –≤–∞–º –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ –∫ –º–∞—Å—Ç–µ—Ä—É, –∫–∞–∂–µ—Ç—Å—è –µ–≥–æ –∑–≤–∞–ª–∏ –ò–≤–∞–Ω –∏–ª–∏ –ò–≥–æ—Ä—å, –Ω–µ –ø–æ–º–Ω—é —Ç–æ—á–Ω–æ. –û–Ω –¥–µ–ª–∞–ª –º–Ω–µ –æ—Ç–ª–∏—á–Ω—É—é —Å—Ç—Ä–∏–∂–∫—É. –ú–æ–∂–Ω–æ –∫ –Ω–µ–º—É –∂–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –ò –µ—â–µ —É –º–µ–Ω—è –±—ã–ª–∞ —Å–∫–∏–¥–∫–∞ 20%, –æ–Ω–∞ –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç?',
    expectedModel: 'smart',
    context: { isReturningClient: true }
  },
  {
    name: '–ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
    message: '–Ø –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–∞—à —Å–∞–π—Ç, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è. –ü–æ—Ç–æ–º –ø–æ–∑–≤–æ–Ω–∏–ª, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å? –ú–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ —Å—Ç—Ä–∏–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞',
    expectedModel: 'smart',
    context: {}
  },
  {
    name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
    message: '–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –µ—Å—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ 15:00, —Ç–æ —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ò–≤–∞–Ω, –∏–Ω–∞—á–µ –ª—É—á—à–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
    expectedModel: 'smart',
    context: {}
  },
  {
    name: '–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
    message: '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
    expectedModel: 'fast',
    context: {}
  },
  {
    name: '–û—Ç–º–µ–Ω–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º',
    message: '–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è?',
    expectedModel: 'smart',
    context: {}
  }
];

// –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_PROMPT = `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. 
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã] –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ.`;

async function runTest() {
  console.log(colors.cyan.bold('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Qwen\n'));
  console.log('–ú–æ–¥–µ–ª–∏:');
  console.log('- Fast: qwen-plus (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)');
  console.log('- Smart: qwen2.5-72b-instruct (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)');
  console.log(colors.gray('=' .repeat(80)) + '\n');
  
  let correctPredictions = 0;
  const results = [];
  
  for (const scenario of TEST_SCENARIOS) {
    console.log(colors.yellow(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`));
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`);
    console.log(`üéØ –û–∂–∏–¥–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: ${scenario.expectedModel}`);
    console.log(colors.gray('-'.repeat(80)));
    
    try {
      const startTime = Date.now();
      
      const result = await dashscopeProvider.call(TEST_PROMPT, {
        message: scenario.message,
        context: scenario.context
      });
      
      const isCorrect = result.modelType === scenario.expectedModel;
      if (isCorrect) correctPredictions++;
      
      console.log(`\n‚úÖ –û—Ç–≤–µ—Ç (${result.responseTime}ms):`);
      console.log(colors.gray(result.text));
      console.log(`\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${result.modelType === 'fast' ? colors.green(result.model) : colors.blue(result.model)}`);
      console.log(`üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${result.complexity}`);
      console.log(`‚ú® –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${isCorrect ? colors.green('–í–ï–†–ù–û') : colors.red('–ù–ï–í–ï–†–ù–û')}`);
      
      results.push({
        scenario: scenario.name,
        modelUsed: result.modelType,
        responseTime: result.responseTime,
        complexity: result.complexity,
        correct: isCorrect
      });
      
    } catch (error) {
      console.log(colors.red(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
      results.push({
        scenario: scenario.name,
        error: error.message
      });
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(colors.cyan.bold('\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n'));
  console.log(colors.gray('=' .repeat(80)));
  
  const stats = dashscopeProvider.getStats();
  
  console.log('\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:');
  console.log(`   Qwen-Plus (fast): ${stats.fast.count} –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ${stats.fast.avgResponseTime}ms`);
  console.log(`   Qwen2.5-72B (smart): ${stats.smart.count} –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ${stats.smart.avgResponseTime}ms`);
  
  console.log('\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:');
  console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: ${correctPredictions}/${TEST_SCENARIOS.length} (${(correctPredictions/TEST_SCENARIOS.length*100).toFixed(1)}%)`);
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const fastResults = results.filter(r => r.modelUsed === 'fast' && !r.error);
  const smartResults = results.filter(r => r.modelUsed === 'smart' && !r.error);
  
  if (fastResults.length > 0) {
    const avgFastTime = fastResults.reduce((sum, r) => sum + r.responseTime, 0) / fastResults.length;
    console.log(`\n‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å:`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgFastTime)}ms`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è: ${fastResults.map(r => r.scenario).join(', ')}`);
  }
  
  if (smartResults.length > 0) {
    const avgSmartTime = smartResults.reduce((sum, r) => sum + r.responseTime, 0) / smartResults.length;
    console.log(`\nüß† –£–º–Ω–∞—è –º–æ–¥–µ–ª—å:`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgSmartTime)}ms`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è: ${smartResults.map(r => r.scenario).join(', ')}`);
  }
  
  // –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
  console.log(colors.green.bold('\nüí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç:'));
  const fastPercentage = (stats.fast.count / (stats.fast.count + stats.smart.count) * 100).toFixed(1);
  console.log(`   ${fastPercentage}% –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª—å—é`);
  console.log(`   –≠—Ç–æ –¥–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é ~${Math.round(fastPercentage * 0.47)}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —É–º–Ω–æ–π –º–æ–¥–µ–ª–∏`);
  
  console.log(colors.cyan.bold('\n‚ú® –í—ã–≤–æ–¥:'));
  console.log('   –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤');
  console.log('   –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏!\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTest().catch(console.error);