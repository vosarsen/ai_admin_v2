#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
 */

require('dotenv').config();
const serviceDeclension = require('./src/services/declension/service-declension');
const logger = require('./src/utils/logger').child({ module: 'test-declensions' });

async function testDeclensions() {
  try {
    logger.info('üî§ Testing declension generation...');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    const testServices = [
      '–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
      '–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã',
      '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
      '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
      '–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞'
    ];
    
    logger.info(`Testing ${testServices.length} service names...`);
    
    for (const serviceName of testServices) {
      logger.info(`\nüìã Service: "${serviceName}"`);
      
      const declensions = await serviceDeclension.generateDeclensions(serviceName);
      
      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log('–°–∫–ª–æ–Ω–µ–Ω–∏—è:');
      console.log(`  –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–∫—Ç–æ? —á—Ç–æ?): ${declensions.nominative}`);
      console.log(`  –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á–µ–≥–æ?): ${declensions.genitive}`);
      console.log(`  –î–∞—Ç–µ–ª—å–Ω—ã–π (–∫–æ–º—É? —á–µ–º—É?): ${declensions.dative}`);
      console.log(`  –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á—Ç–æ?): ${declensions.accusative}`);
      console.log(`  –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (–∫–µ–º? —á–µ–º?): ${declensions.instrumental}`);
      console.log(`  –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π (–æ –∫–æ–º? –æ —á—ë–º?): ${declensions.prepositional}`);
      console.log(`  –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π —Å –ù–ê: ${declensions.prepositional_na}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ—Ä–∞–∑
      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
      console.log(`  "–ó–∞–≤—Ç—Ä–∞ –∂–¥—ë–º –≤–∞—Å –Ω–∞ ${declensions.prepositional_na || serviceName}"`);
      console.log(`  "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${declensions.accusative || serviceName} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"`);
      console.log(`  "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ ${declensions.prepositional || serviceName}"`);
    }
    
    logger.info('\n‚úÖ Declension test completed!');
    
  } catch (error) {
    logger.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDeclensions();