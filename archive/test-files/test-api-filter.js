const axios = require('axios');
const { supabase } = require('./src/database/supabase');
require('dotenv').config();

async function testFiltering() {
  // –ë–µ—Ä–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–∏–∑–∏—Ç–∞–º–∏
  const { data: client } = await supabase
    .from('clients')
    .select('id, yclients_id, phone, name, visit_count')
    .eq('company_id', 962302)
    .eq('name', '–ê–ª–µ–∫—Å–µ–π')
    .order('visit_count', { ascending: false })
    .limit(1)
    .single();
    
  console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('');
  console.log('–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:');
  console.log('  ‚Ä¢ –ò–º—è: ' + client.name);
  console.log('  ‚Ä¢ YClients ID: ' + client.yclients_id + ' (—Ç–∏–ø: ' + typeof client.yclients_id + ')');
  console.log('  ‚Ä¢ Visit count: ' + client.visit_count);
  console.log('');
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  try {
    const url = `https://api.yclients.com/api/v1/records/${companyId}`;
    
    const response = await axios.get(url, {
      params: {
        client_id: client.yclients_id,
        start_date: '2020-01-01',
        end_date: '2025-12-31',
        include_finance_transactions: 1
      },
      headers: {
        'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
        'Accept': 'application/vnd.api.v2+json',
        'Content-Type': 'application/json'
      }
    });
    
    const records = response.data?.data || [];
    console.log('üì• API –≤–µ—Ä–Ω—É–ª ' + records.length + ' –∑–∞–ø–∏—Å–µ–π');
    console.log('');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
    const clientIds = new Set();
    const clientNames = new Set();
    let ourClientRecords = 0;
    
    records.forEach(record => {
      const recordClientId = record.client?.id;
      const recordClientName = record.client?.name;
      
      if (recordClientId) clientIds.add(recordClientId);
      if (recordClientName) clientNames.add(recordClientName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const match1 = recordClientId === client.yclients_id;
      const match2 = recordClientId === parseInt(client.yclients_id);
      const match3 = String(recordClientId) === String(client.yclients_id);
      
      if (match1 || match2 || match3) {
        ourClientRecords++;
        if (ourClientRecords <= 3) {
          console.log(`‚úÖ –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ ${client.name}:`);
          console.log(`   record.client.id: ${recordClientId} (—Ç–∏–ø: ${typeof recordClientId})`);
          console.log(`   client.yclients_id: ${client.yclients_id} (—Ç–∏–ø: ${typeof client.yclients_id})`);
          console.log(`   –°—Ä–∞–≤–Ω–µ–Ω–∏—è: === ${match1}, parseInt === ${match2}, String === ${match3}`);
          console.log(`   –î–∞—Ç–∞: ${record.date}`);
          console.log('');
        }
      }
    });
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö client_id –≤ –æ—Ç–≤–µ—Ç–µ: ' + clientIds.size);
    console.log('  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤: ' + clientNames.size);
    console.log('  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ' + ourClientRecords);
    console.log('');
    
    if (clientIds.size > 1) {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API –≤–µ—Ä–Ω—É–ª –∑–∞–ø–∏—Å–∏ –†–ê–ó–ù–´–• –∫–ª–∏–µ–Ω—Ç–æ–≤!');
      console.log('  –ü—Ä–∏–º–µ—Ä—ã client_id: ' + Array.from(clientIds).slice(0, 5).join(', '));
      console.log('  –ü—Ä–∏–º–µ—Ä—ã –∏–º–µ–Ω: ' + Array.from(clientNames).slice(0, 5).join(', '));
    } else if (ourClientRecords === 0) {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!');
      console.log('  –ó–∞–ø—Ä–æ—à–µ–Ω client_id: ' + client.yclients_id);
      console.log('  –ü–æ–ª—É—á–µ–Ω—ã client_id: ' + Array.from(clientIds).join(', '));
    } else {
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.response?.status, error.message);
  }
}

testFiltering().catch(console.error);