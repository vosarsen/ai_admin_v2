#!/usr/bin/env node

const { createRedisClient } = require('./src/utils/redis-factory');
const logger = require('./src/utils/logger').child({ module: 'test-context-issue' });

async function testContextIssue() {
  const redis = createRedisClient('test-context-issue');
  
  try {
    // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –ê—Ä—Å–µ–Ω–∞
    const phone = '79068831915@c.us';
    const cleanPhone = phone.replace('@c.us', '');
    
    console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ê—Ä—Å–µ–Ω–∞ ===');
    console.log('–¢–µ–ª–µ—Ñ–æ–Ω:', phone);
    console.log('–ß–∏—Å—Ç—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:', cleanPhone);
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const intermediateKey = `intermediate:${phone}`;
    const intermediate = await redis.get(intermediateKey);
    
    if (intermediate) {
      const data = JSON.parse(intermediate);
      console.log('\nüìù –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:');
      console.log('- –°—Ç–∞—Ç—É—Å:', data.processingStatus);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.currentMessage);
      console.log('- –£–ø–æ–º—è–Ω—É—Ç—ã–µ —É—Å–ª—É–≥–∏:', data.mentionedServices);
      console.log('- –£–ø–æ–º—è–Ω—É—Ç—ã–µ –º–∞—Å—Ç–µ—Ä–∞:', data.mentionedStaff);
      console.log('- –£–ø–æ–º—è–Ω—É—Ç–æ–µ –≤—Ä–µ–º—è:', data.mentionedTimes);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞:', data.lastBotQuestion);
    } else {
      console.log('\n‚ùå –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    const contextKey = `context:962302:${cleanPhone}`;
    const context = await redis.get(contextKey);
    
    if (context) {
      const data = JSON.parse(context);
      console.log('\nüí¨ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:');
      console.log('- –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:', data.lastCommand);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ª—É–≥–∞:', data.lastService);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Å—Ç–µ—Ä:', data.lastStaff);
      console.log('- –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:', data.clientName);
      console.log('- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.recentMessages?.length || 0);
    } else {
      console.log('\n‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const messagesKey = `context:962302:${cleanPhone}:messages`;
    const messages = await redis.lrange(messagesKey, 0, -1);
    
    if (messages && messages.length > 0) {
      console.log('\nüìö –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):');
      const lastMessages = messages.slice(-5).map(m => JSON.parse(m));
      lastMessages.forEach((msg, idx) => {
        console.log(`${idx + 1}. [${new Date(msg.timestamp).toLocaleTimeString()}] ${msg.role}: ${msg.content.substring(0, 50)}...`);
      });
    } else {
      console.log('\n‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ Supabase
    const { supabase } = require('./src/database/supabase');
    
    const { data: client, error } = await supabase
      .from('clients')
      .select('*')
      .eq('phone', cleanPhone)
      .eq('company_id', 962302)
      .maybeSingle();
      
    if (client) {
      console.log('\nüë§ –ö–ª–∏–µ–Ω—Ç –≤ –±–∞–∑–µ:');
      console.log('- ID:', client.id);
      console.log('- –ò–º—è:', client.name);
      console.log('- –¢–µ–ª–µ—Ñ–æ–Ω:', client.phone);
      console.log('- –õ—é–±–∏–º–∞—è —É—Å–ª—É–≥–∞:', client.favorite_service);
      console.log('- –õ—é–±–∏–º—ã–π –º–∞—Å—Ç–µ—Ä:', client.favorite_staff);
    } else {
      console.log('\n‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
      if (error) console.error('–û—à–∏–±–∫–∞:', error);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
    console.log('\n=== –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã ===');
    if (intermediate) {
      const data = JSON.parse(intermediate);
      if (data.mentionedServices?.length === 0) {
        console.log('‚ùó –ü—Ä–æ–±–ª–µ–º–∞: —É—Å–ª—É–≥–∞ "–¥–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞" –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ mentionedServices');
        console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - AI –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å service_name');
        console.log('   - updateAfterAIAnalysis –Ω–µ –≤—ã–∑–≤–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—ã');
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    redis.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testContextIssue();