#!/usr/bin/env node

const axios = require('axios');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_URL = 'http://46.149.70.219:3000/webhook/yclients';
const SECRET_KEY = process.env.SECRET_KEY || 'your-secret-key';
const YOUR_PHONE = '+79686484488';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è webhook
function generateSignature(data) {
  return crypto
    .createHmac('sha256', SECRET_KEY)
    .update(JSON.stringify(data))
    .digest('hex');
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
function createTestEvent(recordId, iteration, fixedAppointmentTime = null) {
  const now = new Date();
  const appointmentTime = fixedAppointmentTime || new Date(now.getTime() + 24 * 60 * 60 * 1000); // –ó–∞–≤—Ç—Ä–∞
  
  return {
    event_id: `test_${Date.now()}_${iteration}`,
    event_type: 'record.updated',
    resource: 'record',
    resource_id: recordId,
    company_id: 962302,
    timestamp: now.toISOString(),
    data: {
      id: recordId,
      company_id: 962302,
      services: [
        {
          id: 45,
          title: "–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞",
          cost: 1500,
          manual_cost: 1500,
          cost_per_unit: 1500,
          discount: 0,
          first_cost: 1500,
          amount: 1
        }
      ],
      goods_transactions: [],
      staff: {
        id: 3,
        name: "–ë–∞—Ä–∏",
        specialization: "–ë–∞—Ä–±–µ—Ä",
        position: {
          id: 1,
          title: "–ë–∞—Ä–±–µ—Ä"
        }
      },
      client: {
        id: 123456,
        name: "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        phone: YOUR_PHONE.replace('+', ''),
        email: null
      },
      clients_count: 1,
      datetime: appointmentTime.toISOString(),
      create_date: now.toISOString(),
      online: true,
      attendance: 0,
      confirmed: true,
      seance_length: 3600,
      length: 3600,
      sms_before: 0,
      sms_now: false,
      sms_now_text: "",
      email_now: false,
      notified: 0,
      master_request: false,
      api_id: "",
      from_url: "",
      review_requested: false,
      visit_id: 0,
      created_user_id: 1,
      deleted: false,
      paid_full: 0,
      prepaid: false,
      prepaid_confirmed: false,
      last_change_date: now.toISOString(),
      custom_color: "",
      custom_font_color: "",
      record_labels: [],
      activity_id: 0,
      comment: "–¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ webhook",
      sms_remain_hours: 24,
      email_remain_hours: 24,
      bookform_id: 0,
      record_from: "",
      is_mobile: 0,
      is_sale_bill_printed: false,
      visit_attendance: 0,
      utm_source: null,
      utm_medium: null,
      utm_campaign: null,
      utm_term: null,
      utm_content: null
    }
  };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ webhook
async function sendWebhook(eventData, attempt) {
  try {
    const signature = generateSignature(eventData);
    
    console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ webhook #${attempt}...`);
    console.log(`Event ID: ${eventData.event_id}`);
    console.log(`Record ID: ${eventData.data.id}`);
    
    const response = await axios.post(WEBHOOK_URL, eventData, {
      headers: {
        'Content-Type': 'application/json',
        'X-Signature': signature,
        'X-Event-Type': eventData.event_type,
        'X-Company-Id': eventData.company_id
      }
    });

    console.log(`‚úÖ Webhook #${attempt} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, response.data);
    
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook #${attempt}:`, error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
async function testDuplicateWebhooks() {
  console.log('üß™ –¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ webhook —Å–æ–±—ã—Ç–∏–π');
  console.log('=====================================');
  console.log(`üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: ${YOUR_PHONE}`);
  console.log(`üîó Webhook URL: ${WEBHOOK_URL}`);
  
  const recordId = Date.now(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏
  const fixedAppointmentTime = new Date(Date.now() + 24 * 60 * 60 * 1000); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è –ø–æ–¥—Ä—è–¥
  console.log('\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 1: 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è –ø–æ–¥—Ä—è–¥');
  console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
  
  for (let i = 1; i <= 3; i++) {
    const event = createTestEvent(recordId, 1, fixedAppointmentTime); // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    await sendWebhook(event, i);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < 3) {
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }
  
  // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
  console.log('\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞
  console.log('\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–æ–±—ã—Ç–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –Ω–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ');
  
  const modifiedEvent = createTestEvent(recordId, 2);
  modifiedEvent.data.services[0].cost = 2000; // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
  modifiedEvent.data.comment = "–ò–∑–º–µ–Ω–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"; // –ò–∑–º–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  
  await sendWebhook(modifiedEvent, 4);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ –∂–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ —Ä–∞–∑
  console.log('\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
  console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç');
  
  await new Promise(resolve => setTimeout(resolve, 500));
  await sendWebhook(modifiedEvent, 5);
  
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüìã –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
  console.log('1. –í –ª–æ–≥–∞—Ö API –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö');
  console.log('2. –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ 5)');
  console.log('3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–±–∞—É–Ω—Å–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å 3 –¥—É–±–ª–∏–∫–∞—Ç–∞');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDuplicateWebhooks().catch(console.error);