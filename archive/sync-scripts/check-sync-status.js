const { supabase } = require('./src/database/supabase');

async function checkSyncStatus() {
  console.log('\nüìä –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const { count: totalClients } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('company_id', 962302);
  
  const { count: totalVisits } = await supabase
    .from('visits')
    .select('*', { count: 'exact', head: true });
  
  // –ö–ª–∏–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  const { data: clientsWithHistory } = await supabase
    .from('clients')
    .select('id')
    .eq('company_id', 962302)
    .not('visit_history', 'eq', '[]')
    .not('visit_history', 'is', null);
  
  const { data: clientsWithServices } = await supabase
    .from('clients')
    .select('id')
    .eq('company_id', 962302)
    .not('last_services', 'eq', '[]')
    .not('last_services', 'is', null);
  
  const withHistory = clientsWithHistory?.length || 0;
  const withServices = clientsWithServices?.length || 0;
  
  console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}`);
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${totalVisits}`);
  console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${withHistory} (${Math.round(withHistory/totalClients*100)}%)`);
  console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å —É—Å–ª—É–≥–∞–º–∏: ${withServices} (${Math.round(withServices/totalClients*100)}%)`);
  console.log('');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, visit_count, visit_history, last_services')
    .eq('company_id', 962302)
    .order('visit_count', { ascending: false })
    .limit(10);
  
  console.log('üèÜ –¢–û–ü-10 –ö–õ–ò–ï–ù–¢–û–í:');
  for (const client of topClients || []) {
    const hasData = client.visit_history && client.visit_history.length > 0;
    const icon = hasData ? '‚úÖ' : '‚ùå';
    const services = client.last_services?.join(', ') || '–ø—É—Å—Ç–æ';
    console.log(`  ${icon} ${client.name}: ${client.visit_count} –≤–∏–∑–∏—Ç–æ–≤`);
    console.log(`      –ò—Å—Ç–æ—Ä–∏—è: ${client.visit_history?.length || 0}, –£—Å–ª—É–≥–∏: ${services}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { data: recentVisits } = await supabase
    .from('visits')
    .select('created_at')
    .order('created_at', { ascending: false })
    .limit(1);
  
  if (recentVisits && recentVisits[0]) {
    const lastSync = new Date(recentVisits[0].created_at);
    const now = new Date();
    const diffMinutes = Math.round((now - lastSync) / 1000 / 60);
    
    console.log(`\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${diffMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    
    if (diffMinutes < 2) {
      console.log('   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –∏–¥–µ—Ç...');
    } else {
      console.log('   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }
}

checkSyncStatus().catch(console.error);