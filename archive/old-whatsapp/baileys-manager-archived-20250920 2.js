// src/integrations/whatsapp/baileys-manager.js
// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ Baileys —Å–µ—Å—Å–∏—è–º–∏ (multi-tenant)

const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const P = require('pino');
const QRCode = require('qrcode');
const EventEmitter = require('events');
const path = require('path');
const fs = require('fs').promises;
const logger = require('../../utils/logger');

class BaileysManager extends EventEmitter {
  constructor() {
    super();
    this.sessions = new Map(); // companyId -> { sock, saveCreds, qr, status }
    this.sessionsPath = path.join(process.cwd(), 'sessions');
    this.initializeManager();
  }

  async initializeManager() {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await fs.access(this.sessionsPath);
    } catch {
      await fs.mkdir(this.sessionsPath, { recursive: true });
      logger.info('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π WhatsApp');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async generateQRForCompany(companyId) {
    logger.info(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);

    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
    const existingSession = this.sessions.get(companyId);
    if (existingSession && existingSession.status === 'connected') {
      logger.info(`‚úÖ –ö–æ–º–ø–∞–Ω–∏—è ${companyId} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ WhatsApp`);
      return null; // –ù–µ –Ω—É–∂–µ–Ω QR
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR
    if (existingSession && existingSession.qr) {
      logger.info(`üì± –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QR –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
      return existingSession.qr;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    return await this.createNewSession(companyId);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é WhatsApp —Å–µ—Å—Å–∏—é
   */
  async createNewSession(companyId) {
    try {
      const authFolder = path.join(this.sessionsPath, `company_${companyId}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const { state, saveCreds } = await useMultiFileAuthState(authFolder);
      
      // –°–æ–∑–¥–∞–µ–º socket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const sock = makeWASocket({
        auth: state,
        logger: P({ level: 'silent' }),
        printQRInTerminal: false,
        browser: ['AI Admin', 'Chrome', '1.0.0'],
        generateHighQualityLinkPreview: true
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      const sessionData = {
        sock,
        saveCreds,
        qr: null,
        status: 'connecting',
        companyId,
        createdAt: Date.now()
      };
      this.sessions.set(companyId, sessionData);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers(companyId, sock, saveCreds);

      // –ñ–¥–µ–º QR-–∫–æ–¥
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          sock.ev.off('connection.update', qrHandler);
          reject(new Error('Timeout waiting for QR code'));
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        const qrHandler = async (update) => {
          if (update.qr) {
            clearTimeout(timeout);
            sock.ev.off('connection.update', qrHandler); // –£–¥–∞–ª—è–µ–º listener

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∫–∞–∫ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const qrDataURL = await QRCode.toDataURL(update.qr, {
              width: 300,
              margin: 1,
              color: {
                dark: '#000000',
                light: '#FFFFFF'
              }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –≤ —Å–µ—Å—Å–∏–∏
            sessionData.qr = qrDataURL;
            sessionData.status = 'qr_generated';

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebSocket
            this.emit(`qr-${companyId}`, qrDataURL);

            logger.info(`‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
            resolve(qrDataURL);
          }
        };

        sock.ev.on('connection.update', qrHandler); // –ò—Å–ø–æ–ª—å–∑—É–µ–º on –≤–º–µ—Å—Ç–æ once
      });

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}:`, error);
      this.sessions.delete(companyId);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  setupEventHandlers(companyId, sock, saveCreds) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sock.ev.on('creds.update', saveCreds);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    sock.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;
      const session = this.sessions.get(companyId);

      if (qr) {
        // –ù–æ–≤—ã–π QR-–∫–æ–¥
        const qrDataURL = await QRCode.toDataURL(qr, {
          width: 300,
          margin: 1
        });

        if (session) {
          session.qr = qrDataURL;
          session.status = 'qr_generated';
        }

        this.emit(`qr-${companyId}`, qrDataURL);
        logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω QR-–∫–æ–¥ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
      }

      if (connection === 'close') {
        const shouldReconnect = 
          lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
        
        logger.warn(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`, {
          reason: lastDisconnect?.error,
          shouldReconnect
        });

        if (session) {
          session.status = 'disconnected';
        }

        if (shouldReconnect) {
          logger.info(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
          setTimeout(() => this.createNewSession(companyId), 5000);
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã - –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
          const sessionToRemove = this.sessions.get(companyId);
          if (sessionToRemove) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ listeners
            sessionToRemove.sock.ev.removeAllListeners();
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º socket –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            if (sessionToRemove.sock.ws && sessionToRemove.sock.ws.readyState === 1) {
              sessionToRemove.sock.ws.close();
            }
          }
          this.sessions.delete(companyId);
          this.emit(`logged-out-${companyId}`);
        }
      }

      if (connection === 'open') {
        logger.info(`‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`, {
          user: sock.user
        });

        if (session) {
          session.status = 'connected';
          session.qr = null; // QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
          session.phone = sock.user?.id?.split('@')[0];
          session.name = sock.user?.name;
        }

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.emit(`connected-${companyId}`, {
          phone: sock.user?.id?.split('@')[0],
          name: sock.user?.name,
          companyId
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ
        this.sendTestMessage(sock, companyId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    sock.ev.on('messages.upsert', async ({ messages, type }) => {
      if (type !== 'notify') return;

      for (const msg of messages) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (msg.key.fromMe) continue;

        logger.info(`üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`, {
          from: msg.key.remoteJid,
          text: msg.message?.conversation || msg.message?.extendedTextMessage?.text
        });

        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.emit('message', {
          companyId,
          message: msg
        });
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async sendTestMessage(sock, companyId) {
    try {
      const testNumber = sock.user?.id;
      if (!testNumber) return;

      await sock.sendMessage(testNumber, {
        text: '‚úÖ AI Admin —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n–í–∞—à WhatsApp –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω.'
      });

      logger.info(`üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp
   */
  async sendMessage(companyId, phoneNumber, message) {
    const session = this.sessions.get(companyId);
    
    if (!session || session.status !== 'connected') {
      throw new Error(`WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const formattedNumber = this.formatPhoneNumber(phoneNumber);
    
    try {
      await session.sock.sendMessage(formattedNumber, {
        text: message
      });

      logger.info(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`, {
        company_id: companyId,
        to: formattedNumber
      });

      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp
   */
  formatPhoneNumber(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let cleaned = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8')) {
      cleaned = '7' + cleaned.slice(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º @s.whatsapp.net
    return `${cleaned}@s.whatsapp.net`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
   */
  getSessionStatus(companyId) {
    const session = this.sessions.get(companyId);
    
    if (!session) {
      return { status: 'not_initialized' };
    }

    return {
      status: session.status,
      phone: session.phone,
      name: session.name,
      hasQR: !!session.qr,
      createdAt: session.createdAt
    };
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–µ—Å—Å–∏—é
   */
  async disconnectSession(companyId) {
    const session = this.sessions.get(companyId);

    if (!session) {
      return false;
    }

    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ listeners
      session.sock.ev.removeAllListeners();

      // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (session.sock.logout) {
        await session.sock.logout();
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
      if (session.sock.ws && session.sock.ws.readyState === 1) {
        session.sock.ws.close();
      }

      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Map
      this.sessions.delete(companyId);

      logger.info(`üîå –°–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ${companyId}`);
      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      // –í—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
      this.sessions.delete(companyId);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   */
  getActiveSessions() {
    const sessions = [];
    
    for (const [companyId, session] of this.sessions) {
      sessions.push({
        companyId,
        status: session.status,
        phone: session.phone,
        name: session.name,
        createdAt: session.createdAt
      });
    }

    return sessions;
  }
}

module.exports = BaileysManager;