#!/usr/bin/env node

const axios = require('axios');
const crypto = require('crypto');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const randomPhone = '7900' + Math.floor(Math.random() * 9000000 + 1000000);
const randomName = ['–í–∞—Å–∏–ª–∏–π', '–ü–µ—Ç—Ä', '–ù–∏–∫–æ–ª–∞–π', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π'][Math.floor(Math.random() * 5)];

console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${randomPhone} —Å –∏–º–µ–Ω–µ–º ${randomName}`);

const webhookUrl = 'http://46.149.70.219:3000/webhook/whatsapp';
const secretKey = process.env.SECRET_KEY || 'ef2e34ba82ed1e8edb0e83b0c03e3f6a01a96b8d49c8d5b8f4e8b2a5c7d9e3f2';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HMAC –ø–æ–¥–ø–∏—Å–∏
function generateSignature(payload, secret) {
  const crypto = require('crypto');
  return crypto.createHmac('sha256', secret)
    .update(JSON.stringify(payload))
    .digest('hex');
}

async function sendTestMessage() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å
    const message1 = `–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –°–µ—Ä–≥–µ—é –∑–∞–≤—Ç—Ä–∞ –≤ 15:00`;
    const timestamp1 = Date.now();
    const payload1 = {
      from: `${randomPhone}@c.us`,
      message: message1,
      timestamp: new Date().toISOString()
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –≤ webhook-auth.js
    const method = 'POST';
    const path = '/webhook/whatsapp';
    const body = JSON.stringify(payload1);
    const signaturePayload = `${method}:${path}:${timestamp1}:${body}`;
    const signature1 = crypto.createHmac('sha256', secretKey)
      .update(signaturePayload)
      .digest('hex');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', message1);
    const response1 = await axios.post(webhookUrl, payload1, {
      headers: {
        'x-signature': signature1,
        'x-timestamp': timestamp1.toString(),
        'Content-Type': 'application/json'
      }
    });
    console.log('‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response1.data);
    
    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—Å—è
    const message2 = `–º–µ–Ω—è –∑–æ–≤—É—Ç ${randomName}`;
    const timestamp2 = Date.now();
    const payload2 = {
      from: `${randomPhone}@c.us`,
      message: message2,
      timestamp: new Date().toISOString()
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –≤ webhook-auth.js
    const method2 = 'POST';
    const path2 = '/webhook/whatsapp';
    const body2 = JSON.stringify(payload2);
    const signaturePayload2 = `${method2}:${path2}:${timestamp2}:${body2}`;
    const signature2 = crypto.createHmac('sha256', secretKey)
      .update(signaturePayload2)
      .digest('hex');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', message2);
    const response2 = await axios.post(webhookUrl, payload2, {
      headers: {
        'x-signature': signature2,
        'x-timestamp': timestamp2.toString(),
        'Content-Type': 'application/json'
      }
    });
    console.log('‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response2.data);
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ssh root@46.149.70.219 "pm2 logs ai-admin-worker-v2 --lines 50 | grep ${randomPhone}"`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

sendTestMessage();