#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–∑–∏—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –∏—Ö –≤–∏–∑–∏—Ç—ã –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è
 */

require('dotenv').config();
const axios = require('axios');
const { supabase } = require('./src/database/supabase');

async function testTopClients() {
  console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –¢–û–ü –ö–õ–ò–ï–ù–¢–û–í –° –ë–û–õ–¨–®–ò–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –í–ò–ó–ò–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const bearerToken = process.env.YCLIENTS_BEARER_TOKEN;
  const userToken = process.env.YCLIENTS_USER_TOKEN;
  const companyId = 962302;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤–∏–∑–∏—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ visits
  const { data: visits } = await supabase
    .from('visits')
    .select('client_id');
  const syncedIds = new Set(visits?.map(v => v.client_id).filter(id => id));
  
  const { data: topClients } = await supabase
    .from('clients')
    .select('id, yclients_id, name, phone, visit_count')
    .eq('company_id', companyId)
    .gt('visit_count', 20)
    .order('visit_count', { ascending: false })
    .limit(5);
  
  const unsyncedTopClients = topClients?.filter(c => !syncedIds.has(c.id));
  
  console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º ${unsyncedTopClients?.length || 0} —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤:\n`);
  
  for (const client of unsyncedTopClients || []) {
    console.log(`\nüìå ${client.name} (ID: ${client.id}, YClients: ${client.yclients_id})`);
    console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}`);
    console.log(`   Visit count –≤ –ë–î: ${client.visit_count}`);
    console.log('   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ API
      const url = `https://api.yclients.com/api/v1/records/${companyId}`;
      
      const response = await axios.get(url, {
        params: {
          client_id: client.yclients_id,
          start_date: '2020-01-01',
          end_date: '2025-12-31',
          include_finance_transactions: 1,
          with_deleted: 1
        },
        headers: {
          'Authorization': `Bearer ${bearerToken}, User ${userToken}`,
          'Accept': 'application/vnd.api.v2+json',
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });
      
      const records = response.data?.data || [];
      const clientRecords = records.filter(r => 
        r.client?.id === client.yclients_id || 
        r.client?.id === parseInt(client.yclients_id)
      );
      
      console.log(`   üì• API –æ—Ç–≤–µ—Ç:`);
      console.log(`      ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${records.length}`);
      console.log(`      ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ${clientRecords.length}`);
      
      if (clientRecords.length === 0 && records.length > 0) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
        const clientsInResponse = new Set();
        records.forEach(r => {
          if (r.client?.id) {
            clientsInResponse.add(r.client.id);
          }
        });
        console.log(`      ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: ${Array.from(clientsInResponse).slice(0, 5).join(', ')}...`);
        console.log(`      ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç ${client.yclients_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API!`);
      }
      
      if (clientRecords.length > 0) {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–∑–∏—Ç—ã –≤ API!`);
        console.log(`      –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç –≤–∏–∑–∏—Ç–æ–≤:`);
        clientRecords.slice(0, 5).forEach((r, i) => {
          console.log(`      ${i+1}. ${r.date} - ${r.services?.map(s => s.title).join(', ')}`);
        });
      } else {
        console.log(`   ‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞`);
        console.log(`      –•–æ—Ç—è –≤ –ë–î —É–∫–∞–∑–∞–Ω–æ ${client.visit_count} –≤–∏–∑–∏—Ç–æ–≤`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
    }
  }
  
  console.log('\n\nüí° –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ visits
  const { data: visitsClients } = await supabase
    .from('visits')
    .select('client_yclients_id');
  const uniqueYclientsIds = new Set(visitsClients?.map(v => v.client_yclients_id).filter(id => id));
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∑–∏—Ç–æ–≤:`);
  console.log(`  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö YClients ID –≤ visits: ${uniqueYclientsIds.size}`);
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î: 1113`);
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç API: ${Math.round(uniqueYclientsIds.size / 1113 * 100)}%`);
  
  console.log('\n‚ö†Ô∏è –í–´–í–û–î:');
  console.log('  YClients API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑–∏—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è ~10% –∫–ª–∏–µ–Ω—Ç–æ–≤.');
  console.log('  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
  console.log('  1. –°—Ç–∞—Ä—ã–µ –≤–∏–∑–∏—Ç—ã (–¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API');
  console.log('  2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞');
  console.log('  3. –ö–ª–∏–µ–Ω—Ç—ã –±—ã–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≤–∏–∑–∏—Ç—ã –Ω–µ –±—ã–ª–∏');
  console.log('  4. –î–∞–Ω–Ω—ã–µ –≤ YClients –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
}

testTopClients().catch(console.error);