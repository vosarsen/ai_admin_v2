// test-batch-service.js
const batchService = require('./src/services/redis-batch-service');
const logger = require('./src/utils/logger');

// –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logger.level = 'info';

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testBatchService() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis Batch Service\n');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...');
    await batchService.initialize();
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    const testPhone = '79001234567';
    await batchService.clearBatch(testPhone);

    // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('2. –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await batchService.addMessage(testPhone, '–ü—Ä–∏–≤–µ—Ç', 962302, { test: true });
    
    let stats = await batchService.getStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
    console.log(`   - Pending batches: ${stats.pendingBatches}`);
    console.log(`   - Batch size: ${stats.batches[0]?.size || 0}`);
    console.log('');

    // –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ
    console.log('3. –¢–µ—Å—Ç rapid-fire —Å–æ–æ–±—â–µ–Ω–∏–π...');
    const messages = ['–∑–∞–ø–∏—à–∏—Ç–µ', '–º–µ–Ω—è –Ω–∞', '—Å—Ç—Ä–∏–∂–∫—É', '–∫ –ë–∞—Ä–∏', '–Ω–∞ –∑–∞–≤—Ç—Ä–∞', '–≤ 8', '–≤–µ—á–µ—Ä–∞'];
    
    for (const msg of messages) {
      await batchService.addMessage(testPhone, msg, 962302, { test: true });
      console.log(`   + –î–æ–±–∞–≤–ª–µ–Ω–æ: "${msg}"`);
      await sleep(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }
    
    stats = await batchService.getStats();
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ rapid-fire:`);
    console.log(`   - Batch size: ${stats.batches[0]?.size || 0} messages`);
    console.log(`   - Last message age: ${stats.batches[0]?.lastMessageAge || 0}ms\n`);

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ shouldProcessBatch
    console.log('4. –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞...');
    let shouldProcess = await batchService.shouldProcessBatch(testPhone);
    console.log(`   - Should process immediately: ${shouldProcess}`);
    
    console.log('   - –ñ–¥–µ–º 5.5 —Å–µ–∫—É–Ω–¥...');
    await sleep(5500);
    
    shouldProcess = await batchService.shouldProcessBatch(testPhone);
    console.log(`   - Should process after timeout: ${shouldProcess}\n`);

    // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –≤—Ä—É—á–Ω—É—é
    console.log('5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞...');
    await batchService.processBatch(testPhone);
    console.log('‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞—Ç—á –æ—á–∏—â–µ–Ω
    stats = await batchService.getStats();
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`   - Pending batches: ${stats.pendingBatches}\n`);

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    console.log('6. –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
    const users = ['79001111111', '79002222222', '79003333333'];
    
    for (const phone of users) {
      await batchService.addMessage(phone, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${phone}`, 962302);
    }
    
    stats = await batchService.getStats();
    console.log(`üìä –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    console.log(`   - Total pending batches: ${stats.pendingBatches}`);
    stats.batches.forEach(b => {
      console.log(`   - ${b.phone}: ${b.size} messages`);
    });
    console.log('');

    // –û—á–∏—Å—Ç–∫–∞
    console.log('7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    for (const phone of [...users, testPhone]) {
      await batchService.clearBatch(phone);
    }
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

    // –¢–µ—Å—Ç 6: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    console.log('8. –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞...');
    const maxTestPhone = '79009999999';
    
    for (let i = 1; i <= 12; i++) {
      await batchService.addMessage(maxTestPhone, `–°–æ–æ–±—â–µ–Ω–∏–µ ${i}`, 962302);
    }
    
    stats = await batchService.getStats();
    const maxBatch = stats.batches.find(b => b.phone === maxTestPhone);
    console.log(`   - Added 12 messages`);
    console.log(`   - Batch size: ${maxBatch?.size || 0} (max is 10)`);
    
    shouldProcess = await batchService.shouldProcessBatch(maxTestPhone);
    console.log(`   - Should process (size > max): ${shouldProcess}\n`);
    
    await batchService.clearBatch(maxTestPhone);

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  } finally {
    await batchService.close();
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testBatchService();