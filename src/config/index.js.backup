// src/config/index.js
require('dotenv').config();
const secureConfig = require('./secure-config');

// Helper to get config value with secure fallback
const getConfig = (key) => secureConfig.get(key) || process.env[key];

module.exports = {
  app: {
    env: process.env.NODE_ENV || 'development',
    port: parseInt(process.env.PORT) || 3000,
    logLevel: process.env.LOG_LEVEL || 'info'
  },

  redis: {
    url: process.env.REDIS_URL || 'redis://localhost:6379',
    password: getConfig('REDIS_PASSWORD'),
    options: {
      maxRetriesPerRequest: null,
      enableReadyCheck: false,
      reconnectOnError: (err) => {
        const targetError = 'READONLY';
        if (err.message.includes(targetError)) {
          return true;
        }
        return false;
      },
      retryStrategy: (times) => {
        if (times > 3) {
          logger.error('Redis connection failed after 3 retries');
          return null;
        }
        return Math.min(times * 200, 2000);
      }
    }
  },

  queue: {
    messageQueue: process.env.MESSAGE_QUEUE_NAME || 'whatsapp-messages',
    reminderQueue: process.env.REMINDER_QUEUE_NAME || 'reminders',
    maxConcurrentWorkers: parseInt(process.env.MAX_CONCURRENT_WORKERS) || 3,
    defaultJobOptions: {
      removeOnComplete: 100,
      removeOnFail: 500,
      attempts: 3,
      backoff: {
        type: 'exponential',
        delay: 2000
      }
    }
  },

  whatsapp: {
    venomServerUrl: process.env.VENOM_SERVER_URL || 'http://localhost:3001',
    apiKey: getConfig('VENOM_API_KEY'),
    secretKey: getConfig('VENOM_SECRET_KEY'),
    timeout: 10000,
    retries: 3
  },

  yclients: {
    bearerToken: getConfig('YCLIENTS_BEARER_TOKEN'),
    userToken: getConfig('YCLIENTS_USER_TOKEN'),
    partnerId: process.env.YCLIENTS_PARTNER_ID,
    companyId: process.env.YCLIENTS_COMPANY_ID,
    apiUrl: 'https://api.yclients.com/api/v1',
    timeout: 30000,
    rateLimit: {
      requestsPerHour: 450,
      burstLimit: 10
    }
  },

  ai: {
    apiKey: getConfig('DEEPSEEK_API_KEY'),
    apiUrl: process.env.DEEPSEEK_API_URL || 'https://api.deepseek.com/v1/chat/completions',
    model: process.env.DEEPSEEK_MODEL || 'deepseek-chat',
    temperature: parseFloat(process.env.DEEPSEEK_TEMPERATURE) || 0.7,
    maxTokens: parseInt(process.env.DEEPSEEK_MAX_TOKENS) || 1500,
    timeout: 30000
  },

  database: {
    supabaseUrl: process.env.SUPABASE_URL,
    supabaseKey: getConfig('SUPABASE_KEY')
  },

  business: {
    reminderAdvanceHours: parseInt(process.env.REMINDER_ADVANCE_HOURS) || 2,
    reminderDayBeforeTime: process.env.REMINDER_DAY_BEFORE_TIME || '20:00',
    maxBookingDaysAhead: parseInt(process.env.MAX_BOOKING_DAYS_AHEAD) || 30,
    minBookingMinutesAhead: parseInt(process.env.MIN_BOOKING_MINUTES_AHEAD) || 30,
    timezone: 'Europe/Moscow'
  }
};