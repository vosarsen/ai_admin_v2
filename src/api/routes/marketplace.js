// src/api/routes/marketplace.js
const express = require('express');
const router = express.Router();
const path = require('path');
const logger = require('../../utils/logger');
const MarketplaceService = require('../../services/marketplace/marketplace-service');
const { validateApiKey } = require('../../middlewares/webhook-auth');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
const marketplaceService = new MarketplaceService();

/**
 * GET /marketplace/connect
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 */
router.get('/connect', (req, res) => {
  try {
    res.sendFile(path.join(__dirname, '../../../public/marketplace/connect.html'));
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }
});

/**
 * POST /marketplace/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 */
router.post('/register', async (req, res) => {
  try {
    const { salon_id, phone, email } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!salon_id) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä salon_id'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è salon_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)
    const salonId = parseInt(salon_id);
    if (!Number.isInteger(salonId) || salonId <= 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç salon_id'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (phone) {
      const phoneClean = phone.replace(/\D/g, '');
      if (phoneClean.length < 10 || phoneClean.length > 15) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        });
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
    const company = await marketplaceService.createOrGetCompany(salonId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º API –∫–ª—é—á –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    const apiKey = marketplaceService.generateAPIKey();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis
    const token = `${company.id}_${Date.now()}`;
    await marketplaceService.saveToken(token, company.id);

    logger.info('‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', {
      companyId: company.id,
      salonId: salonId
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp
    const connectUrl = `/marketplace/connect?token=${encodeURIComponent(token)}&company=${company.id}&salon=${salonId}`;

    res.json({
      success: true,
      company_id: company.id,
      salon_id: salonId,
      api_key: apiKey,
      connect_url: connectUrl,
      message: '–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏'
    });
  }
});

/**
 * GET /marketplace/qr/:token
 * –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp
 */
router.get('/qr/:token', async (req, res) => {
  try {
    const { token } = req.params;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º companyId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const tokenParts = token.split('_');
    const companyId = tokenParts[0];

    if (!companyId) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const isValid = await marketplaceService.validateToken(token, companyId);
    if (!isValid) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    const qr = await marketplaceService.generateQR(companyId);

    res.json({
      success: true,
      qr: qr,
      expires_in: 20 // QR –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 20 —Å–µ–∫—É–Ω–¥
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'
    });
  }
});

/**
 * GET /marketplace/status/:companyId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
 */
router.get('/status/:companyId', async (req, res) => {
  try {
    const { companyId } = req.params;

    if (!companyId || !Number.isInteger(parseInt(companyId))) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏'
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const company = await marketplaceService.getCompany(parseInt(companyId));

    if (!company) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      company_id: company.id,
      whatsapp_connected: company.whatsapp_connected || false,
      whatsapp_phone: company.whatsapp_phone || null,
      integration_status: company.integration_status || 'pending',
      connected_at: company.whatsapp_connected_at || null
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    });
  }
});

/**
 * POST /marketplace/callback
 * Callback –¥–ª—è YClients –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
router.post('/callback', async (req, res) => {
  try {
    const {
      salon_id,
      company_id,
      status,
      whatsapp_phone,
      api_key
    } = req.body;

    logger.info('üì® Marketplace callback –ø–æ–ª—É—á–µ–Ω', {
      salon_id,
      company_id,
      status
    });

    if (!company_id || !status) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (status === 'connected' && whatsapp_phone) {
      await marketplaceService.updateWhatsAppStatus(
        company_id,
        true,
        whatsapp_phone
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback –≤ YClients
    const result = await marketplaceService.sendCallbackToYClients({
      salon_id: salon_id,
      application_id: 'ai-admin',
      status: status,
      api_key: api_key,
      webhook_urls: [`https://ai-admin.app/webhook/yclients/${company_id}`]
    });

    res.json({
      success: result.success,
      message: result.success ? 'Callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback',
      data: result.data
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'
    });
  }
});

/**
 * POST /marketplace/webhook/:companyId
 * Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç YClients
 */
router.post('/webhook/:companyId', async (req, res) => {
  try {
    const { companyId } = req.params;
    const eventData = req.body;

    logger.info('üì® Webhook –æ—Ç YClients –ø–æ–ª—É—á–µ–Ω', {
      companyId,
      event: eventData.type || eventData.event
    });

    // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
    res.status(200).json({ success: true });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    await marketplaceService.handleWebhook(companyId, eventData);

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    // –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ 200, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  }
});

/**
 * GET /marketplace/companies
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
router.get('/companies', validateApiKey, async (req, res) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await marketplaceService.init();

    const stats = await marketplaceService.getConnectionStats();

    res.json({
      success: true,
      stats: stats
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

/**
 * GET /marketplace/test
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */
router.get('/test', (req, res) => {
  res.json({
    success: true,
    status: 'ok',
    endpoints: {
      connect: '/marketplace/connect',
      register: 'POST /marketplace/register',
      qr: '/marketplace/qr/:token',
      status: '/marketplace/status/:companyId',
      callback: 'POST /marketplace/callback',
      webhook: 'POST /marketplace/webhook/:companyId',
      companies: '/marketplace/companies'
    },
    message: 'Marketplace integration endpoints are ready'
  });
});

module.exports = router;