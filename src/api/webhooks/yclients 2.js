const express = require('express');
const router = express.Router();
const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');
const YClientsWebhookProcessor = require('../../services/webhook-processor');
const config = require('../../config');
const crypto = require('crypto');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
const webhookProcessor = new YClientsWebhookProcessor();

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç YClients
 */
function verifyWebhookSignature(payload, signature, secret) {
  if (!secret) {
    logger.warn('‚ö†Ô∏è Webhook secret not configured, skipping signature verification');
    return true; // –í development —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
  }

  const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(JSON.stringify(payload))
    .digest('hex');

  return signature === expectedSignature;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç YClients
 * POST /api/webhooks/yclients/events
 */
router.post('/events', async (req, res) => {
  const startTime = Date.now();
  const eventId = req.headers['x-event-id'] || `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  logger.info('üì® YClients webhook received', {
    eventId,
    resource: req.body?.resource,
    status: req.body?.status,
    companyId: req.body?.company_id,
    headers: req.headers,
    body: req.body
  });

  try {
    // 1. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç YClients, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
    res.status(200).json({ success: true, eventId });

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    const signature = req.headers['x-webhook-signature'] || req.headers['x-yclients-signature'];
    const secret = config.yclients?.webhookSecret;
    
    if (secret && signature && !verifyWebhookSignature(req.body, signature, secret)) {
      logger.error('‚ùå Invalid webhook signature', { eventId });
      return;
    }

    // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç YClients –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    let eventType = 'unknown';
    let eventData = req.body.data || req.body;
    
    // YClients –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç: { resource: "record", status: "create/update/delete" }
    if (req.body.resource === 'record') {
      if (req.body.status === 'create') {
        eventType = 'record.created';
      } else if (req.body.status === 'update') {
        eventType = 'record.updated';
      } else if (req.body.status === 'delete') {
        eventType = 'record.deleted';
      }
    } else if (req.body.resource === 'finances_operation') {
      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      logger.info('üí∞ Financial operation webhook, skipping', { eventId });
      return;
    } else {
      // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π —Ç–æ–∂–µ –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      logger.info(`üì¶ ${req.body.resource} webhook, skipping`, { eventId });
      return;
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const { data: existingEvent } = await supabase
      .from('webhook_events')
      .select('id')
      .eq('event_id', eventId)
      .single();

    if (existingEvent) {
      logger.warn('‚ö†Ô∏è Duplicate webhook event', { eventId });
      return;
    }

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞
    const { error: saveError } = await supabase
      .from('webhook_events')
      .insert({
        event_id: eventId,
        event_type: eventType,
        company_id: req.body.company_id,
        record_id: eventData?.id || req.body.resource_id,
        payload: req.body,
        created_at: new Date().toISOString()
      });

    if (saveError) {
      logger.error('‚ùå Failed to save webhook event', { eventId, error: saveError });
    }

    // 6. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
    await webhookProcessor.processEvent({
      id: eventId,
      type: eventType,
      companyId: req.body.company_id,
      data: eventData,
      timestamp: req.body.created_at || new Date().toISOString()
    });

    const processingTime = Date.now() - startTime;
    logger.info('‚úÖ Webhook processed successfully', {
      eventId,
      processingTime,
      eventType
    });

  } catch (error) {
    logger.error('‚ùå Webhook processing error', {
      eventId,
      error: error.message,
      stack: error.stack
    });
  }
});

/**
 * Health check endpoint –¥–ª—è YClients
 * GET /api/webhooks/yclients/health
 */
router.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

/**
 * Test endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
 * POST /api/webhooks/yclients/test
 */
router.post('/test', async (req, res) => {
  logger.info('üß™ Test webhook received', req.body);
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const eventType = req.body.eventType || 'record.created';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ ID
    const recordId = Math.floor(Math.random() * 100000) + 1;
    const datetime = req.body.datetime || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const testEvent = {
      id: `test_${Date.now()}`,
      type: eventType,
      companyId: config.yclients?.companyId || 962302,
      data: {
        id: recordId,
        company_id: config.yclients?.companyId || 962302,
        datetime: datetime,
        services: [
          {
            id: 1,
            title: req.body.service || '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
            cost: req.body.cost || 1500
          }
        ],
        staff: {
          id: 1,
          name: req.body.master || '–ú–∞—Å—Ç–µ—Ä –¢–µ—Å—Ç'
        },
        client: {
          id: 1,
          name: req.body.clientName || '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
          phone: req.body.phone || '79001234567'
        },
        comment: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook',
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        ...req.body
      },
      timestamp: new Date().toISOString()
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    await webhookProcessor.processEvent(testEvent);

    res.json({
      success: true,
      message: 'Test webhook processed',
      eventId: testEvent.id,
      testEvent
    });

  } catch (error) {
    logger.error('‚ùå Test webhook error', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;