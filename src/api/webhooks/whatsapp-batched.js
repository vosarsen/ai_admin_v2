// src/api/webhooks/whatsapp-batched.js
const express = require('express');
const router = express.Router();
const config = require('../../config');
const logger = require('../../utils/logger');
const batchService = require('../../services/redis-batch-service');
const { validateWebhookSignature } = require('../../middlewares/webhook-auth');
const rateLimiter = require('../../middlewares/rate-limiter');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º batch service –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
let batchServiceInitialized = false;
(async () => {
  try {
    await batchService.initialize();
    batchServiceInitialized = true;
    logger.info('Batch service initialized in webhook', {
      env: process.env.NODE_ENV,
      redisUrl: process.env.REDIS_URL
    });
  } catch (error) {
    logger.error('Failed to initialize batch service in webhook:', error);
  }
})();

/**
 * WhatsApp webhook —Å Redis-based –±–∞—Ç—á–∏–Ω–≥–æ–º
 * 
 * –≠—Ç–æ—Ç webhook –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis.
 * Batch processor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.
 */
router.post('/webhook/whatsapp/batched', rateLimiter, validateWebhookSignature, async (req, res) => {
  const startTime = Date.now();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (!batchServiceInitialized) {
      logger.warn('Batch service not initialized, initializing now...');
      await batchService.initialize();
      batchServiceInitialized = true;
    }
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info('üì® Webhook received request:', {
      body: req.body,
      headers: {
        'x-signature': req.headers['x-signature']?.substring(0, 10) + '...',
        'x-timestamp': req.headers['x-timestamp']
      }
    });
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let messages = [];
    let from = null;
    let companyId = config.yclients.companyId;
    
    // –§–æ—Ä–º–∞—Ç 1: { from, message, timestamp, messageId }
    if (req.body.from && req.body.message) {
      messages = [{
        from: req.body.from,
        body: req.body.message,
        type: 'chat',
        messageId: req.body.messageId || req.body.id || null, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        timestamp: req.body.timestamp || new Date().toISOString()
      }];
      from = req.body.from;
      logger.info('üìù Format 1 detected - single message:', {
        from,
        messageId: req.body.messageId || req.body.id,
        messagePreview: req.body.message?.substring(0, 50)
      });
    }
    // –§–æ—Ä–º–∞—Ç 2: { messages: [...], companyId }
    else if (req.body.messages && Array.isArray(req.body.messages)) {
      messages = req.body.messages;
      from = messages[0]?.from;
      companyId = req.body.companyId || config.yclients.companyId;
    }
    else {
      return res.status(400).json({
        success: false,
        error: 'Invalid request format'
      });
    }
    
    if (!from || messages.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞—Ç—á
    let addedCount = 0;
    
    for (const message of messages) {
      const msgText = message.body || message.message || '';
      const msgFrom = message.from || from;
      
      if (!msgText || !msgFrom) {
        continue;
      }
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π
        if (!msgFrom || msgFrom === '+' || msgFrom.length < 5) {
          logger.warn(`‚ö†Ô∏è Invalid phone number detected: "${msgFrom}"`);
          logger.warn('Full message data:', message);
          continue;
        }
        
        // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ Redis –±–∞—Ç—á
        await batchService.addMessage(
          msgFrom,
          msgText,
          companyId,
          {
            timestamp: message.timestamp || new Date().toISOString(),
            type: message.type || 'chat',
            messageId: message.messageId || null, // –î–æ–±–∞–≤–ª—è–µ–º messageId
            originalWebhook: 'whatsapp-batched'
          }
        );
        
        addedCount++;
        
        logger.debug(`üì• Added message to batch for ${msgFrom}`, {
          preview: msgText.substring(0, 50),
          companyId
        });
        
      } catch (error) {
        logger.error(`Failed to add message to batch for ${msgFrom}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      }
    }
    
    // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç webhook'—É
    res.json({
      success: true,
      message: 'Messages added to batch',
      addedCount,
      processingTime: Date.now() - startTime
    });
    
    logger.info(`üì® Webhook processed ${addedCount} messages in ${Date.now() - startTime}ms`);
    
  } catch (error) {
    logger.error('Webhook error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞—Ç—á–µ–π
 */
router.get('/webhook/whatsapp/batched/stats', async (req, res) => {
  try {
    const stats = await batchService.getStats();
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    logger.error('Failed to get batch stats:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞—Ç—á–∞
 */
router.delete('/webhook/whatsapp/batched/:phone', validateWebhookSignature, async (req, res) => {
  try {
    const { phone } = req.params;
    await batchService.clearBatch(phone);
    
    res.json({
      success: true,
      message: `Batch cleared for ${phone}`
    });
  } catch (error) {
    logger.error('Failed to clear batch:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

module.exports = router;