// src/api/webhooks/whatsapp-reaction.js
const express = require('express');
const router = express.Router();
const config = require('../../config');
const logger = require('../../utils/logger');
const { validateWebhookSignature } = require('../../middlewares/webhook-auth');
const rateLimiter = require('../../middlewares/rate-limiter');
const reminderContextTracker = require('../../services/reminder/reminder-context-tracker');
const { YclientsClient } = require('../../integrations/yclients/client');
const whatsappClient = require('../../integrations/whatsapp/client');

/**
 * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–π
 */
const REACTION_TYPES = {
  POSITIVE: [
    'üëç', 'üëçüèª', 'üëçüèº', 'üëçüèΩ', 'üëçüèæ', 'üëçüèø', // thumbs up (all skin tones)
    '‚ù§Ô∏è', '‚ù§', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', // hearts
    'üòä', 'üòÉ', 'üòÑ', 'üòÅ', 'üôÇ', 'üòÄ', 'üòç', 'ü•∞', 'üòò', // happy faces
    'üéâ', 'üéä', '‚ú®', '‚≠ê', 'üåü', 'üíØ', 'üî•', // celebration
    '‚úÖ', '‚òëÔ∏è', '‚úîÔ∏è', // check marks
    'üëå', 'üëåüèª', 'üëåüèº', 'üëåüèΩ', 'üëåüèæ', 'üëåüèø', // OK hand
    'ü§ù', 'üôè', 'üôèüèª', 'üôèüèº', 'üôèüèΩ', 'üôèüèæ', 'üôèüèø' // handshake, pray
  ],
  NEGATIVE: [
    'üëé', 'üëéüèª', 'üëéüèº', 'üëéüèΩ', 'üëéüèæ', 'üëéüèø', // thumbs down
    'üòû', 'üòî', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', // sad/angry faces
    '‚ùå', '‚úñÔ∏è', 'üö´', '‚õî', // crosses/blocks
    'üíî', // broken heart
    'üòï', 'üôÅ', '‚òπÔ∏è', // confused/disappointed
  ],
  NEUTRAL: [
    'ü§î', // thinking
    'üòê', 'üòë', // neutral faces
    'ü§∑', 'ü§∑‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è', // shrug
  ]
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)
 */
function classifyReaction(emoji) {
  if (!emoji) return 'NEUTRAL';

  if (REACTION_TYPES.POSITIVE.includes(emoji)) {
    return 'POSITIVE';
  }

  if (REACTION_TYPES.NEGATIVE.includes(emoji)) {
    return 'NEGATIVE';
  }

  return 'NEUTRAL';
}

/**
 * WhatsApp webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
router.post('/webhook/whatsapp/reaction', rateLimiter, validateWebhookSignature, async (req, res) => {
  const startTime = Date.now();

  try {
    const { from, emoji, messageId, timestamp } = req.body;

    logger.info('üëç Reaction webhook received:', {
      from,
      emoji,
      messageId,
      timestamp
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!from || !emoji) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: from, emoji'
      });
    }

    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é
    const reactionType = classifyReaction(emoji);
    logger.info(`üìä Reaction classified as: ${reactionType}`, { emoji });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const isReminderResponse = await reminderContextTracker.hasActiveReminder(from);

    if (isReminderResponse) {
      logger.info(`‚úÖ Reaction is response to reminder from ${from}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const reminderContext = await reminderContextTracker.getReminderContext(from);

      if (reminderContext && reminderContext.booking) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏
        if (reactionType === 'POSITIVE') {
          logger.info(`‚ù§Ô∏è Positive reaction - confirming booking ${reminderContext.booking.recordId}`);

          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å–µ—Ä–¥–µ—á–∫–æ–º –≤ –æ—Ç–≤–µ—Ç
            await whatsappClient.sendReaction(from, '‚ù§Ô∏è');
            logger.info(`‚ù§Ô∏è Sent heart reaction to ${from}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ YClients –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" (attendance = 2)
            const yclientsClient = new YclientsClient();
            const updateResult = await yclientsClient.updateBookingStatus(
              reminderContext.booking.recordId,
              2 // attendance = 2 (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)
            );

            if (updateResult.success) {
              logger.info(`‚úÖ Booking ${reminderContext.booking.recordId} confirmed via reaction`);
            } else {
              logger.warn(`Failed to update booking status: ${updateResult.error}`);
            }

            // –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ
            await reminderContextTracker.markAsConfirmed(from);

            return res.json({
              success: true,
              action: 'booking_confirmed',
              reactionType,
              processingTime: Date.now() - startTime
            });

          } catch (error) {
            logger.error('Error confirming booking via reaction:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
          }

        } else if (reactionType === 'NEGATIVE') {
          logger.info(`üëé Negative reaction - client may want to cancel/reschedule`);

          // –î–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:
          // - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å
          // - –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é

          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
          await reminderContextTracker.clearContext(from);

          return res.json({
            success: true,
            action: 'negative_reaction_noted',
            reactionType,
            processingTime: Date.now() - startTime
          });

        } else {
          // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º
          logger.info(`üòê Neutral reaction - just noting it`);

          return res.json({
            success: true,
            action: 'neutral_reaction_noted',
            reactionType,
            processingTime: Date.now() - startTime
          });
        }
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é
    logger.info(`üìù Reaction not related to reminder - just logging`, {
      from,
      emoji,
      reactionType
    });

    // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç webhook'—É
    res.json({
      success: true,
      action: 'reaction_logged',
      reactionType,
      processingTime: Date.now() - startTime
    });

    logger.info(`üëç Reaction processed in ${Date.now() - startTime}ms`);

  } catch (error) {
    logger.error('Reaction webhook error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

module.exports = router;
