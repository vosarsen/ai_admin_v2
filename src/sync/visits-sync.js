/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –∏–∑ YClients –≤ Supabase
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */

const axios = require('axios');
const { supabase } = require('../database/supabase');
const logger = require('../utils/logger').child({ module: 'visits-sync' });
const { 
  YCLIENTS_CONFIG, 
  createYclientsHeaders, 
  normalizePhone,
  delay 
} = require('./sync-utils');

class VisitsSync {
  constructor() {
    this.config = YCLIENTS_CONFIG;
    this.headers = createYclientsHeaders(true);
    this.BATCH_SIZE = 50; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 –≤–∏–∑–∏—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    this.MAX_VISITS_PER_CLIENT = 100; // –ú–∞–∫—Å–∏–º—É–º –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   * @param {Object} options - –û–ø—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncAll(options = {}) {
    const startTime = Date.now();
    const { 
      limit = null, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
      onlyVip = false, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
      minVisits = 1 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤
    } = options;
    
    try {
      logger.info('üìÖ Starting visits synchronization...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const clients = await this.getClientsForSync(limit, onlyVip, minVisits);
      
      if (!clients || clients.length === 0) {
        logger.warn('No clients found for visits sync');
        return { 
          success: true, 
          clientsProcessed: 0, 
          visitsProcessed: 0,
          errors: 0,
          duration: Date.now() - startTime 
        };
      }

      logger.info(`üìã Found ${clients.length} clients for visits sync`);
      
      let totalVisitsProcessed = 0;
      let totalErrors = 0;
      let clientsProcessed = 0;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É
      for (const client of clients) {
        try {
          const result = await this.syncClientVisits(client);
          totalVisitsProcessed += result.visitsProcessed;
          totalErrors += result.errors;
          clientsProcessed++;
          
          if (clientsProcessed % 10 === 0) {
            logger.info(`Progress: ${clientsProcessed}/${clients.length} clients, ${totalVisitsProcessed} visits`);
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
          await delay(500);
          
        } catch (error) {
          logger.error(`Failed to sync visits for client ${client.id}`, {
            error: error.message
          });
          totalErrors++;
        }
      }
      
      const duration = Date.now() - startTime;
      
      logger.info(`‚úÖ Visits sync completed in ${Math.round(duration/1000)} seconds`, {
        clientsProcessed,
        visitsProcessed: totalVisitsProcessed,
        errors: totalErrors
      });

      return {
        success: true,
        clientsProcessed,
        visitsProcessed: totalVisitsProcessed,
        errors: totalErrors,
        duration
      };

    } catch (error) {
      logger.error('‚ùå Visits sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getClientsForSync(limit, onlyVip, minVisits) {
    let query = supabase
      .from('clients')
      .select('id, yclients_id, phone, name, visit_count, loyalty_level')
      .eq('company_id', this.config.COMPANY_ID)
      .gte('visit_count', minVisits)
      .order('visit_count', { ascending: false });
    
    if (onlyVip) {
      query = query.in('loyalty_level', ['Gold', 'VIP']);
    }
    
    if (limit) {
      query = query.limit(limit);
    }
    
    const { data, error } = await query;
    
    if (error) {
      logger.error('Failed to fetch clients for sync', error);
      throw error;
    }
    
    return data || [];
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async syncClientVisits(client) {
    try {
      logger.debug(`Syncing visits for client ${client.name} (${client.phone})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ API
      const visits = await this.fetchClientVisits(client.yclients_id, client.phone);
      
      if (!visits || visits.length === 0) {
        logger.debug(`No visits found for client ${client.name}`);
        return { visitsProcessed: 0, errors: 0 };
      }
      
      logger.debug(`Found ${visits.length} visits for client ${client.name}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏
      const result = await this.saveVisitsBatch(visits, client);
      
      return result;
      
    } catch (error) {
      logger.error(`Error syncing visits for client ${client.name}`, {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ YClients API
   */
  async fetchClientVisits(clientYclientsId, clientPhone) {
    try {
      const url = `${this.config.BASE_URL}/company/${this.config.COMPANY_ID}/clients/visits/search`;
      
      const requestData = {
        client_id: clientYclientsId,
        client_phone: null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ ID, –ª–∏–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        from: null, // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        to: null,
        payment_statuses: [], // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã
        attendance: 1 // –¢–æ–ª—å–∫–æ –≤–∏–∑–∏—Ç—ã –≥–¥–µ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª
      };
      
      const response = await axios.post(url, requestData, { 
        headers: {
          ...this.headers,
          'Accept': 'application/vnd.yclients.v2+json',
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.data?.success) {
        logger.error('API returned error:', response.data);
        return [];
      }
      
      const visitsData = response.data?.data?.visits || [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç—ã
      const formattedVisits = [];
      
      for (const visit of visitsData) {
        // –ö–∞–∂–¥—ã–π –≤–∏–∑–∏—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π (—É—Å–ª—É–≥)
        if (visit.records && visit.records.length > 0) {
          for (const record of visit.records) {
            formattedVisits.push(this.formatVisitRecord(visit, record));
          }
        }
        
        // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (visit.goods_transactions && visit.goods_transactions.length > 0) {
          // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂
          formattedVisits.push(this.formatGoodsVisit(visit));
        }
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤
      return formattedVisits.slice(0, this.MAX_VISITS_PER_CLIENT);
      
    } catch (error) {
      if (error.response?.status === 404) {
        logger.debug('No visits found (404)');
        return [];
      }
      
      logger.error('Error fetching client visits', {
        error: error.message,
        response: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞
   */
  formatVisitRecord(visit, record) {
    const services = record.services || [];
    const staff = record.staff || {};
    
    return {
      yclients_visit_id: visit.id,
      yclients_record_id: record.id,
      company_id: this.config.COMPANY_ID,
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      client_yclients_id: record.client?.id || null,
      client_phone: normalizePhone(record.client?.phone || ''),
      client_name: record.client?.name || '',
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ
      staff_id: staff.id || null,
      staff_name: staff.name || '',
      staff_yclients_id: staff.id || null,
      
      // –£—Å–ª—É–≥–∏
      services: services.map(s => ({
        id: s.id,
        name: s.title || s.name,
        cost: s.cost || 0,
        duration: s.duration || 0
      })),
      service_names: services.map(s => s.title || s.name),
      service_ids: services.map(s => s.id),
      services_cost: services.reduce((sum, s) => sum + (s.cost || 0), 0),
      
      // –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
      visit_date: record.date || visit.date,
      visit_time: record.datetime ? record.datetime.split('T')[1]?.substring(0, 5) : null,
      datetime: record.datetime || visit.date + 'T12:00:00',
      duration: services.reduce((sum, s) => sum + (s.duration || 0), 0),
      
      // –§–∏–Ω–∞–Ω—Å—ã
      total_cost: record.cost_to_pay || 0,
      paid_amount: record.paid_full || 0,
      discount_amount: record.discount || 0,
      tips_amount: record.tips || 0,
      payment_status: this.getPaymentStatus(record),
      payment_method: record.payment_method || 'unknown',
      
      // –°—Ç–∞—Ç—É—Å
      attendance: record.attendance || visit.attendance || 1,
      status: this.getVisitStatus(record, visit),
      is_online: record.online || false,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
      comment: record.comment || visit.comment || null,
      rating: record.rate || null,
      review: record.review || null,
      source: record.from_url ? 'online' : 'unknown',
      
      // –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã
      used_abonement: record.abonement_id ? true : false,
      abonement_id: record.abonement_id || null,
      loyalty_transactions: record.loyalty_transactions || []
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç —Å –ø—Ä–æ–¥–∞–∂–µ–π —Ç–æ–≤–∞—Ä–æ–≤
   */
  formatGoodsVisit(visit) {
    const goods = visit.goods_transactions || [];
    const totalCost = goods.reduce((sum, g) => sum + (g.amount || 0), 0);
    
    return {
      yclients_visit_id: visit.id,
      yclients_record_id: null, // –î–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–µ—Ç record_id
      company_id: this.config.COMPANY_ID,
      
      client_yclients_id: visit.client?.id || null,
      client_phone: normalizePhone(visit.client?.phone || ''),
      client_name: visit.client?.name || '',
      
      staff_id: goods[0]?.master?.id || null,
      staff_name: goods[0]?.master?.name || '',
      
      services: goods.map(g => ({
        id: g.good_id,
        name: g.title,
        cost: g.amount,
        duration: 0
      })),
      service_names: goods.map(g => g.title),
      service_ids: goods.map(g => g.good_id),
      services_cost: totalCost,
      
      visit_date: visit.date,
      datetime: visit.date + 'T12:00:00',
      duration: 0,
      
      total_cost: totalCost,
      paid_amount: totalCost,
      payment_status: 'paid_full',
      
      attendance: 1,
      status: 'completed',
      
      comment: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤'
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
   */
  getPaymentStatus(record) {
    if (!record.paid_full || record.paid_full === 0) {
      return 'not_paid';
    }
    if (record.paid_full < record.cost_to_pay) {
      return 'paid_not_full';
    }
    if (record.paid_full > record.cost_to_pay) {
      return 'paid_over';
    }
    return 'paid_full';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞
   */
  getVisitStatus(record, visit) {
    if (record.deleted || visit.deleted) {
      return 'cancelled';
    }
    if (record.attendance === -1 || visit.attendance === -1) {
      return 'no_show';
    }
    return 'completed';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–∑–∏—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏
   */
  async saveVisitsBatch(visits, client) {
    let processed = 0;
    let errors = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º client_id –∫–æ –≤—Å–µ–º –≤–∏–∑–∏—Ç–∞–º
    const visitsWithClientId = visits.map(v => ({
      ...v,
      client_id: client.id
    }));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏
    for (let i = 0; i < visitsWithClientId.length; i += this.BATCH_SIZE) {
      const batch = visitsWithClientId.slice(i, i + this.BATCH_SIZE);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
        const { data, error } = await supabase
          .from('visits')
          .upsert(batch, {
            onConflict: 'company_id,yclients_record_id',
            ignoreDuplicates: true
          });
        
        if (error) {
          logger.error('Error saving visits batch', error);
          errors += batch.length;
        } else {
          processed += batch.length;
        }
        
      } catch (error) {
        logger.error('Error processing visits batch', {
          error: error.message
        });
        errors += batch.length;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      if (i + this.BATCH_SIZE < visitsWithClientId.length) {
        await delay(100);
      }
    }
    
    logger.debug(`Saved ${processed} visits for client ${client.name}, ${errors} errors`);
    
    return { visitsProcessed: processed, errors };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async updateSyncStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const { data: stats } = await supabase
        .from('visits')
        .select('client_id', { count: 'exact', head: true })
        .eq('company_id', this.config.COMPANY_ID);
      
      const { data: clientStats } = await supabase
        .from('visits')
        .select('client_id')
        .eq('company_id', this.config.COMPANY_ID)
        .limit(0);
      
      logger.info('üìä Visits sync statistics:', {
        totalVisits: stats?.count || 0,
        uniqueClients: clientStats?.length || 0
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await supabase
        .from('company_sync_status')
        .upsert({
          company_id: this.config.COMPANY_ID,
          table_name: 'visits',
          last_sync_at: new Date().toISOString(),
          records_count: stats?.count || 0,
          status: 'completed'
        });
      
    } catch (error) {
      logger.error('Failed to update sync stats', error);
    }
  }
}

module.exports = VisitsSync;