// src/sync/company-sync.js
const { YclientsClient } = require('../integrations/yclients/client');
const { supabase } = require('../database/supabase');
const logger = require('../utils/logger');
const config = require('../config');

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ YClients –≤ Supabase
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ YClients API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
 */
class CompanySync {
  constructor() {
    this.yclientsClient = new YclientsClient();
    this.syncInterval = null;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
   * @param {string} companyId - ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ YClients
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncCompany(companyId = config.yclients.companyId) {
    const startTime = Date.now();
    logger.info(`üè¢ Starting company sync for ID: ${companyId}`);

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ YClients
      const companyData = await this.fetchCompanyData(companyId);
      
      if (!companyData) {
        throw new Error('Failed to fetch company data from YClients');
      }

      // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const preparedData = this.prepareCompanyData(companyId, companyData);

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
      const result = await this.saveToDatabase(preparedData);

      const duration = Date.now() - startTime;
      logger.info(`‚úÖ Company sync completed in ${duration}ms`, {
        companyId,
        companyName: preparedData.title,
        duration
      });

      return {
        success: true,
        companyId,
        companyName: preparedData.title,
        duration,
        data: result
      };

    } catch (error) {
      logger.error('‚ùå Company sync failed', {
        companyId,
        error: error.message,
        stack: error.stack
      });

      return {
        success: false,
        companyId,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ YClients API
   * @param {string} companyId - ID –∫–æ–º–ø–∞–Ω–∏–∏
   * @returns {Promise<Object|null>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async fetchCompanyData(companyId) {
    try {
      logger.debug(`üì° Fetching company data from YClients for ID: ${companyId}`);
      
      const response = await this.yclientsClient.getCompanyInfo(companyId);
      
      if (!response.success || !response.data) {
        logger.error('Failed to fetch company data', { response });
        return null;
      }

      logger.debug('üìä Company data received', {
        companyId,
        title: response.data.title,
        hasAddress: !!response.data.address,
        hasCoordinates: !!(response.data.coordinate_lat && response.data.coordinate_lon)
      });

      return response.data;

    } catch (error) {
      logger.error('Error fetching company data from YClients', {
        companyId,
        error: error.message
      });
      return null;
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @param {string} yclientsId - ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ YClients
   * @param {Object} rawData - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
   * @returns {Object} –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  prepareCompanyData(yclientsId, rawData) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    const prepared = {
      yclients_id: yclientsId,
      title: rawData.title || rawData.name || 'Unknown Company',
      address: rawData.address || null,
      phone: rawData.phone || rawData.phone_number || null,
      email: rawData.email || null,
      website: rawData.site || rawData.website || null,
      timezone: rawData.timezone_name || rawData.timezone || 'Europe/Moscow',
      working_hours: this.parseWorkingHours(rawData.schedule),
      coordinate_lat: rawData.coordinate_lat ? parseFloat(rawData.coordinate_lat) : null,
      coordinate_lon: rawData.coordinate_lon ? parseFloat(rawData.coordinate_lon) : null,
      raw_data: rawData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
      active: rawData.active !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π
      settings: {
        currency: rawData.currency || 'RUB',
        country: rawData.country || 'Russia',
        city: rawData.city || null,
        business_type: rawData.business_type || null,
        ...((rawData.settings || {}))
      }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ name –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    prepared.name = prepared.title;

    logger.debug('üì¶ Company data prepared', {
      yclients_id: prepared.yclients_id,
      title: prepared.title,
      hasCoordinates: !!(prepared.coordinate_lat && prepared.coordinate_lon),
      timezone: prepared.timezone
    });

    return prepared;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
   * @param {Array|Object} schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ API
   * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
   */
  parseWorkingHours(schedule) {
    if (!schedule) return {};

    try {
      // –ï—Å–ª–∏ schedule - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
      if (Array.isArray(schedule)) {
        const hours = {};
        const dayNames = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        
        schedule.forEach((day, index) => {
          if (day && typeof day === 'object') {
            hours[dayNames[index]] = {
              open: day.start_time || day.open || null,
              close: day.end_time || day.close || null,
              is_working: day.is_working !== false
            };
          }
        });
        
        return hours;
      }

      // –ï—Å–ª–∏ schedule —É–∂–µ –æ–±—ä–µ–∫—Ç
      if (typeof schedule === 'object') {
        return schedule;
      }

      return {};
    } catch (error) {
      logger.warn('Failed to parse working hours', { error: error.message });
      return {};
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Supabase
   * @param {Object} companyData - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveToDatabase(companyData) {
    try {
      logger.debug('üíæ Saving company data to Supabase', {
        yclients_id: companyData.yclients_id,
        title: companyData.title
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
      const { data, error } = await supabase
        .from('companies')
        .upsert(companyData, {
          onConflict: 'yclients_id',
          returning: 'representation'
        })
        .select()
        .single();

      if (error) {
        throw error;
      }

      logger.info('‚úÖ Company data saved successfully', {
        id: data.id,
        yclients_id: data.yclients_id,
        title: data.title
      });

      return data;

    } catch (error) {
      logger.error('Database save error', {
        error: error.message,
        details: error.details || error
      });
      throw new Error(`Failed to save company data: ${error.message}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   * @param {number} intervalMinutes - –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
   * @param {string} companyId - ID –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  startPeriodicSync(intervalMinutes = 60, companyId = config.yclients.companyId) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.stopPeriodicSync();

    logger.info(`üîÑ Starting periodic company sync every ${intervalMinutes} minutes`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
    this.syncCompany(companyId);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.syncInterval = setInterval(() => {
      this.syncCompany(companyId);
    }, intervalMinutes * 60 * 1000);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  stopPeriodicSync() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
      logger.info('üõë Periodic company sync stopped');
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–π
   * @param {Array<string>} companyIds - –ú–∞—Å—Å–∏–≤ ID –∫–æ–º–ø–∞–Ω–∏–π
   * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncMultipleCompanies(companyIds) {
    logger.info(`üè¢ Starting sync for ${companyIds.length} companies`);

    const results = await Promise.allSettled(
      companyIds.map(id => this.syncCompany(id))
    );

    const summary = {
      total: companyIds.length,
      successful: results.filter(r => r.status === 'fulfilled' && r.value.success).length,
      failed: results.filter(r => r.status === 'rejected' || !r.value.success).length
    };

    logger.info('üìä Multiple companies sync completed', summary);

    return results.map((result, index) => ({
      companyId: companyIds[index],
      ...(result.status === 'fulfilled' ? result.value : { success: false, error: result.reason })
    }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} companyId - ID –∫–æ–º–ø–∞–Ω–∏–∏
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getLastSyncInfo(companyId) {
    try {
      const { data, error } = await supabase
        .from('companies')
        .select('updated_at, title, active')
        .eq('yclients_id', companyId)
        .single();

      if (error || !data) {
        return {
          synced: false,
          companyId
        };
      }

      return {
        synced: true,
        companyId,
        lastSync: data.updated_at,
        companyName: data.title,
        active: data.active
      };

    } catch (error) {
      logger.error('Error getting last sync info', { error: error.message });
      return {
        synced: false,
        companyId,
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏ —Å–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const companySyncInstance = new CompanySync();

module.exports = {
  CompanySync,
  companySync: companySyncInstance,
  // –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  syncCompany: (companyId) => companySyncInstance.syncCompany(companyId),
  startPeriodicSync: (interval, companyId) => companySyncInstance.startPeriodicSync(interval, companyId),
  stopPeriodicSync: () => companySyncInstance.stopPeriodicSync()
};