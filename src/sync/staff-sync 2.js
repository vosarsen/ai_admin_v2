/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ YClients –≤ Supabase
 */

const { supabase } = require('../database/supabase');
const logger = require('../utils/logger').child({ module: 'staff-sync' });
const { YCLIENTS_CONFIG, createYclientsHeaders, delay } = require('./sync-utils');
const axios = require('axios');
const staffDeclension = require('../services/declension/staff-declension');

class StaffSync {
  constructor() {
    this.config = YCLIENTS_CONFIG;
    this.tableName = 'staff';
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async sync() {
    const startTime = Date.now();
    
    try {
      logger.info('üë• Starting staff synchronization...');
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ YClients API
      const staff = await this.fetchStaff();
      
      if (!staff || staff.length === 0) {
        logger.warn('No staff found in YClients');
        return { 
          success: true, 
          processed: 0, 
          errors: 0, 
          total: 0,
          duration: Date.now() - startTime 
        };
      }

      logger.info(`üìã Found ${staff.length} active staff members to sync`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π
      logger.info('üìö Loading existing staff from database...');
      const { data: existingStaff } = await supabase
        .from(this.tableName)
        .select('yclients_id, declensions')
        .eq('company_id', this.config.COMPANY_ID);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–æ–Ω–µ–Ω–∏–π
      // –í–ê–ñ–ù–û: staffMember.id –∏–∑ YClients API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç yclients_id –≤ –Ω–∞—à–µ–π –ë–î
      const existingDeclensionsMap = new Map();
      if (existingStaff) {
        existingStaff.forEach(staffMember => {
          if (staffMember.declensions) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º yclients_id –∫–∞–∫ –∫–ª—é—á, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è —Å staffMember.id –∏–∑ API
            existingDeclensionsMap.set(staffMember.yclients_id, staffMember.declensions);
          }
        });
      }
      logger.info(`üìù Found ${existingDeclensionsMap.size} existing staff declensions`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ (–¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–æ–Ω–µ–Ω–∏—è)
      const newStaff = staff.filter(staffMember => 
        !existingDeclensionsMap.has(staffMember.id)
      );
      
      if (newStaff.length > 0) {
        logger.info(`üÜï Found ${newStaff.length} new staff members, generating declensions...`);
        const declensionsMap = await staffDeclension.generateBatchDeclensions(newStaff);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫ –º–∞—Å—Ç–µ—Ä–∞–º
        newStaff.forEach(staffMember => {
          if (declensionsMap.has(staffMember.id)) {
            existingDeclensionsMap.set(staffMember.id, declensionsMap.get(staffMember.id));
          }
        });
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –Ω–æ–≤—ã–µ)
      staff.forEach(staffMember => {
        if (existingDeclensionsMap.has(staffMember.id)) {
          staffMember.declensions = existingDeclensionsMap.get(staffMember.id);
        }
      });

      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ
      await this.deactivateAllStaff();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
      const result = await this.saveStaff(staff);
      
      const duration = Date.now() - startTime;
      
      logger.info(`‚úÖ Staff sync completed in ${duration}ms`, {
        processed: result.processed,
        errors: result.errors,
        total: staff.length
      });

      return {
        success: true,
        ...result,
        duration
      };

    } catch (error) {
      logger.error('‚ùå Staff sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ YClients API
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async fetchStaff() {
    try {
      const url = `${this.config.BASE_URL}/company/${this.config.COMPANY_ID}/staff`;
      const headers = createYclientsHeaders(true);
      
      logger.debug('Fetching staff from YClients', { url });
      
      const response = await axios.get(url, { headers });
      
      if (response.data?.success === false) {
        throw new Error(response.data?.meta?.message || 'API returned error');
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      const allStaff = response.data?.data || [];
      const activeStaff = allStaff.filter(staff => {
        // fired: 0 –∏–ª–∏ "0" - —Ä–∞–±–æ—Ç–∞–µ—Ç, 1 –∏–ª–∏ "1" - —É–≤–æ–ª–µ–Ω
        // hidden: 0 –∏–ª–∏ "0" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, 1 –∏–ª–∏ "1" - —Å–∫—Ä—ã—Ç
        const isFired = staff.fired === 1 || staff.fired === "1" || staff.fired === true;
        const isHidden = staff.hidden === 1 || staff.hidden === "1" || staff.hidden === true;
        
        return !isFired && !isHidden;
      });
      
      logger.info(`Filtered ${activeStaff.length} active staff from ${allStaff.length} total`);
      
      return activeStaff;
      
    } catch (error) {
      logger.error('Failed to fetch staff from YClients', {
        error: error.message,
        response: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ Supabase
   * @param {Array} staffList - –ú–∞—Å—Å–∏–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveStaff(staffList) {
    let processed = 0;
    let errors = 0;
    const errorDetails = [];

    for (const staff of staffList) {
      try {
        const staffData = this.prepareStaffData(staff);
        
        const { error } = await supabase
          .from(this.tableName)
          .upsert(staffData, { 
            onConflict: 'yclients_id,company_id',
            ignoreDuplicates: false 
          });

        if (error) {
          errors++;
          errorDetails.push({
            staff: staff.name,
            error: error.message
          });
          
          if (errors <= 5) {
            logger.warn(`Failed to save staff: ${staff.name}`, { error: error.message });
          }
        } else {
          processed++;
          
          if (processed % 10 === 0) {
            logger.debug(`Progress: ${processed}/${staffList.length} staff processed`);
          }
        }

      } catch (error) {
        errors++;
        errorDetails.push({
          staff: staff.name || 'Unknown',
          error: error.message
        });
        
        if (errors <= 5) {
          logger.error('Error processing staff', {
            staff: staff.name,
            error: error.message
          });
        }
      }
    }

    if (errors > 0) {
      logger.warn(`Staff sync completed with ${errors} errors`, {
        errorCount: errors,
        firstErrors: errorDetails.slice(0, 5)
      });
    }

    return { processed, errors, errorDetails };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @param {Object} staff - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ API
   * @returns {Object} –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  prepareStaffData(staff) {
    return {
      yclients_id: staff.id,
      company_id: this.config.COMPANY_ID,
      name: staff.name || 'Unnamed Staff',
      specialization: staff.specialization || staff.position?.title || null,
      position: staff.position?.title || null,
      phone: staff.phone || null,
      email: staff.email || null,
      avatar_url: staff.avatar || staff.avatar_big || null,
      is_active: staff.hidden === 0 || staff.hidden === "0",
      rating: staff.rating || 0,
      is_bookable: staff.bookable !== 0 && staff.bookable !== "0",
      information: staff.information || staff.comment || null,
      declensions: staff.declensions || null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è
      last_sync_at: new Date().toISOString(),
      raw_data: staff // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
   * @returns {Promise<void>}
   */
  async deactivateAllStaff() {
    try {
      const { error } = await supabase
        .from(this.tableName)
        .update({ is_active: false })
        .eq('company_id', this.config.COMPANY_ID);
      
      if (error) {
        logger.warn('Failed to deactivate staff', { error: error.message });
      } else {
        logger.debug('All staff deactivated before sync');
      }
    } catch (error) {
      logger.error('Error deactivating staff', { error: error.message });
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} status - –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {number} recordsProcessed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async updateSyncStatus(status, recordsProcessed = 0, errorMessage = null) {
    try {
      await supabase
        .from('sync_status')
        .upsert({
          table_name: this.tableName,
          company_id: this.config.COMPANY_ID,
          sync_status: status,
          last_sync_at: new Date().toISOString(),
          records_processed: recordsProcessed,
          error_message: errorMessage
        }, {
          onConflict: 'table_name,company_id'
        });
    } catch (error) {
      logger.error('Failed to update sync status', { error: error.message });
    }
  }
}

module.exports = { StaffSync };