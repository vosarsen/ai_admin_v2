/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ YClients –≤ Supabase
 */

const { supabase } = require('../database/supabase');
const logger = require('../utils/logger').child({ module: 'schedules-sync' });
const { YCLIENTS_CONFIG, createYclientsHeaders, delay, formatDateForAPI } = require('./sync-utils');
const axios = require('axios');

class SchedulesSync {
  constructor() {
    this.config = YCLIENTS_CONFIG;
    this.tableName = 'staff_schedules';
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async sync() {
    const startTime = Date.now();
    
    try {
      logger.info('‚è∞ Starting schedules synchronization...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
      const staff = await this.fetchStaff();
      
      if (!staff || staff.length === 0) {
        logger.warn('No staff found for schedule sync');
        return { 
          success: true, 
          processed: 0, 
          errors: 0, 
          total: 0,
          duration: Date.now() - startTime 
        };
      }

      logger.info(`üìã Found ${staff.length} staff members to sync schedules`);

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      await this.cleanupOldSchedules();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
      const result = await this.syncAllSchedules(staff);
      
      const duration = Date.now() - startTime;
      
      logger.info(`‚úÖ Schedules sync completed in ${duration}ms`, {
        processed: result.processed,
        errors: result.errors,
        total: result.total
      });

      return {
        success: true,
        ...result,
        duration
      };

    } catch (error) {
      logger.error('‚ùå Schedules sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async fetchStaff() {
    try {
      const url = `${this.config.BASE_URL}/book_staff/${this.config.COMPANY_ID}`;
      const headers = createYclientsHeaders(false); // –¢–æ–ª—å–∫–æ bearer token
      
      logger.debug('Fetching bookable staff from YClients', { url });
      
      const response = await axios.get(url, { headers });
      
      if (response.data?.success === false) {
        throw new Error(response.data?.meta?.message || 'API returned error');
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
      const staff = (response.data?.data || [])
        .filter(s => s.bookable && !s.hidden && !s.fired);
      
      return staff;
      
    } catch (error) {
      logger.error('Failed to fetch staff from YClients', {
        error: error.message,
        response: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
   * @param {Array} staff - –ú–∞—Å—Å–∏–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncAllSchedules(staff) {
    let totalProcessed = 0;
    let totalErrors = 0;
    let totalSlots = 0;

    for (const staffMember of staff) {
      try {
        logger.debug(`Syncing schedule for ${staffMember.name} (ID: ${staffMember.id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        const schedules = await this.fetchStaffSchedule(staffMember.id);
        
        if (schedules && schedules.length > 0) {
          const result = await this.saveSchedules(staffMember, schedules);
          totalProcessed += result.processed;
          totalErrors += result.errors;
          totalSlots += schedules.length;
          
          logger.debug(`Saved ${result.processed} schedule days for ${staffMember.name}`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await delay(this.config.API_DELAY_MS);
        
      } catch (error) {
        totalErrors++;
        logger.error(`Failed to sync schedule for ${staffMember.name}`, {
          staffId: staffMember.id,
          error: error.message
        });
      }
    }

    return {
      processed: totalProcessed,
      errors: totalErrors,
      total: totalSlots
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ 30 –¥–Ω–µ–π
   * @param {number} staffId - ID –º–∞—Å—Ç–µ—Ä–∞
   * @param {number} daysAhead - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –¥–Ω—è–º
   */
  async fetchStaffSchedule(staffId, daysAhead = 30) {
    try {
      const url = `${this.config.BASE_URL}/book_dates/${this.config.COMPANY_ID}`;
      const headers = createYclientsHeaders(false);

      // –ü–µ—Ä–∏–æ–¥ –Ω–∞ daysAhead –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
      const startDate = new Date();
      const endDate = new Date();
      endDate.setDate(endDate.getDate() + daysAhead);

      const params = {
        staff_id: staffId,
        start_date: formatDateForAPI(startDate),
        end_date: formatDateForAPI(endDate)
      };

      const response = await axios.get(url, { headers, params });

      if (response.data?.success === false) {
        throw new Error(response.data?.meta?.message || 'API returned error');
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏
      return response.data?.data?.booking_dates || [];

    } catch (error) {
      logger.error('Failed to fetch staff schedule', {
        staffId,
        daysAhead,
        error: error.message,
        response: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Supabase
   * @param {Object} staffMember - –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
   * @param {Array} schedules - –ú–∞—Å—Å–∏–≤ –¥–∞—Ç (—Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveSchedules(staffMember, schedules) {
    let processed = 0;
    let errors = 0;

    for (const dateString of schedules) {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        if (!dateString || typeof dateString !== 'string') {
          logger.warn(`Invalid date for ${staffMember.name}: ${dateString}`);
          errors++;
          continue;
        }

        const scheduleData = {
          staff_id: staffMember.id,
          staff_name: staffMember.name,
          date: dateString, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
          is_working: true, // –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ - –º–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
          has_booking_slots: true, // –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—Å—Ç—å - –µ—Å—Ç—å —Å–ª–æ—Ç—ã
          working_hours: null, // –î–µ—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–º endpoint
          last_updated: new Date().toISOString()
        };
        
        const { error } = await supabase
          .from(this.tableName)
          .upsert(scheduleData, { 
            onConflict: 'staff_id,date',
            ignoreDuplicates: false 
          });

        if (error) {
          errors++;
          if (errors <= 5) {
            logger.warn(`Failed to save schedule for ${staffMember.name} on ${dateString}`, { 
              error: error.message 
            });
          }
        } else {
          processed++;
        }

      } catch (error) {
        errors++;
        if (errors <= 5) {
          logger.error('Error processing schedule', {
            staff: staffMember.name,
            date: dateString,
            error: error.message
          });
        }
      }
    }

    return { processed, errors };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
   * @returns {Promise<void>}
   */
  async cleanupOldSchedules() {
    try {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      const { error } = await supabase
        .from(this.tableName)
        .delete()
        .lt('date', formatDateForAPI(sevenDaysAgo));
      
      if (error) {
        logger.warn('Failed to cleanup old schedules', { error: error.message });
      } else {
        logger.debug('Old schedules cleaned up');
      }
      
    } catch (error) {
      logger.error('Error during schedule cleanup', { error: error.message });
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncTodayOnly() {
    const startTime = Date.now();

    try {
      logger.info('üîÑ Starting TODAY-ONLY schedules synchronization...');

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
      const staff = await this.fetchStaff();

      if (!staff || staff.length === 0) {
        logger.warn('No staff found for today-only sync');
        return {
          success: true,
          processed: 0,
          errors: 0,
          total: 0,
          duration: Date.now() - startTime,
          mode: 'today-only'
        };
      }

      logger.info(`üìã Found ${staff.length} staff members for today-only sync`);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ 2 –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞)
      const result = await this.syncAllSchedulesToday(staff);

      const duration = Date.now() - startTime;

      logger.info(`‚úÖ TODAY-ONLY schedules sync completed in ${duration}ms`, {
        processed: result.processed,
        errors: result.errors,
        total: result.total,
        mode: 'today-only'
      });

      return {
        success: true,
        ...result,
        duration,
        mode: 'today-only'
      };

    } catch (error) {
      logger.error('‚ùå TODAY-ONLY schedules sync failed', {
        error: error.message,
        stack: error.stack
      });

      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime,
        mode: 'today-only'
      };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
   * @param {Array} staff - –ú–∞—Å—Å–∏–≤ –º–∞—Å—Ç–µ—Ä–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncAllSchedulesToday(staff) {
    let totalProcessed = 0;
    let totalErrors = 0;
    let totalSlots = 0;

    for (const staffMember of staff) {
      try {
        logger.debug(`Syncing TODAY schedule for ${staffMember.name} (ID: ${staffMember.id})`);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ 2 –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞)
        const schedules = await this.fetchStaffSchedule(staffMember.id, 2);

        if (schedules && schedules.length > 0) {
          const result = await this.saveSchedules(staffMember, schedules);
          totalProcessed += result.processed;
          totalErrors += result.errors;
          totalSlots += schedules.length;

          logger.debug(`Saved ${result.processed} TODAY schedule days for ${staffMember.name}`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await delay(this.config.API_DELAY_MS);

      } catch (error) {
        totalErrors++;
        logger.error(`Failed to sync TODAY schedule for ${staffMember.name}`, {
          staffId: staffMember.id,
          error: error.message
        });
      }
    }

    return {
      processed: totalProcessed,
      errors: totalErrors,
      total: totalSlots
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} status - –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {number} recordsProcessed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async updateSyncStatus(status, recordsProcessed = 0, errorMessage = null) {
    try {
      await supabase
        .from('sync_status')
        .upsert({
          table_name: this.tableName,
          company_id: this.config.COMPANY_ID,
          sync_status: status,
          last_sync_at: new Date().toISOString(),
          records_processed: recordsProcessed,
          error_message: errorMessage
        }, {
          onConflict: 'table_name,company_id'
        });
    } catch (error) {
      logger.error('Failed to update sync status', { error: error.message });
    }
  }
}

module.exports = { SchedulesSync };