/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥ –∏–∑ YClients –≤ Supabase
 */

const { supabase } = require('../database/supabase');
const logger = require('../utils/logger').child({ module: 'services-sync' });
const { YCLIENTS_CONFIG, createYclientsHeaders, delay } = require('./sync-utils');
const axios = require('axios');
const serviceDeclension = require('../services/declension/service-declension');

class ServicesSync {
  constructor() {
    this.config = YCLIENTS_CONFIG;
    this.tableName = 'services';
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async sync() {
    const startTime = Date.now();
    
    try {
      logger.info('üõçÔ∏è Starting services synchronization...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
      const categories = await this.fetchServiceCategories();
      logger.info(`üìÇ Found ${categories.length} service categories`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ category_id -> category_title
      const categoryMap = {};
      categories.forEach(cat => {
        categoryMap[cat.id] = cat.title;
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ YClients API
      const services = await this.fetchServices();
      
      if (!services || services.length === 0) {
        logger.warn('No services found in YClients');
        return { 
          success: true, 
          processed: 0, 
          errors: 0, 
          total: 0,
          duration: Date.now() - startTime 
        };
      }

      logger.info(`üìã Found ${services.length} services to sync`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º category_title –∫ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–µ
      services.forEach(service => {
        if (service.category_id && categoryMap[service.category_id]) {
          service.category_title_from_api = categoryMap[service.category_id];
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π
      logger.info('üìö Loading existing services from database...');
      const { data: existingServices } = await supabase
        .from(this.tableName)
        .select('yclients_id, declensions')
        .eq('company_id', this.config.COMPANY_ID);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–æ–Ω–µ–Ω–∏–π
      const existingDeclensionsMap = new Map();
      if (existingServices) {
        existingServices.forEach(service => {
          if (service.declensions) {
            existingDeclensionsMap.set(service.yclients_id, service.declensions);
          }
        });
      }
      logger.info(`üìù Found ${existingDeclensionsMap.size} existing declensions`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ (–¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–æ–Ω–µ–Ω–∏—è)
      const newServices = services.filter(service => 
        !existingDeclensionsMap.has(service.id)
      );
      
      if (newServices.length > 0) {
        logger.info(`üÜï Found ${newServices.length} new services, generating declensions...`);
        const declensionsMap = await serviceDeclension.generateBatchDeclensions(newServices);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫ —É—Å–ª—É–≥–∞–º
        newServices.forEach(service => {
          if (declensionsMap.has(service.id)) {
            existingDeclensionsMap.set(service.id, declensionsMap.get(service.id));
          }
        });
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —É—Å–ª—É–≥–∞–º (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –Ω–æ–≤—ã–µ)
      services.forEach(service => {
        if (existingDeclensionsMap.has(service.id)) {
          service.declensions = existingDeclensionsMap.get(service.id);
        }
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏
      const result = await this.saveServices(services);
      
      const duration = Date.now() - startTime;
      
      logger.info(`‚úÖ Services sync completed in ${duration}ms`, {
        processed: result.processed,
        errors: result.errors,
        total: services.length
      });

      return {
        success: true,
        ...result,
        duration
      };

    } catch (error) {
      logger.error('‚ùå Services sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –∏–∑ YClients API
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async fetchServiceCategories() {
    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–∏
      const url = `${this.config.BASE_URL}/company/${this.config.COMPANY_ID}/service_categories`;
      const headers = createYclientsHeaders(true);
      
      logger.debug('Fetching service categories from YClients', { url });
      
      const response = await axios.get(url, { headers });
      
      if (response.data?.success === false) {
        throw new Error(response.data?.meta?.message || 'API returned error');
      }
      
      return response.data?.data || [];
      
    } catch (error) {
      logger.error('Failed to fetch service categories from YClients', {
        error: error.message,
        response: error.response?.data
      });
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –∏–∑ YClients API
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —É—Å–ª—É–≥
   */
  async fetchServices() {
    try {
      const url = `${this.config.BASE_URL}/company/${this.config.COMPANY_ID}/services`;
      const headers = createYclientsHeaders(true);
      
      logger.debug('Fetching services from YClients', { url });
      
      const response = await axios.get(url, { headers });
      
      if (response.data?.success === false) {
        throw new Error(response.data?.meta?.message || 'API returned error');
      }
      
      return response.data?.data || [];
      
    } catch (error) {
      logger.error('Failed to fetch services from YClients', {
        error: error.message,
        response: error.response?.data
      });
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ª—É–≥–∏ –≤ Supabase
   * @param {Array} services - –ú–∞—Å—Å–∏–≤ —É—Å–ª—É–≥
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveServices(services) {
    let processed = 0;
    let errors = 0;
    const errorDetails = [];

    for (const service of services) {
      try {
        const serviceData = this.prepareServiceData(service);
        
        const { error } = await supabase
          .from(this.tableName)
          .upsert(serviceData, { 
            onConflict: 'yclients_id,company_id',
            ignoreDuplicates: false 
          });

        if (error) {
          errors++;
          errorDetails.push({
            service: service.title,
            error: error.message
          });
          
          if (errors <= 5) {
            logger.warn(`Failed to save service: ${service.title}`, { error: error.message });
          }
        } else {
          processed++;
          
          if (processed % 10 === 0) {
            logger.debug(`Progress: ${processed}/${services.length} services processed`);
          }
        }

      } catch (error) {
        errors++;
        errorDetails.push({
          service: service.title || 'Unknown',
          error: error.message
        });
        
        if (errors <= 5) {
          logger.error('Error processing service', {
            service: service.title,
            error: error.message
          });
        }
      }
    }

    if (errors > 0) {
      logger.warn(`Services sync completed with ${errors} errors`, {
        errorCount: errors,
        firstErrors: errorDetails.slice(0, 5)
      });
    }

    return { processed, errors, errorDetails };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @param {Object} service - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ API
   * @returns {Object} –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  prepareServiceData(service) {
    return {
      yclients_id: service.id,
      company_id: this.config.COMPANY_ID,
      title: service.title || 'Unnamed Service',
      category_id: service.category_id || null,
      category_title: service.category_title_from_api || service.category?.title || null,
      price_min: service.price_min || 0,
      price_max: service.price_max || service.price_min || 0,
      discount: service.discount || 0,
      duration: service.seance_length || null,
      seance_length: service.seance_length || null,
      is_active: service.active === 1 || service.active === "1",
      is_bookable: service.bookable !== 0 && service.bookable !== "0",
      description: service.comment || null,
      weight: service.weight || 0,
      declensions: service.declensions || null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è
      last_sync_at: new Date().toISOString(),
      raw_data: service // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} status - –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {number} recordsProcessed - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async updateSyncStatus(status, recordsProcessed = 0, errorMessage = null) {
    try {
      await supabase
        .from('sync_status')
        .upsert({
          table_name: this.tableName,
          company_id: this.config.COMPANY_ID,
          sync_status: status,
          last_sync_at: new Date().toISOString(),
          records_processed: recordsProcessed,
          error_message: errorMessage
        }, {
          onConflict: 'table_name,company_id'
        });
    } catch (error) {
      logger.error('Failed to update sync status', { error: error.message });
    }
  }
}

module.exports = { ServicesSync };