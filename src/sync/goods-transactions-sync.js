/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ YClients
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å expense_id=7 (–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤)
 */

const { supabase } = require('../database/supabase');
const logger = require('../utils/logger').child({ module: 'goods-transactions-sync' });
const { 
  YCLIENTS_CONFIG, 
  createYclientsHeaders,
  delay 
} = require('./sync-utils');
const axios = require('axios');

class GoodsTransactionsSync {
  constructor() {
    this.config = YCLIENTS_CONFIG;
    this.headers = createYclientsHeaders(true);
    this.GOODS_EXPENSE_ID = 7; // ID –¥–ª—è "–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤"
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async sync() {
    const startTime = Date.now();
    
    try {
      logger.info('üõçÔ∏è Starting goods transactions synchronization...');
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
      const transactions = await this.fetchGoodsTransactions();
      
      if (!transactions || transactions.length === 0) {
        logger.info('No goods transactions found');
        return {
          success: true,
          processed: 0,
          duration: Date.now() - startTime
        };
      }
      
      logger.info(`Found ${transactions.length} goods transactions`);
      
      // 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
      const clientTransactions = this.groupTransactionsByClient(transactions);
      
      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
      const result = await this.updateClientsWithGoods(clientTransactions);
      
      const duration = Date.now() - startTime;
      logger.info(`‚úÖ Goods transactions sync completed in ${duration}ms`, {
        processed: result.processed,
        errors: result.errors,
        totalAmount: result.totalAmount
      });
      
      return {
        success: true,
        ...result,
        duration
      };
      
    } catch (error) {
      logger.error('‚ùå Goods transactions sync failed', {
        error: error.message,
        stack: error.stack
      });
      
      return {
        success: false,
        error: error.message,
        duration: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ YClients
   */
  async fetchGoodsTransactions() {
    const allTransactions = [];
    let page = 1;
    const maxPages = 10; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    try {
      while (page <= maxPages) {
        const url = `${this.config.BASE_URL}/transactions/${this.config.COMPANY_ID}`;
        
        const params = {
          page: page,
          count: 200, // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          start_date: this.getStartDate(), // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
          end_date: this.getEndDate()
        };
        
        logger.debug(`Fetching transactions page ${page}...`);
        
        const response = await axios.get(url, {
          headers: this.headers,
          params: params
        });
        
        if (!response.data?.success) {
          logger.warn(`Failed to fetch page ${page}`);
          break;
        }
        
        const transactions = response.data.data || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const goodsTransactions = transactions.filter(t => 
          t.expense_id === this.GOODS_EXPENSE_ID || 
          (t.expense?.title && t.expense.title.includes('—Ç–æ–≤–∞—Ä')) ||
          t.sold_item_type === 'goods_transaction'
        );
        
        allTransactions.push(...goodsTransactions);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (transactions.length < 200) {
          break; // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        }
        
        page++;
        await delay(200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      }
      
      return allTransactions;
      
    } catch (error) {
      logger.error('Failed to fetch goods transactions', {
        error: error.message,
        page: page
      });
      throw error;
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
   */
  groupTransactionsByClient(transactions) {
    const clientMap = {};
    
    transactions.forEach(t => {
      const clientId = t.client_id;
      if (!clientId) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞
      
      if (!clientMap[clientId]) {
        clientMap[clientId] = {
          client_id: clientId,
          client_name: t.client?.name || 'Unknown',
          client_phone: t.client?.phone || null,
          total_amount: 0,
          transactions_count: 0,
          purchases: []
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      clientMap[clientId].total_amount += t.amount || 0;
      clientMap[clientId].transactions_count++;
      clientMap[clientId].purchases.push({
        date: t.date,
        amount: t.amount || 0,
        document_id: t.document_id,
        comment: t.comment || '',
        account: t.account?.title || 'Unknown'
      });
    });
    
    return clientMap;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö
   */
  async updateClientsWithGoods(clientTransactions) {
    let processed = 0;
    let errors = 0;
    let totalAmount = 0;
    
    for (const [yclientsId, data] of Object.entries(clientTransactions)) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ yclients_id
        const { data: client, error: findError } = await supabase
          .from('clients')
          .select('id, services_amount, total_spent')
          .eq('yclients_id', yclientsId)
          .eq('company_id', this.config.COMPANY_ID)
          .single();
        
        if (findError || !client) {
          logger.debug(`Client not found in database: ${yclientsId}`);
          errors++;
          continue;
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData = {
          goods_amount: data.total_amount,
          goods_count: data.transactions_count,
          goods_purchases: data.purchases,
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º services_amount –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          services_amount: client.total_spent - data.total_amount
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        const { error: updateError } = await supabase
          .from('clients')
          .update(updateData)
          .eq('id', client.id);
        
        if (updateError) {
          logger.error(`Failed to update client ${client.id}:`, updateError);
          errors++;
        } else {
          processed++;
          totalAmount += data.total_amount;
          
          if (processed % 50 === 0) {
            logger.info(`Progress: ${processed} clients updated`);
          }
        }
        
      } catch (error) {
        logger.error(`Error processing client ${yclientsId}:`, error);
        errors++;
      }
    }
    
    return {
      processed,
      errors,
      totalAmount
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (2 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥)
   */
  getStartDate() {
    const date = new Date();
    date.setFullYear(date.getFullYear() - 2);
    return date.toISOString().split('T')[0];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å–µ–≥–æ–¥–Ω—è)
   */
  getEndDate() {
    return new Date().toISOString().split('T')[0];
  }
}

module.exports = { GoodsTransactionsSync };