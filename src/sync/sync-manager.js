// src/sync/sync-manager.js
const { logger } = require('../utils/logger');
const { UniversalYclientsSync } = require('../../universal-yclients-sync');

/**
 * üîÑ SYNC MANAGER - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é YClients -> Supabase –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * 
 * –§–£–ù–ö–¶–ò–ò:
 * ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * ‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 * ‚úÖ On-demand —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API endpoints
 * ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * ‚úÖ Graceful shutdown –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class SyncManager {
  constructor() {
    this.syncInstance = null;
    this.isInitialized = false;
    this.syncInterval = null;
    this.lastSyncStatus = {};
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async initialize() {
    try {
      if (this.isInitialized) {
        logger.info('Sync manager already initialized');
        return;
      }

      logger.info('üîÑ Initializing sync manager...');
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
      this.syncInstance = new UniversalYclientsSync();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const status = await this.syncInstance.getSyncStatus();
      this.lastSyncStatus = this._processSyncStatus(status);
      
      logger.info('üìä Last sync status:', {
        services: this.lastSyncStatus.services?.last_sync_at || 'never',
        staff: this.lastSyncStatus.staff?.last_sync_at || 'never',
        clients: this.lastSyncStatus.clients?.last_sync_at || 'never',
        appointments: this.lastSyncStatus.appointments_cache?.last_sync_at || 'never'
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      const needsInitialSync = await this._checkNeedsInitialSync();
      if (needsInitialSync) {
        logger.info('üöÄ Running initial sync...');
        await this.runFullSync();
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      this._startPeriodicSync();
      
      // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π cron scheduler, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π sync
      // –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –∏ —á–∞—Å—Ç—ã–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      // this.syncInstance.startScheduledSync();
      
      this.isInitialized = true;
      logger.info('‚úÖ Sync manager initialized successfully');

    } catch (error) {
      logger.error('Failed to initialize sync manager:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async _checkNeedsInitialSync() {
    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
    const criticalTables = ['services', 'staff', 'clients'];
    
    for (const table of criticalTables) {
      if (!this.lastSyncStatus[table] || !this.lastSyncStatus[table].last_sync_at) {
        logger.info(`Table ${table} was never synced, initial sync required`);
        return true;
      }
      
      // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      const lastSync = new Date(this.lastSyncStatus[table].last_sync_at);
      const hoursSinceSync = (Date.now() - lastSync.getTime()) / (1000 * 60 * 60);
      
      if (hoursSinceSync > 24) {
        logger.info(`Table ${table} was synced ${Math.round(hoursSinceSync)} hours ago, sync recommended`);
        return true;
      }
    }
    
    return false;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  _startPeriodicSync() {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    this.syncInterval = setInterval(async () => {
      try {
        const now = new Date();
        const hour = now.getHours();
        const minute = now.getMinutes();
        
        // APPOINTMENTS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ –¥–ª—è —Å–ª–æ—Ç–æ–≤
        // –°–ª–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –±–µ—Ä—É—Ç—Å—è real-time –∏–∑ YClients API
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è appointments –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
        // –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø - 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
        // –ù–æ—á—å—é –≤ 4:00 –∏ –¥–Ω–µ–º –≤ 14:00
        if ((hour === 4 || hour === 14) && minute === 0) {
          logger.info('üîÑ Running twice-daily full sync...');
          
          // Clients (–∫–ª–∏–µ–Ω—Ç—ã) - 7 –∑–∞–ø—Ä–æ—Å–æ–≤
          await this.syncClients();
          
          // Services (—É—Å–ª—É–≥–∏) - 1 –∑–∞–ø—Ä–æ—Å
          await this.syncServices();
          
          // Staff (–º–∞—Å—Ç–µ—Ä–∞) - 2 –∑–∞–ø—Ä–æ—Å–∞
          await this.syncStaff();
          
          // Schedules (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤) - ~32 –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å book_dates API)
          await this.syncSchedules();
          
          // Appointments (–∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏) - 1 –∑–∞–ø—Ä–æ—Å
          await this.syncAppointments();
          
          logger.info('‚úÖ Twice-daily sync completed');
        }
        
        // –ò—Ç–æ–≥–æ: 2√ó43 = 86 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å 134)
        // –≠—Ç–æ –º–µ–Ω–µ–µ 4 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API
        
      } catch (error) {
        logger.error('Periodic sync failed:', error);
      }
    }, 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async runFullSync() {
    try {
      logger.info('üîÑ Starting full synchronization...');
      const results = await this.syncInstance.fullSync();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      this.lastSyncStatus = await this.syncInstance.getSyncStatus();
      
      return {
        success: true,
        results,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      logger.error('Full sync failed:', error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥
   */
  async syncServices() {
    try {
      logger.info('üõçÔ∏è Syncing services...');
      const result = await this.syncInstance.syncServices();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Services sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async syncStaff() {
    try {
      logger.info('üë• Syncing staff...');
      const result = await this.syncInstance.syncStaff();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Staff sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async syncClients() {
    try {
      logger.info('üë§ Syncing clients...');
      const result = await this.syncInstance.syncClients();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Clients sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
   */
  async syncAppointments() {
    try {
      logger.info('üìÖ Syncing appointments...');
      const result = await this.syncInstance.syncAppointments();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Appointments sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤
   * 
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å YClients book_dates API:
   * - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç is_working –Ω–∞ –æ—Å–Ω–æ–≤–µ working_dates (–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
   * - –î–æ–±–∞–≤–ª—è–µ—Ç has_booking_slots –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   * - –°–Ω–∏–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API: ~32 –∑–∞–ø—Ä–æ—Å–∞ –≤–º–µ—Å—Ç–æ 56
   */
  async syncSchedules() {
    try {
      logger.info('‚è∞ Syncing schedules...');
      const result = await this.syncInstance.syncStaffSchedules();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Schedules sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getSyncStatus() {
    try {
      const status = await this.syncInstance.getSyncStatus();
      this.lastSyncStatus = this._processSyncStatus(status);
      
      return {
        success: true,
        status: this.lastSyncStatus,
        isRunning: this.isInitialized,
        nextSync: this._getNextSyncTime()
      };
      
    } catch (error) {
      logger.error('Failed to get sync status:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  _processSyncStatus(statusArray) {
    const processed = {};
    
    for (const item of statusArray) {
      processed[item.table_name] = {
        last_sync_at: item.last_sync_at,
        sync_status: item.sync_status,
        records_processed: item.records_processed,
        error_message: item.error_message,
        duration_ms: item.sync_duration_ms
      };
    }
    
    return processed;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  _getNextSyncTime() {
    const now = new Date();
    const next = new Date(now);
    
    // –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    next.setMinutes(Math.ceil(now.getMinutes() / 30) * 30);
    next.setSeconds(0);
    next.setMilliseconds(0);
    
    if (next <= now) {
      next.setMinutes(next.getMinutes() + 30);
    }
    
    return next.toISOString();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async shutdown() {
    logger.info('üõë Shutting down sync manager...');
    
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    
    if (this.syncInstance) {
      this.syncInstance.stopSync();
      this.syncInstance = null;
    }
    
    this.isInitialized = false;
    logger.info('‚úÖ Sync manager stopped');
  }
}

// Singleton instance
const syncManager = new SyncManager();

module.exports = { syncManager };