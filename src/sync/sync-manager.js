/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö YClients ‚Üí Supabase
 * 
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
 */

const logger = require('../utils/logger').child({ module: 'sync-manager' });
const cron = require('node-cron');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const { CompanyInfoSync } = require('./company-info-sync');
const { ServicesSync } = require('./services-sync');
const { StaffSync } = require('./staff-sync');
const { ClientsSync } = require('./clients-sync');
const { SchedulesSync } = require('./schedules-sync');
const { ClientRecordsSync } = require('./client-records-sync');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
class SyncManager {
  constructor() {
    this.isInitialized = false;
    this.isRunning = false;
    this.cronJobs = [];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.modules = {
      company: new CompanyInfoSync(),
      services: new ServicesSync(),
      staff: new StaffSync(),
      clients: new ClientsSync(),
      schedules: new SchedulesSync(),
      clientRecords: new ClientRecordsSync()
    };
    
    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (Moscow time UTC+3)
    this.schedule = {
      services: '0 1 * * *',     // 01:00 - –£—Å–ª—É–≥–∏ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
      staff: '0 2 * * *',        // 02:00 - –ú–∞—Å—Ç–µ—Ä–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
      clients: '0 3 * * *',      // 03:00 - –ö–ª–∏–µ–Ω—Ç—ã (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
      schedules: '0 */4 * * *',  // –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ - –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
      company: '0 0 * * 0'       // 00:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –ö–æ–º–ø–∞–Ω–∏—è (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async initialize() {
    if (this.isInitialized) {
      logger.info('Sync manager already initialized');
      return;
    }

    try {
      logger.info('üîÑ Initializing sync manager...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const needsInitialSync = await this.checkNeedsInitialSync();
      
      if (needsInitialSync) {
        logger.info('üìä Running initial synchronization...');
        await this.runFullSync();
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      this.startScheduledSync();
      
      this.isInitialized = true;
      logger.info('‚úÖ Sync manager initialized successfully');
      
    } catch (error) {
      logger.error('Failed to initialize sync manager', {
        error: error.message,
        stack: error.stack
      });
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async checkNeedsInitialSync() {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
      return false;
    } catch (error) {
      logger.error('Error checking sync status', { error: error.message });
      return true;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async runFullSync() {
    if (this.isRunning) {
      logger.warn('Sync already running, skipping...');
      return { success: false, message: 'Sync already in progress' };
    }

    this.isRunning = true;
    const startTime = Date.now();
    const results = {};

    try {
      logger.info('üöÄ Starting full synchronization...');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      // 1. –ö–æ–º–ø–∞–Ω–∏—è (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
      logger.info('1/5 üè¢ Syncing company info...');
      results.company = await this.syncCompany();
      
      // 2. –£—Å–ª—É–≥–∏
      logger.info('2/5 üõçÔ∏è Syncing services...');
      results.services = await this.syncServices();
      
      // 3. –ú–∞—Å—Ç–µ—Ä–∞
      logger.info('3/5 üë• Syncing staff...');
      results.staff = await this.syncStaff();
      
      // 4. –ö–ª–∏–µ–Ω—Ç—ã
      logger.info('4/5 üë§ Syncing clients...');
      results.clients = await this.syncClients();
      
      // 5. –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
      logger.info('5/5 ‚è∞ Syncing schedules...');
      results.schedules = await this.syncSchedules();
      
      const duration = Math.round((Date.now() - startTime) / 1000);
      
      logger.info(`‚úÖ Full sync completed in ${duration} seconds`, {
        results
      });
      
      return {
        success: true,
        duration,
        results
      };
      
    } catch (error) {
      logger.error('Full sync failed', {
        error: error.message,
        results
      });
      
      return {
        success: false,
        error: error.message,
        results
      };
      
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
   */
  startScheduledSync() {
    if (this.cronJobs.length > 0) {
      logger.warn('Scheduled sync already running');
      return;
    }

    logger.info('üìÖ Starting scheduled synchronization...');
    
    // –£—Å–ª—É–≥–∏ - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 01:00
    this.cronJobs.push(
      cron.schedule(this.schedule.services, async () => {
        logger.info('üõçÔ∏è Running scheduled services sync...');
        await this.syncServices();
      }, { timezone: 'Europe/Moscow' })
    );
    
    // –ú–∞—Å—Ç–µ—Ä–∞ - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00
    this.cronJobs.push(
      cron.schedule(this.schedule.staff, async () => {
        logger.info('üë• Running scheduled staff sync...');
        await this.syncStaff();
      }, { timezone: 'Europe/Moscow' })
    );
    
    // –ö–ª–∏–µ–Ω—Ç—ã - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00
    this.cronJobs.push(
      cron.schedule(this.schedule.clients, async () => {
        logger.info('üë§ Running scheduled clients sync...');
        await this.syncClients();
      }, { timezone: 'Europe/Moscow' })
    );
    
    // –†–∞—Å–ø–∏—Å–∞–Ω–∏—è - –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    this.cronJobs.push(
      cron.schedule(this.schedule.schedules, async () => {
        logger.info('‚è∞ Running scheduled schedules sync...');
        await this.syncSchedules();
      }, { timezone: 'Europe/Moscow' })
    );
    
    // –ö–æ–º–ø–∞–Ω–∏—è - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
    this.cronJobs.push(
      cron.schedule(this.schedule.company, async () => {
        logger.info('üè¢ Running scheduled company sync...');
        await this.syncCompany();
      }, { timezone: 'Europe/Moscow' })
    );
    
    logger.info('‚úÖ Scheduled sync started', {
      schedule: this.schedule
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  stopScheduledSync() {
    if (this.cronJobs.length === 0) {
      logger.warn('No scheduled sync to stop');
      return;
    }

    logger.info('‚èπÔ∏è Stopping scheduled synchronization...');
    
    this.cronJobs.forEach(job => job.stop());
    this.cronJobs = [];
    
    logger.info('‚úÖ Scheduled sync stopped');
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async syncCompany() {
    try {
      logger.info('üè¢ Syncing company information...');
      const result = await this.modules.company.syncCompanyInfo();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Company sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥
   */
  async syncServices() {
    try {
      logger.info('üõçÔ∏è Syncing services...');
      const result = await this.modules.services.sync();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Services sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async syncStaff() {
    try {
      logger.info('üë• Syncing staff...');
      const result = await this.modules.staff.sync();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Staff sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async syncClients(options = {}) {
    try {
      logger.info('üë§ Syncing clients...');
      const result = await this.modules.clients.sync(options);
      return { success: true, ...result };
    } catch (error) {
      logger.error('Clients sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
   */
  async syncSchedules() {
    try {
      logger.info('‚è∞ Syncing schedules...');
      const result = await this.modules.schedules.sync();
      return { success: true, ...result };
    } catch (error) {
      logger.error('Schedules sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
   */
  async syncClientRecords(phone) {
    try {
      logger.info(`üìã Syncing records for client: ${phone}`);
      const result = await this.modules.clientRecords.syncClientRecordsByPhone(phone);
      return { success: true, ...result };
    } catch (error) {
      logger.error('Client records sync failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async shutdown() {
    logger.info('üõë Shutting down sync manager...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    this.stopScheduledSync();
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (this.isRunning) {
      logger.info('Waiting for current sync to complete...');
      await new Promise(resolve => {
        const checkInterval = setInterval(() => {
          if (!this.isRunning) {
            clearInterval(checkInterval);
            resolve();
          }
        }, 1000);
      });
    }
    
    this.isInitialized = false;
    logger.info('‚úÖ Sync manager stopped');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getStatus() {
    return {
      initialized: this.isInitialized,
      running: this.isRunning,
      scheduledJobs: this.cronJobs.length,
      schedule: this.schedule
    };
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
let syncManagerInstance = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
function getSyncManager() {
  if (!syncManagerInstance) {
    syncManagerInstance = new SyncManager();
  }
  return syncManagerInstance;
}

module.exports = {
  SyncManager,
  getSyncManager
};