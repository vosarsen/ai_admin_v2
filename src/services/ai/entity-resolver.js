// src/services/ai/entity-resolver.js
const smartCache = require('../cache/smart-cache');
const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');

/**
 * üéØ ENTITY RESOLUTION SERVICE
 * AI-powered –ø–æ–∏—Å–∫ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—É—Å–ª—É–≥–∏, –º–∞—Å—Ç–µ—Ä–∞)
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ AI
 * - Smart –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - Fuzzy matching –∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
 * - Multi-tenant –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 */
class EntityResolver {
  constructor() {
    this.aiService = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω lazily
    this.fallbackTimeout = 5000; // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è AI
  }

  /**
   * –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
   */
  async _getAIService() {
    if (!this.aiService) {
      this.aiService = require('./index');
    }
    return this.aiService;
  }

  /**
   * üõçÔ∏è –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ AI + DB
   */
  async resolveService(serviceName, companyId, context = {}) {
    if (!serviceName || !companyId) {
      throw new Error('ServiceName and companyId are required');
    }

    logger.info(`üîç Resolving service: "${serviceName}" for company ${companyId}`);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Smart Cache
      const result = await smartCache.getSemanticCache(
        serviceName,
        companyId,
        () => this._computeServiceResolution(serviceName, companyId, context),
        { 
          ttl: 1800, // 30 –º–∏–Ω—É—Ç
          type: 'entity',
          entityType: 'service'
        }
      );

      logger.info(`‚úÖ Service resolved: ${serviceName} ‚Üí ${result.title} (ID: ${result.yclients_id})`);
      return result;

    } catch (error) {
      logger.error(`Error resolving service "${serviceName}":`, error);
      
      // Fallback –∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —É—Å–ª—É–≥–µ
      const fallback = await this._getFallbackService(companyId);
      logger.warn(`üîÑ Using fallback service: ${fallback.title}`);
      return fallback;
    }
  }

  /**
   * üë§ –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ AI + DB
   */
  async resolveStaff(staffName, companyId, context = {}) {
    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ
    if (!staffName || staffName === '–ª—é–±–æ–π' || staffName === '–ª—é–±–æ–≥–æ') {
      return this._getPopularStaff(companyId, context);
    }

    logger.info(`üîç Resolving staff: "${staffName}" for company ${companyId}`);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Smart Cache
      const result = await smartCache.getSemanticCache(
        `staff_${staffName}`,
        companyId,
        () => this._computeStaffResolution(staffName, companyId, context),
        { 
          ttl: 3600, // 1 —á–∞—Å (–º–∞—Å—Ç–µ—Ä–∞ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∂–µ)
          type: 'entity',
          entityType: 'staff'
        }
      );

      logger.info(`‚úÖ Staff resolved: ${staffName} ‚Üí ${result.name} (ID: ${result.yclients_id})`);
      return result;

    } catch (error) {
      logger.error(`Error resolving staff "${staffName}":`, error);
      
      // Fallback –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É
      const fallback = await this._getPopularStaff(companyId, context);
      logger.warn(`üîÑ Using fallback staff: ${fallback.name}`);
      return fallback;
    }
  }

  /**
   * üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async resolveEntities(message, companyId, context = {}) {
    logger.info(`üß† Resolving entities from message: "${message}"`);

    try {
      // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI
      const aiService = await this._getAIService();
      const extraction = await Promise.race([
        aiService.processMessage(message, context),
        this._createTimeout(this.fallbackTimeout, 'AI entity extraction timeout')
      ]);

      if (!extraction.success) {
        throw new Error(extraction.error || 'AI extraction failed');
      }

      const entities = extraction.entities || {};

      // 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏
      const [service, staff] = await Promise.all([
        entities.service ? this.resolveService(entities.service, companyId, context) : null,
        entities.staff ? this.resolveStaff(entities.staff, companyId, context) : null
      ]);

      const result = {
        success: true,
        entities: {
          service,
          staff,
          date: entities.date,
          time: entities.time,
          action: extraction.action
        },
        confidence: extraction.confidence || 0.8,
        aiResponse: extraction.response
      };

      logger.info('‚úÖ Entities resolved successfully:', {
        service: service?.title,
        staff: staff?.name,
        action: result.entities.action
      });

      return result;

    } catch (error) {
      logger.error('Error resolving entities:', error);
      
      // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞–∑–±–æ—Ä—É
      return this._getFallbackEntities(message, companyId, context);
    }
  }

  // =================== PRIVATE METHODS ===================

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Å–ª—É–≥–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ cache miss)
   */
  async _computeServiceResolution(serviceName, companyId, context) {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    const services = await this._getCompanyServices(companyId);
    
    if (services.length === 0) {
      throw new Error(`No services found for company ${companyId}`);
    }

    // 2. –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–±—ã—Å—Ç—Ä–æ)
    const exactMatch = services.find(s => 
      s.title.toLowerCase() === serviceName.toLowerCase()
    );
    
    if (exactMatch) {
      logger.debug(`üìç Exact match found: ${exactMatch.title}`);
      return exactMatch;
    }
    
    // 2.5. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
    const partialMatches = services.filter(s => 
      s.title.toLowerCase().includes(serviceName.toLowerCase())
    );
    
    if (partialMatches.length > 1) {
      logger.debug(`üîç Found ${partialMatches.length} partial matches for "${serviceName}", using AI to select best`);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ AI –≤—ã–±–æ—Ä—É
    } else if (partialMatches.length === 1) {
      logger.debug(`üìç Single partial match found: ${partialMatches[0].title}`);
      return partialMatches[0];
    }

    // 3. AI –ø–æ–∏—Å–∫ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ª–∏–±–æ –≤—Å–µ —É—Å–ª—É–≥–∏
      const candidateServices = partialMatches.length > 0 ? partialMatches : services;
      
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π —É—Å–ª—É–≥–∏ –¥–ª—è "—Å—Ç—Ä–∏–∂–∫–∞"
      if (serviceName.toLowerCase() === '—Å—Ç—Ä–∏–∂–∫–∞' && candidateServices.length > 1) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ —Å—Ç—Ä–∏–∂–∫–∏
        const priorities = [
          '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
          '—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π',
          '—Å—Ç—Ä–∏–∂–∫–∞ –Ω–æ–∂–Ω–∏—Ü–∞–º–∏',
          '—Å—Ç—Ä–∏–∂–∫–∞ | —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã'
        ];
        
        for (const priority of priorities) {
          const match = candidateServices.find(s => 
            s.title.toLowerCase() === priority.toLowerCase()
          );
          if (match) {
            logger.debug(`üìã Priority match found: ${match.title}`);
            return match;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º, –±–µ—Ä–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∏–∂–∫—É
        const basicServices = candidateServices.filter(s => 
          !s.title.includes('+') && // –±–µ–∑ –∫–æ–º–±–æ-—É—Å–ª—É–≥
          !s.title.includes('–ë–û–†–û–î') && // –±–µ–∑ —É—Å–ª—É–≥ –±–æ—Ä–æ–¥—ã
          !s.title.includes('–¢–û–ù–ò–†–û–í–ê–ù–ò–ï') // –±–µ–∑ —Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        );
        
        if (basicServices.length > 0) {
          const cheapest = basicServices.sort((a, b) => 
            (a.price_min || 9999) - (b.price_min || 9999)
          )[0];
          logger.debug(`üí∞ Cheapest basic service selected: ${cheapest.title}`);
          return cheapest;
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±—É–µ–º AI (–µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
      try {
        const aiService = await this._getAIService();
        if (aiService && typeof aiService.selectBestService === 'function') {
          const bestMatch = await Promise.race([
            aiService.selectBestService(serviceName, candidateServices, context),
            this._createTimeout(3000, 'AI service selection timeout')
          ]);
          
          if (bestMatch) {
            logger.debug(`üß† AI match found: ${bestMatch.title}`);
            return bestMatch;
          }
        }
      } catch (aiError) {
        logger.debug('AI service not available or failed:', aiError.message);
      }
    } catch (error) {
      logger.warn('Service selection failed:', error.message);
    }

    // 4. Fuzzy match fallback
    const fuzzyMatch = this._findFuzzyMatch(serviceName, services, 'title');
    if (fuzzyMatch) {
      logger.debug(`üîç Fuzzy match found: ${fuzzyMatch.title}`);
      return fuzzyMatch;
    }

    // 5. –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —É—Å–ª—É–≥–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    const popular = services.find(s => s.weight > 0) || services[0];
    logger.debug(`‚≠ê Popular service fallback: ${popular.title}`);
    return popular;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ cache miss)
   */
  async _computeStaffResolution(staffName, companyId, context) {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
    const staff = await this._getCompanyStaff(companyId);
    
    if (staff.length === 0) {
      throw new Error(`No staff found for company ${companyId}`);
    }

    // 2. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    const exactMatch = staff.find(s => 
      s.name.toLowerCase().includes(staffName.toLowerCase())
    );
    
    if (exactMatch) {
      logger.debug(`üìç Exact staff match: ${exactMatch.name}`);
      return exactMatch;
    }

    // 3. Fuzzy match –ø–æ –∏–º–µ–Ω–∏
    const fuzzyMatch = this._findFuzzyMatch(staffName, staff, 'name');
    if (fuzzyMatch) {
      logger.debug(`üîç Fuzzy staff match: ${fuzzyMatch.name}`);
      return fuzzyMatch;
    }

    // 4. –ú–∞—Å—Ç–µ—Ä —Å –ª—É—á—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const topRated = staff
      .filter(s => s.rating > 0)
      .sort((a, b) => b.rating - a.rating)[0];
      
    if (topRated) {
      logger.debug(`‚≠ê Top rated staff fallback: ${topRated.name}`);
      return topRated;
    }

    // 5. –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Å—Ç–µ—Ä
    return staff[0];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async _getCompanyServices(companyId) {
    return smartCache.getOrCompute(
      `company_services_${companyId}`,
      async () => {
        const { data, error } = await supabase
          .from('services')
          .select('yclients_id, title, price_min, price_max, duration, description, weight')
          .eq('company_id', companyId)
          .eq('is_active', true)
          .eq('is_bookable', true)
          .order('weight', { ascending: false });

        if (error) {
          throw new Error(`Database error: ${error.message}`);
        }

        return data || [];
      },
      { 
        ttl: 1800, // 30 –º–∏–Ω—É—Ç
        type: 'static'
      }
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async _getCompanyStaff(companyId) {
    return smartCache.getOrCompute(
      `company_staff_${companyId}`,
      async () => {
        const { data, error } = await supabase
          .from('staff')
          .select('yclients_id, name, specialization, rating, service_ids')
          .eq('company_id', companyId)
          .eq('is_active', true)
          .eq('is_bookable', true)
          .order('rating', { ascending: false });

        if (error) {
          throw new Error(`Database error: ${error.message}`);
        }

        return data || [];
      },
      { 
        ttl: 3600, // 1 —á–∞—Å
        type: 'static'
      }
    );
  }

  /**
   * Fallback —É—Å–ª—É–≥–∞ (—Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–ª–∏ –ø–µ—Ä–≤–∞—è)
   */
  async _getFallbackService(companyId) {
    const services = await this._getCompanyServices(companyId);
    
    if (services.length === 0) {
      throw new Error(`No services available for company ${companyId}`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º weight) –∏–ª–∏ –ø–µ—Ä–≤—É—é
    return services.find(s => s.weight > 0) || services[0];
  }

  /**
   * –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
   */
  async _getPopularStaff(companyId, context) {
    const staff = await this._getCompanyStaff(companyId);
    
    if (staff.length === 0) {
      throw new Error(`No staff available for company ${companyId}`);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (context.client?.favorite_staff_ids?.length > 0) {
      const favorite = staff.find(s => 
        context.client.favorite_staff_ids.includes(s.yclients_id)
      );
      if (favorite) {
        logger.debug(`‚ù§Ô∏è Returning favorite staff: ${favorite.name}`);
        return favorite;
      }
    }

    // –ú–∞—Å—Ç–µ—Ä —Å –ª—É—á—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const topRated = staff
      .filter(s => s.rating > 0)
      .sort((a, b) => b.rating - a.rating)[0];
      
    return topRated || staff[0];
  }

  /**
   * Fuzzy matching –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
   */
  _findFuzzyMatch(query, items, field) {
    const threshold = 0.6; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    let bestMatch = null;
    let bestScore = 0;

    for (const item of items) {
      const score = this._calculateSimilarity(
        query.toLowerCase(),
        item[field].toLowerCase()
      );
      
      if (score > threshold && score > bestScore) {
        bestScore = score;
        bestMatch = item;
      }
    }

    return bestMatch;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ (–ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
   */
  _calculateSimilarity(str1, str2) {
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1;
    
    if (longer.length === 0) return 1.0;
    
    const editDistance = this._levenshteinDistance(longer, shorter);
    return (longer.length - editDistance) / longer.length;
  }

  /**
   * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
   */
  _levenshteinDistance(str1, str2) {
    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
    
    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,     // deletion
          matrix[j - 1][i] + 1,     // insertion
          matrix[j - 1][i - 1] + indicator  // substitution
        );
      }
    }
    
    return matrix[str2.length][str1.length];
  }

  /**
   * Fallback —Ä–∞–∑–±–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π –±–µ–∑ AI
   */
  async _getFallbackEntities(message, companyId, context) {
    logger.info('üîÑ Using fallback entity extraction');
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    const servicePatterns = ['—Å—Ç—Ä–∏–∂–∫–∞', '–º–∞–Ω–∏–∫—é—Ä', '–ø–µ–¥–∏–∫—é—Ä', '–º–∞—Å—Å–∞–∂', '–±–æ—Ä–æ–¥–∞'];
    const staffPatterns = ['—Å–µ—Ä–≥–µ–π', '–±–∞—Ä–∏', '—Ä–∞–º–∑–∞–Ω', '–º–∞—Å—Ç–µ—Ä'];
    
    const foundService = servicePatterns.find(pattern => 
      message.toLowerCase().includes(pattern)
    );
    
    const foundStaff = staffPatterns.find(pattern => 
      message.toLowerCase().includes(pattern)
    );

    return {
      success: true,
      entities: {
        service: foundService ? await this._getFallbackService(companyId) : null,
        staff: foundStaff ? await this._getPopularStaff(companyId, context) : null,
        date: null,
        time: null,
        action: 'search_slots'
      },
      confidence: 0.3,
      aiResponse: '–ü–æ–Ω—è–ª! –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.',
      fallback: true
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   */
  _createTimeout(ms, message) {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error(message)), ms);
    });
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async invalidateCache(companyId, type = 'all') {
    const patterns = [];
    
    if (type === 'all' || type === 'services') {
      patterns.push(`company_services_${companyId}`);
      patterns.push(`intent_*_${companyId}`);
    }
    
    if (type === 'all' || type === 'staff') {
      patterns.push(`company_staff_${companyId}`);
      patterns.push(`staff_*_${companyId}`);
    }
    
    for (const pattern of patterns) {
      await smartCache.invalidatePattern(pattern);
    }
    
    logger.info(`üóëÔ∏è Cache invalidated for company ${companyId}, type: ${type}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return smartCache.getStats();
  }
}

// Singleton instance
module.exports = new EntityResolver();