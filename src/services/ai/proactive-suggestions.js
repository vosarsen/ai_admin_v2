// src/services/ai/proactive-suggestions.js
const logger = require('../../utils/logger');
const smartCache = require('../cache/smart-cache');

/**
 * ü§ñ PROACTIVE AI SUGGESTIONS
 * –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–ª–æ—Ç–æ–≤
 * 
 * –ü–æ –¢–ó: AI –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–µ–Ω:
 * - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ - —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 3 –±–ª–∏–∂–∞–π—à–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
 * - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
 * - –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
 * - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É
 * - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç "—ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" –±–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
 */
class ProactiveSuggestions {
  constructor() {
    this.suggestionTemplates = {
      noSlots: [
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:",
        "–≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞—Ç–æ —è –Ω–∞—à–µ–ª –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        "–í —ç—Ç–æ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä –∑–∞–Ω—è—Ç, –Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
      ],
      alternativeTime: [
        "‚Ä¢ {time} - {staff_name} —Å–≤–æ–±–æ–¥–µ–Ω",
        "‚Ä¢ {time} —É {staff_name}",
        "‚Ä¢ {date} –≤ {time} —Å {staff_name}"
      ],
      alternativeStaff: [
        "–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ {staff_name} - —É –Ω–µ–≥–æ –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (—Ä–µ–π—Ç–∏–Ω–≥ {rating})",
        "{staff_name} —Ç–æ–∂–µ –æ—Ç–ª–∏—á–Ω–æ –¥–µ–ª–∞–µ—Ç {service} (—Ä–µ–π—Ç–∏–Ω–≥ {rating})",
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é {staff_name} - –Ω–∞—à —Ç–æ–ø-–º–∞—Å—Ç–µ—Ä (—Ä–µ–π—Ç–∏–Ω–≥ {rating})"
      ],
      popularServices: [
        "–ö—Å—Ç–∞—Ç–∏, –º–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç {service}",
        "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {service1} + {service2}",
        "–ß–∞—Å—Ç–æ –≤–º–µ—Å—Ç–µ —Å {current_service} –¥–µ–ª–∞—é—Ç {additional_service}"
      ],
      clientHistory: [
        "–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤—ã –¥–µ–ª–∞–ª–∏ {service} —É {staff_name}. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å?",
        "–û–±—ã—á–Ω–æ –≤—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ {preferred_time}. –ï—Å—Ç—å –≤—Ä–µ–º—è –≤ {time}",
        "–í–∞—à –ª—é–±–∏–º—ã–π –º–∞—Å—Ç–µ—Ä {staff_name} —Å–≤–æ–±–æ–¥–µ–Ω –∑–∞–≤—Ç—Ä–∞"
      ],
      urgentSlots: [
        "üî• –ì–æ—Ä—è—â–∏–π —Å–ª–æ—Ç: {time} —Å–æ —Å–∫–∏–¥–∫–æ–π 10%",
        "‚ö° –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è: {time}",
        "üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {time}"
      ]
    };
  }

  /**
   * üöÄ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  async generateSuggestions(context) {
    const { originalRequest, noSlotsReason, availableSlots, client, companyId } = context;
    
    logger.info('ü§ñ Generating proactive suggestions:', {
      reason: noSlotsReason,
      availableSlots: availableSlots?.length || 0,
      hasClientHistory: !!client?.last_services
    });

    const suggestions = {
      primary: null,
      alternatives: [],
      additional: [],
      urgent: []
    };

    try {
      // 1. –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      suggestions.primary = this._generateNoSlotsMessage(noSlotsReason);

      // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏ –º–∞—Å—Ç–µ—Ä–∞
      if (availableSlots && availableSlots.length > 0) {
        suggestions.alternatives = await this._generateTimeAlternatives(
          availableSlots, 
          originalRequest,
          companyId
        );
      }

      // 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)
      if (originalRequest.staff_id && originalRequest.staff_id !== 'any') {
        const staffAlternatives = await this._generateStaffAlternatives(
          originalRequest,
          companyId
        );
        suggestions.alternatives.push(...staffAlternatives);
      }

      // 4. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
      if (client?.last_services || client?.favorite_staff_ids) {
        const personalizedSuggestions = await this._generatePersonalizedSuggestions(
          client,
          originalRequest,
          companyId
        );
        suggestions.additional.push(...personalizedSuggestions);
      }

      // 5. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      const popularSuggestions = await this._generatePopularSuggestions(
        originalRequest.service_id,
        companyId
      );
      suggestions.additional.push(...popularSuggestions);

      // 6. –ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const urgentSuggestions = await this._generateUrgentSuggestions(
        originalRequest,
        companyId
      );
      suggestions.urgent.push(...urgentSuggestions);

      logger.info('‚úÖ Generated suggestions:', {
        primary: !!suggestions.primary,
        alternatives: suggestions.alternatives.length,
        additional: suggestions.additional.length,
        urgent: suggestions.urgent.length
      });

      return suggestions;

    } catch (error) {
      logger.error('Error generating proactive suggestions:', error);
      
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      return {
        primary: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
        alternatives: [],
        additional: [],
        urgent: []
      };
    }
  }

  /**
   * üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  formatSuggestionsAsText(suggestions) {
    const parts = [];

    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (suggestions.primary) {
      parts.push(suggestions.primary);
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–º–∞–∫—Å–∏–º—É–º 3)
    if (suggestions.alternatives.length > 0) {
      parts.push('');
      suggestions.alternatives.slice(0, 3).forEach(alt => {
        parts.push(alt);
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 2)
    if (suggestions.additional.length > 0) {
      parts.push('');
      suggestions.additional.slice(0, 2).forEach(add => {
        parts.push(add);
      });
    }

    // –ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1)
    if (suggestions.urgent.length > 0) {
      parts.push('');
      parts.push(suggestions.urgent[0]);
    }

    return parts.join('\n');
  }

  /**
   * üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  _generateNoSlotsMessage(reason) {
    const templates = this.suggestionTemplates.noSlots;
    
    switch (reason) {
      case 'staff_busy':
        return "–ú–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç, –Ω–æ —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:";
      case 'service_unavailable':
        return "–≠—Ç–∞ —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:";
      case 'no_working_hours':
        return "–°–∞–ª–æ–Ω –≤ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:";
      case 'fully_booked':
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã. –ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:";
      case 'no_slots':
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:";
      
      case 'no_matching_time':
        return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ${searchDetails.timePreference || '–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è'}. –ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:`;
      default:
        return this._getRandomTemplate(templates);
    }
  }

  /**
   * ‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
   */
  async _generateTimeAlternatives(availableSlots, originalRequest, companyId) {
    const alternatives = [];
    const template = this.suggestionTemplates.alternativeTime;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    const sortedSlots = this._sortSlotsByPreference(availableSlots, originalRequest);

    for (let i = 0; i < Math.min(3, sortedSlots.length); i++) {
      const slot = sortedSlots[i];
      const formatted = this._formatSlotTemplate(template[0], slot);
      alternatives.push(formatted);
    }

    return alternatives;
  }

  /**
   * üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async _generateStaffAlternatives(originalRequest, companyId) {
    const alternatives = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ (–∫—ç—à–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å)
      const alternativeStaff = await smartCache.getOrCompute(
        `alternative_staff_${originalRequest.service_id}_${companyId}`,
        async () => {
          // –ó–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Supabase –∑–∞ –º–∞—Å—Ç–µ—Ä–∞–º–∏
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
          return [
            { id: 2895125, name: '–°–µ—Ä–≥–µ–π', rating: 4.8 },
            { id: 3413963, name: '–ë–∞—Ä–∏', rating: 4.9 },
            { id: 3820250, name: '–†–∞–º–∑–∞–Ω', rating: 4.7 }
          ].filter(staff => staff.id !== originalRequest.staff_id);
        },
        { ttl: 3600, type: 'static' }
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
      const templates = this.suggestionTemplates.alternativeStaff;
      
      for (let i = 0; i < Math.min(2, alternativeStaff.length); i++) {
        const staff = alternativeStaff[i];
        const template = this._getRandomTemplate(templates);
        const formatted = template
          .replace('{staff_name}', staff.name)
          .replace('{rating}', staff.rating)
          .replace('{service}', originalRequest.service_name || '—ç—Ç—É —É—Å–ª—É–≥—É');
        
        alternatives.push(formatted);
      }

    } catch (error) {
      logger.error('Error generating staff alternatives:', error);
    }

    return alternatives;
  }

  /**
   * üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async _generatePersonalizedSuggestions(client, originalRequest, companyId) {
    const suggestions = [];
    const templates = this.suggestionTemplates.clientHistory;

    try {
      // –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Å–ª—É–≥
      if (client.last_services && client.last_services.length > 0) {
        const lastService = client.last_services[0];
        const template = templates[0];
        const suggestion = template
          .replace('{service}', lastService.service_name || '–ø—Ä–æ—à–ª—É—é —É—Å–ª—É–≥—É')
          .replace('{staff_name}', lastService.staff_name || '—Ç–æ–≥–æ –∂–µ –º–∞—Å—Ç–µ—Ä–∞');
        
        suggestions.push(suggestion);
      }

      // –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      if (client.preferred_time_slots && client.preferred_time_slots.length > 0) {
        const preferredTime = client.preferred_time_slots[0];
        const template = templates[1];
        const suggestion = template
          .replace('{preferred_time}', preferredTime)
          .replace('{time}', this._findSimilarTime(preferredTime));
        
        suggestions.push(suggestion);
      }

      // –ù–∞ –æ—Å–Ω–æ–≤–µ –ª—é–±–∏–º–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
      if (client.favorite_staff_ids && client.favorite_staff_ids.length > 0) {
        const favoriteStaffId = client.favorite_staff_ids[0];
        // –ó–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –ë–î
        const staffName = '–≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞'; // –ú–æ–∫
        const template = templates[2];
        const suggestion = template.replace('{staff_name}', staffName);
        
        suggestions.push(suggestion);
      }

    } catch (error) {
      logger.error('Error generating personalized suggestions:', error);
    }

    return suggestions.slice(0, 2); // –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  }

  /**
   * üåü –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
   */
  async _generatePopularSuggestions(currentServiceId, companyId) {
    const suggestions = [];
    const templates = this.suggestionTemplates.popularServices;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 6 —á–∞—Å–æ–≤)
      const popularCombos = await smartCache.getOrCompute(
        `popular_combos_${currentServiceId}_${companyId}`,
        async () => {
          // –ú–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
          return [
            { service: '–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã', combo_rate: 0.7 },
            { service: '—É–∫–ª–∞–¥–∫–∞', combo_rate: 0.3 }
          ];
        },
        { ttl: 21600, type: 'static' }
      );

      if (popularCombos.length > 0) {
        const topCombo = popularCombos[0];
        const template = templates[0];
        const suggestion = template.replace('{service}', topCombo.service);
        suggestions.push(suggestion);
      }

    } catch (error) {
      logger.error('Error generating popular suggestions:', error);
    }

    return suggestions.slice(0, 1);
  }

  /**
   * üî• –ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏
   */
  async _generateUrgentSuggestions(originalRequest, companyId) {
    const suggestions = [];
    const templates = this.suggestionTemplates.urgentSlots;

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤
      const urgentSlots = await smartCache.getOrCompute(
        `urgent_slots_${companyId}`,
        async () => {
          // –ú–æ–∫ –≥–æ—Ä—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤
          const now = new Date();
          const today = now.getHours() < 18; // –î–æ 18:00 –µ—Å—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
          
          if (today) {
            return [{
              time: `${now.getHours() + 2}:00`,
              type: 'today_discount',
              discount: 10
            }];
          }
          
          return [];
        },
        { ttl: 1800, type: 'urgent' } // –ö—ç—à –Ω–∞ 30 –º–∏–Ω—É—Ç
      );

      if (urgentSlots.length > 0) {
        const urgentSlot = urgentSlots[0];
        const template = templates[0]; // –ì–æ—Ä—è—â–∏–π —Å–ª–æ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π
        const suggestion = template.replace('{time}', urgentSlot.time);
        suggestions.push(suggestion);
      }

    } catch (error) {
      logger.error('Error generating urgent suggestions:', error);
    }

    return suggestions;
  }

  // =============== HELPER METHODS ===============

  _getRandomTemplate(templates) {
    return templates[Math.floor(Math.random() * templates.length)];
  }

  _formatSlotTemplate(template, slot) {
    return template
      .replace('{time}', slot.time || slot.datetime)
      .replace('{staff_name}', slot.staff_name || '–º–∞—Å—Ç–µ—Ä')
      .replace('{date}', slot.date || '–≤ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å');
  }

  _sortSlotsByPreference(slots, originalRequest) {
    // –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    return slots.sort((a, b) => {
      const timeA = a.time || a.datetime || '12:00';
      const timeB = b.time || b.datetime || '12:00';
      return timeA.localeCompare(timeB);
    });
  }

  _findSimilarTime(preferredTime) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const hour = parseInt(preferredTime.split(':')[0]);
    const similarHour = hour + 1; // –ù–∞ —á–∞—Å –ø–æ–∑–∂–µ
    return `${similarHour}:00`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  async getStats() {
    return {
      templates: Object.keys(this.suggestionTemplates).length,
      cacheKeys: ['popular_combos', 'alternative_staff', 'urgent_slots']
    };
  }
}

// Singleton instance
module.exports = new ProactiveSuggestions();