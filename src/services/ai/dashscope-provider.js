const axios = require('axios');
const logger = require('../../utils/logger').child({ module: 'dashscope-provider' });

/**
 * DashScope Provider –¥–ª—è Qwen –º–æ–¥–µ–ª–µ–π
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:
 * - Qwen-Plus: –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è 90% –∑–∞–ø—Ä–æ—Å–æ–≤
 * - Qwen2.5-72B: —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
 */
class DashScopeProvider {
  constructor() {
    this.apiKey = process.env.DASHSCOPE_API_KEY || '';
    if (!this.apiKey) {
      logger.error('DASHSCOPE_API_KEY is not set in environment variables');
      throw new Error('DASHSCOPE_API_KEY is required for DashScope provider');
    }
    this.apiUrl = 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions';
    
    // –î–≤–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
    this.models = {
      fast: 'qwen-plus',           // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      smart: 'qwen2.5-72b-instruct' // –£–º–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultParams = {
      temperature: 0.7,
      top_p: 0.8,
      max_tokens: 1000
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.stats = {
      fast: { count: 0, totalTime: 0, errors: 0 },
      smart: { count: 0, totalTime: 0, errors: 0 }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
   */
  assessComplexity(message, context) {
    
    // –§–∞–∫—Ç–æ—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const factors = {
      // –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      messageLength: message.length > 200 ? 2 : 0,
      
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
      multipleQuestions: (message.match(/\?/g) || []).length > 1 ? 2 : 0,
      
      // –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      contextReferences: /–ø—Ä–æ—à–ª|—Ä–∞–Ω–µ–µ|–≥–æ–≤–æ—Ä–∏–ª|—É–ø–æ–º–∏–Ω–∞–ª|–ø–æ–º–Ω–∏—à—å/i.test(message) ? 3 : 0,
      
      // –°–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      complexTime: /–ø–æ—Å–ª–µ.*–ø–µ—Ä–µ–¥|–º–µ–∂–¥—É.*–∏|–∫—Ä–æ–º–µ|–∏—Å–∫–ª—é—á–∞—è/i.test(message) ? 2 : 0,
      
      // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      problems: /–Ω–µ –º–æ–≥—É|–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è|–ø—Ä–æ–±–ª–µ–º–∞|–æ—à–∏–±–∫–∞|–æ—Ç–º–µ–Ω|–ø–µ—Ä–µ–Ω–µ—Å/i.test(message) ? 2 : 0,
      
      // –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      conditions: /–µ—Å–ª–∏|–ª–∏–±–æ|–∏–ª–∏.*–∏–ª–∏|–≤ —Å–ª—É—á–∞–µ/i.test(message) ? 2 : 0,
      
      // –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª–∏–Ω–Ω–∞—è
      longHistory: context.conversation?.length > 5 ? 2 : 0,
      
      // –ö–ª–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
      returningClient: context.isReturningClient ? 1 : 0
    };
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const totalScore = Object.values(factors).reduce((sum, score) => sum + score, 0);
    
    logger.debug('Complexity assessment:', {
      message: message.substring(0, 50) + '...',
      factors,
      totalScore
    });
    
    return {
      score: totalScore,
      useSmartModel: totalScore >= 5, // –ü–æ—Ä–æ–≥ –¥–ª—è —É–º–Ω–æ–π –º–æ–¥–µ–ª–∏
      factors
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ API
   */
  async call(prompt, options = {}) {
    const { 
      message = '', 
      context = {},
      forceModel = null // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
    } = options;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    const complexity = this.assessComplexity(message, context);
    const modelType = forceModel || (complexity.useSmartModel ? 'smart' : 'fast');
    const model = this.models[modelType];
    
    logger.info(`ü§ñ Using ${modelType} model (${model})`, {
      complexityScore: complexity.score,
      messagePreview: message.substring(0, 50) + '...'
    });
    
    try {
      const startTime = Date.now();
      
      const response = await axios.post(this.apiUrl, {
        model,
        messages: [
          {
            role: 'system',
            content: prompt
          },
          {
            role: 'user', 
            content: message
          }
        ],
        ...this.defaultParams,
        ...options.params // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: modelType === 'smart' ? 30000 : 15000 // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–º–Ω–æ–π –º–æ–¥–µ–ª–∏
      });
      
      const responseTime = Date.now() - startTime;
      const responseText = response.data.choices[0].message.content;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats[modelType].count++;
      this.stats[modelType].totalTime += responseTime;
      
      logger.info(`‚úÖ ${model} responded in ${responseTime}ms`);
      
      return {
        text: responseText,
        model,
        modelType,
        responseTime,
        complexity: complexity.score,
        usage: response.data.usage
      };
      
    } catch (error) {
      this.stats[modelType].errors++;
      
      logger.error(`‚ùå ${model} API error:`, {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      
      // –ï—Å–ª–∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é
      if (modelType === 'smart' && !forceModel) {
        logger.warn('Falling back to fast model...');
        return this.call(prompt, { ...options, forceModel: 'fast' });
      }
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getStats() {
    const stats = {};
    
    for (const [type, data] of Object.entries(this.stats)) {
      stats[type] = {
        ...data,
        avgResponseTime: data.count > 0 ? Math.round(data.totalTime / data.count) : 0,
        successRate: data.count > 0 ? ((data.count - data.errors) / data.count * 100).toFixed(1) + '%' : '0%'
      };
    }
    
    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async healthCheck() {
    try {
      const response = await this.call('–ü—Ä–∏–≤–µ—Ç', {
        message: '–¢–µ—Å—Ç',
        forceModel: 'fast',
        params: { max_tokens: 10 }
      });
      
      return {
        available: true,
        models: this.models,
        responseTime: response.responseTime
      };
    } catch (error) {
      return {
        available: false,
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
module.exports = new DashScopeProvider();