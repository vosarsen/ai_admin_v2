// src/services/ai/index.js
const axios = require('axios');
const config = require('../../config');
const logger = require('../../utils/logger');
const circuitBreakerFactory = require('../../utils/circuit-breaker');
const SmartNLU = require('../nlu/smart-nlu');

class AIService {
  constructor() {
    // Primary provider (DeepSeek)
    this.primaryProvider = {
      name: 'deepseek',
      apiUrl: config.ai.apiUrl,
      apiKey: config.ai.apiKey,
      model: config.ai.model,
      temperature: config.ai.temperature,
      maxTokens: config.ai.maxTokens,
      timeout: config.ai.timeout
    };
    
    // Backup provider (YandexGPT)
    this.backupProvider = {
      name: 'yandex',
      apiUrl: 'https://llm.api.cloud.yandex.net/foundationModels/v1',
      iamToken: process.env.YANDEX_IAM_TOKEN,
      folderId: process.env.YANDEX_FOLDER_ID,
      model: process.env.YANDEX_MODEL || 'yandexgpt',
      temperature: config.ai.temperature,
      maxTokens: config.ai.maxTokens,
      timeout: parseInt(process.env.YANDEX_TIMEOUT) || 10000
    };
    
    // Initialize circuit breakers for both providers
    this.primaryCircuitBreaker = circuitBreakerFactory.getBreaker('ai-service-primary', {
      timeout: this.primaryProvider.timeout,
      errorThreshold: 2, // –ë—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ backup
      resetTimeout: 60000 // 1 minute
    });
    
    this.backupCircuitBreaker = circuitBreakerFactory.getBreaker('ai-service-backup', {
      timeout: this.backupProvider.timeout,
      errorThreshold: 3,
      resetTimeout: 30000
    });
    
    // Create axios instances
    this.primaryClient = this._createClient(this.primaryProvider);
    this.backupClient = this._createClient(this.backupProvider);
    
    // Initialize Smart NLU
    this.smartNLU = new SmartNLU(this);
  }

  _createClient(provider) {
    const headers = {
      'Content-Type': 'application/json'
    };
    
    // Different auth for different providers
    if (provider.name === 'yandex') {
      headers['Authorization'] = `Bearer ${provider.iamToken}`;
    } else {
      headers['Authorization'] = `Bearer ${provider.apiKey}`;
    }
    
    return axios.create({
      baseURL: provider.apiUrl,
      timeout: provider.timeout,
      headers
    });
  }

  /**
   * Process message using Smart NLU system
   */
  async processMessage(message, context) {
    logger.info('üß† Processing message with Smart NLU system');
    
    try {
      // Use Smart NLU for comprehensive entity extraction and intent detection
      const result = await this.smartNLU.processMessage(message, context);
      
      logger.info('ü§ñ Smart NLU Result:', {
        success: result.success,
        intent: result.intent,
        action: result.action,
        entities: result.entities,
        confidence: result.confidence,
        provider: result.provider
      });
      
      return result;
      
    } catch (error) {
      logger.error('‚ùå Smart NLU processing failed:', error.message);
      
      // Ultimate fallback to simple pattern matching
      logger.info('üîÑ Using emergency fallback processing');
      return this._emergencyFallback(message, context);
    }
  }

  /**
   * Emergency fallback when Smart NLU fails completely
   */
  _emergencyFallback(message, context) {
    logger.warn('‚ö†Ô∏è Using emergency fallback - limited functionality');
    
    return {
      success: true,
      intent: 'other',
      entities: {},
      action: 'none', 
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.',
      confidence: 0.1,
      provider: 'emergency'
    };
  }

  /**
   * Legacy fallback processing using simple patterns (deprecated)
   */
  _fallbackProcessing(message, context) {
    const msg = message.toLowerCase();
    
    // Simple booking pattern detection
    const isBookingRequest = 
      (msg.includes('–∑–∞–ø–∏—à') || msg.includes('–∑–∞–ø–∏—Å–∞—Ç') || msg.includes('–∑–∞–ø–∏—Å—ã–≤–∞')) &&
      (msg.includes('—Å—Ç—Ä–∏–∂') || msg.includes('–±—Ä–æ–¥') || msg.includes('—É—Å–ª—É–≥'));
    
    if (isBookingRequest) {
      // Extract basic entities using regex
      const entities = this._extractEntitiesSimple(message);
      
      if (entities.date && entities.time && entities.staff) {
        return {
          success: true,
          intent: 'booking',
          entities: entities,
          action: 'create_booking',
          response: `–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—Å –∫ ${entities.staff} ${entities.date} –≤ ${entities.time}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å.`,
          confidence: 0.8
        };
      } else {
        return {
          success: true,
          intent: 'booking',
          entities: entities,
          action: 'search_slots',
          response: null,
          confidence: 0.6
        };
      }
    }
    
    // Default fallback
    return {
      success: true,
      intent: 'other',
      entities: {},
      action: 'none',
      response: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
      confidence: 0.5
    };
  }

  /**
   * Simple entity extraction using regex
   */
  _extractEntitiesSimple(message) {
    const entities = {};
    
    // Extract staff names
    const staff = ['–±–∞—Ä–∏', '—Å–µ—Ä–≥–µ–π', '—Å–µ—Ä–≥–µ—é', '—Ä–∞–º–∑–∞–Ω'];
    for (const name of staff) {
      if (message.toLowerCase().includes(name)) {
        entities.staff = name.charAt(0).toUpperCase() + name.slice(1);
        break;
      }
    }
    
    // Extract time (HH:MM format)
    const timeMatch = message.match(/(\d{1,2}):?(\d{2})|(\d{1,2})\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞)/);
    if (timeMatch) {
      if (timeMatch[1] && timeMatch[2]) {
        entities.time = `${timeMatch[1]}:${timeMatch[2]}`;
      } else if (timeMatch[3]) {
        entities.time = `${timeMatch[3]}:00`;
      }
    }
    
    // Extract date patterns
    if (message.includes('–∑–∞–≤—Ç—Ä–∞')) {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      entities.date = tomorrow.toISOString().split('T')[0];
    } else if (message.includes('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')) {
      const dayAfter = new Date();
      dayAfter.setDate(dayAfter.getDate() + 2);
      entities.date = dayAfter.toISOString().split('T')[0];
    } else if (message.includes('—Å–µ–≥–æ–¥–Ω—è')) {
      entities.date = new Date().toISOString().split('T')[0];
    }
    
    // Extract service
    if (message.includes('—Å—Ç—Ä–∏–∂')) {
      entities.service = '—Å—Ç—Ä–∏–∂–∫–∞';
    } else if (message.includes('–±—Ä–æ–¥') || message.includes('–±–æ—Ä–æ–¥–∞')) {
      entities.service = '—Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã';
    }
    
    return entities;
  }

  /**
   * Build AI prompt with context
   */
  _buildPrompt(message, context) {
    const { client, services, staff, lastMessages } = context;
    
    return `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–ª–∏–µ–Ω—Ç: ${client ? client.name : '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${context.phone}
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: ${client?.lastVisit || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
- –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò (—Ç–æ–ø-10):
${services.slice(0, 10).map(s => `- ${s.title} (${s.price_min}‚ÇΩ, ${s.duration}–º–∏–Ω)`).join('\n')}

–î–û–°–¢–£–ü–ù–´–ï –ú–ê–°–¢–ï–†–ê (—Ç–æ–ø-5):
${staff.slice(0, 5).map(s => `- ${s.name} (${s.specialization})`).join('\n')}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
${lastMessages.map(m => `–ö–ª–∏–µ–Ω—Ç: ${m.user}\n–ê–¥–º–∏–Ω: ${m.assistant}`).join('\n')}

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç "—Ç–æ–≥–¥–∞", "—Ç—É–¥–∞", "–≤ —ç—Ç–æ –≤—Ä–µ–º—è" - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë
- "22 —É—Ç—Ä–∞" –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç "10 —É—Ç—Ä–∞" (–æ–ø–µ—á–∞—Ç–∫–∞)

–û–ü–†–ï–î–ï–õ–ò:
1. intent - –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (booking, reschedule, cancel, info, other)
2. entities - —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:
   - service: –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ)
   - staff: –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ)
   - date: –¥–∞—Ç–∞ (YYYY-MM-DD)
   - time: –≤—Ä–µ–º—è (HH:MM)
   - time_preference: –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ (morning, afternoon, evening, –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ "—Å —É—Ç—Ä–∞", "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞", "–≤–µ—á–µ—Ä–æ–º", "–ø–æ—Å–ª–µ 18:00")
3. action - –¥–µ–π—Å—Ç–≤–∏–µ:
   - create_booking: –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ò —É–∫–∞–∑–∞–ª –º–∞—Å—Ç–µ—Ä–∞ –ò —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è
   - search_slots: –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–æ –ù–ï —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
   - get_info: –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ª—É–≥–∞—Ö/—Ü–µ–Ω–∞—Ö
   - none: –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
4. response - –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–∫—Ä–∞—Ç–∫–æ, –ø–æ-–¥–µ–ª–æ–≤–æ–º—É). –í–ê–ñ–ù–û: –¥–ª—è action "search_slots" –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π response: null
5. confidence - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "intent": "...",
  "entities": {...},
  "action": "...",
  "response": "...",
  "confidence": 0.9
}`;
  }

  /**
   * Call AI API with specified provider
   */
  async _callAI(prompt, providerType = 'primary') {
    const provider = providerType === 'primary' ? this.primaryProvider : this.backupProvider;
    const client = providerType === 'primary' ? this.primaryClient : this.backupClient;
    const circuitBreaker = providerType === 'primary' ? this.primaryCircuitBreaker : this.backupCircuitBreaker;
    
    try {
      const response = await circuitBreaker.execute(async () => {
        let requestBody;
        let endpoint;
        
        if (provider.name === 'yandex') {
          // YandexGPT format
          requestBody = {
            modelUri: `gpt://${provider.folderId}/${provider.model}`,
            completionOptions: {
              stream: false,
              temperature: provider.temperature,
              maxTokens: provider.maxTokens.toString()
            },
            messages: [
              {
                role: 'user',
                text: prompt
              }
            ]
          };
          endpoint = '/completion';
        } else {
          // OpenAI format
          requestBody = {
            model: provider.model,
            messages: [
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: provider.temperature,
            max_tokens: provider.maxTokens
          };
          endpoint = provider.name === 'openai' ? '/chat/completions' : '';
        }
        
        logger.info(`üì° Calling ${provider.name} API...`, {
          model: provider.model,
          endpoint: endpoint,
          folderId: provider.folderId
        });
        
        return await client.post(endpoint, requestBody);
      });

      // Different response formats for different providers
      let responseText;
      
      if (provider.name === 'yandex') {
        // YandexGPT response format
        responseText = response.data?.result?.alternatives?.[0]?.message?.text;
      } else {
        // OpenAI response format
        responseText = response.data?.choices?.[0]?.message?.content;
      }
      
      if (responseText) {
        logger.info(`‚úÖ ${provider.name} API responded successfully`);
        return responseText.trim();
      }

      throw new Error(`Invalid AI response format from ${provider.name}`);
    } catch (error) {
      if (error.code === 'CIRCUIT_OPEN') {
        logger.warn(`${provider.name} circuit breaker is open`);
        throw new Error(`${provider.name} service temporarily unavailable`);
      }
      logger.error(`${provider.name} API call failed:`, {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      throw error;
    }
  }

  /**
   * Parse AI response
   */
  _parseResponse(aiResponse) {
    try {
      // Try to extract JSON from response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        
        // Validate required fields
        return {
          intent: parsed.intent || 'other',
          entities: parsed.entities || {},
          action: parsed.action || 'none',
          response: parsed.response !== undefined ? parsed.response : aiResponse,
          confidence: parsed.confidence || 0.5
        };
      }
    } catch (error) {
      logger.warn('Failed to parse AI response as JSON:', error.message);
    }

    // Fallback - return raw response
    return {
      intent: 'other',
      entities: {},
      action: 'none',
      response: aiResponse,
      confidence: 0.3
    };
  }

  /**
   * Generate calendar event description
   */
  generateCalendarEvent(booking) {
    const { service, staff, datetime, duration } = booking;
    
    return {
      title: `${service} - ${staff}`,
      start: datetime,
      duration: duration,
      description: `–ó–∞–ø–∏—Å—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã\n–£—Å–ª—É–≥–∞: ${service}\n–ú–∞—Å—Ç–µ—Ä: ${staff}`,
      location: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã' // TODO: Get from company data
    };
  }

  /**
   * Generate reminder message
   */
  generateReminder(booking, hoursBeore) {
    const { service, staff, datetime } = booking;
    const time = new Date(datetime).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    if (hoursBeore === 24) {
      return `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞:\nüìÖ ${service}\nüë§ –ú–∞—Å—Ç–µ—Ä: ${staff}\nüïê –í—Ä–µ–º—è: ${time}\n\n–ë—É–¥–µ—Ç–µ?`;
    } else {
      return `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ ${hoursBeore} —á–∞—Å–∞:\nüìÖ ${service}\nüë§ –ú–∞—Å—Ç–µ—Ä: ${staff}\nüïê –í—Ä–µ–º—è: ${time}\n\n–ñ–¥–µ–º –≤–∞—Å!`;
    }
  }
}

// Singleton instance
module.exports = new AIService();