// src/services/ai/index.js
const axios = require('axios');
const config = require('../../config');
const logger = require('../../utils/logger');
const circuitBreakerFactory = require('../../utils/circuit-breaker');

class AIService {
  constructor() {
    this.apiUrl = config.ai.apiUrl;
    this.apiKey = config.ai.apiKey;
    this.model = config.ai.model;
    this.temperature = config.ai.temperature;
    this.maxTokens = config.ai.maxTokens;
    
    // Initialize circuit breaker
    this.circuitBreaker = circuitBreakerFactory.getBreaker('ai-service', {
      timeout: config.ai.timeout,
      errorThreshold: 3,
      resetTimeout: 30000 // 30 seconds
    });
    
    // Create axios instance for AI calls
    this.client = axios.create({
      baseURL: this.apiUrl,
      timeout: config.ai.timeout,
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      }
    });
  }

  /**
   * Process message and return structured response
   */
  async processMessage(message, context) {
    try {
      const prompt = this._buildPrompt(message, context);
      const aiResponse = await this._callAI(prompt);
      const parsed = this._parseResponse(aiResponse);
      
      return {
        success: true,
        intent: parsed.intent,
        entities: parsed.entities,
        action: parsed.action,
        response: parsed.response,
        confidence: parsed.confidence
      };
    } catch (error) {
      logger.error('AI processing failed:', error);
      return {
        success: false,
        response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        error: error.message
      };
    }
  }

  /**
   * Build AI prompt with context
   */
  _buildPrompt(message, context) {
    const { client, services, staff, lastMessages } = context;
    
    return `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–ª–∏–µ–Ω—Ç: ${client ? client.name : '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${context.phone}
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: ${client?.lastVisit || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
- –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò (—Ç–æ–ø-10):
${services.slice(0, 10).map(s => `- ${s.title} (${s.price_min}‚ÇΩ, ${s.duration}–º–∏–Ω)`).join('\n')}

–î–û–°–¢–£–ü–ù–´–ï –ú–ê–°–¢–ï–†–ê (—Ç–æ–ø-5):
${staff.slice(0, 5).map(s => `- ${s.name} (${s.specialization})`).join('\n')}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
${lastMessages.map(m => `–ö–ª–∏–µ–Ω—Ç: ${m.user}\n–ê–¥–º–∏–Ω: ${m.assistant}`).join('\n')}

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–û–ü–†–ï–î–ï–õ–ò:
1. intent - –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (booking, reschedule, cancel, info, other)
2. entities - —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:
   - service: –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ)
   - staff: –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ)
   - date: –¥–∞—Ç–∞ (YYYY-MM-DD)
   - time: –≤—Ä–µ–º—è (HH:MM)
3. action - –¥–µ–π—Å—Ç–≤–∏–µ (search_slots, create_booking, get_info, none)
4. response - –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–∫—Ä–∞—Ç–∫–æ, –ø–æ-–¥–µ–ª–æ–≤–æ–º—É)
5. confidence - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "intent": "...",
  "entities": {...},
  "action": "...",
  "response": "...",
  "confidence": 0.9
}`;
  }

  /**
   * Call AI API
   */
  async _callAI(prompt) {
    try {
      const response = await this.circuitBreaker.execute(async () => {
        return await this.client.post('', {
          model: this.model,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: this.temperature,
          max_tokens: this.maxTokens
        });
      });

      if (response.data?.choices?.[0]?.message?.content) {
        return response.data.choices[0].message.content.trim();
      }

      throw new Error('Invalid AI response format');
    } catch (error) {
      if (error.code === 'CIRCUIT_OPEN') {
        logger.warn('AI service circuit breaker is open');
        throw new Error('AI service temporarily unavailable');
      }
      logger.error('AI API call failed:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      throw error;
    }
  }

  /**
   * Parse AI response
   */
  _parseResponse(aiResponse) {
    try {
      // Try to extract JSON from response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        
        // Validate required fields
        return {
          intent: parsed.intent || 'other',
          entities: parsed.entities || {},
          action: parsed.action || 'none',
          response: parsed.response || aiResponse,
          confidence: parsed.confidence || 0.5
        };
      }
    } catch (error) {
      logger.warn('Failed to parse AI response as JSON:', error.message);
    }

    // Fallback - return raw response
    return {
      intent: 'other',
      entities: {},
      action: 'none',
      response: aiResponse,
      confidence: 0.3
    };
  }

  /**
   * Generate calendar event description
   */
  generateCalendarEvent(booking) {
    const { service, staff, datetime, duration } = booking;
    
    return {
      title: `${service} - ${staff}`,
      start: datetime,
      duration: duration,
      description: `–ó–∞–ø–∏—Å—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã\n–£—Å–ª—É–≥–∞: ${service}\n–ú–∞—Å—Ç–µ—Ä: ${staff}`,
      location: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã' // TODO: Get from company data
    };
  }

  /**
   * Generate reminder message
   */
  generateReminder(booking, hoursBeore) {
    const { service, staff, datetime } = booking;
    const time = new Date(datetime).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    if (hoursBeore === 24) {
      return `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞:\nüìÖ ${service}\nüë§ –ú–∞—Å—Ç–µ—Ä: ${staff}\nüïê –í—Ä–µ–º—è: ${time}\n\n–ë—É–¥–µ—Ç–µ?`;
    } else {
      return `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ ${hoursBeore} —á–∞—Å–∞:\nüìÖ ${service}\nüë§ –ú–∞—Å—Ç–µ—Ä: ${staff}\nüïê –í—Ä–µ–º—è: ${time}\n\n–ñ–¥–µ–º –≤–∞—Å!`;
    }
  }
}

// Singleton instance
module.exports = new AIService();