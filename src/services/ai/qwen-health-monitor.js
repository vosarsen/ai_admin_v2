const logger = require('../../utils/logger').child({ module: 'qwen-health-monitor' });
const dashscopeProvider = require('./dashscope-provider');

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è Qwen AI —Å–∏—Å—Ç–µ–º—ã
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏, –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
class QwenHealthMonitor {
  constructor() {
    this.metrics = {
      lastCheck: null,
      failures: [],
      slowResponses: [],
      errorRate: 0,
      avgResponseTime: 0
    };
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    this.thresholds = {
      errorRate: 0.1, // 10% –æ—à–∏–±–æ–∫
      slowResponse: 5000, // 5 —Å–µ–∫—É–Ω–¥
      maxFailures: 5 // 5 –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  async checkHealth() {
    const startTime = Date.now();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π
      const healthCheck = await dashscopeProvider.healthCheck();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = dashscopeProvider.getStats();
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const totalRequests = stats.fast.count + stats.smart.count;
      const totalErrors = stats.fast.errors + stats.smart.errors;
      const errorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;
      
      // –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
      const avgResponseTime = this.calculateAvgResponseTime(stats);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this.metrics = {
        lastCheck: new Date(),
        errorRate,
        avgResponseTime,
        failures: errorRate > this.thresholds.errorRate ? 
          [...this.metrics.failures, new Date()] : [],
        slowResponses: avgResponseTime > this.thresholds.slowResponse ?
          [...this.metrics.slowResponses, new Date()] : [],
        stats,
        healthy: healthCheck.available && errorRate < this.thresholds.errorRate
      };
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (!this.metrics.healthy) {
        logger.error('üö® Qwen AI health check failed', this.metrics);
      } else {
        logger.info('‚úÖ Qwen AI health check passed', {
          errorRate: `${(errorRate * 100).toFixed(2)}%`,
          avgResponseTime: `${avgResponseTime}ms`
        });
      }
      
      return this.metrics;
      
    } catch (error) {
      logger.error('Health check error:', error);
      this.metrics.failures.push(new Date());
      this.metrics.healthy = false;
      return this.metrics;
    }
  }

  /**
   * –†–∞—Å—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  calculateAvgResponseTime(stats) {
    const totalTime = stats.fast.totalTime + stats.smart.totalTime;
    const totalCount = stats.fast.count + stats.smart.count;
    return totalCount > 0 ? Math.round(totalTime / totalCount) : 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞
   */
  shouldAlert() {
    // –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
    if (this.metrics.failures.length >= this.thresholds.maxFailures) {
      const recentFailures = this.metrics.failures.filter(
        date => Date.now() - date.getTime() < 300000 // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      );
      
      if (recentFailures.length >= this.thresholds.maxFailures) {
        return {
          alert: true,
          reason: 'Too many consecutive failures',
          details: this.metrics
        };
      }
    }
    
    // –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π error rate
    if (this.metrics.errorRate > this.thresholds.errorRate) {
      return {
        alert: true,
        reason: 'High error rate',
        details: this.metrics
      };
    }
    
    // –ê–ª–µ—Ä—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (this.metrics.avgResponseTime > this.thresholds.slowResponse) {
      return {
        alert: true,
        reason: 'Slow response times',
        details: this.metrics
      };
    }
    
    return { alert: false };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  startMonitoring(intervalMs = 60000) { // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    logger.info('Starting Qwen health monitoring...');
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.checkHealth();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.monitoringInterval = setInterval(async () => {
      await this.checkHealth();
      
      const alertStatus = this.shouldAlert();
      if (alertStatus.alert) {
        logger.error('üö® ALERT:', alertStatus);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      }
    }, intervalMs);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  stopMonitoring() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      logger.info('Qwen health monitoring stopped');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
module.exports = new QwenHealthMonitor();