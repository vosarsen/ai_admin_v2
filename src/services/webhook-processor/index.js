const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');
const whatsappClient = require('../../integrations/whatsapp/client');
const { YclientsClient } = require('../../integrations/yclients/client');
const config = require('../../config');

class YClientsWebhookProcessor {
  constructor() {
    this.whatsappClient = whatsappClient;
    this.yclientsClient = new YclientsClient();
    this.companyId = config.yclients?.companyId || 962302;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ webhook —Å–æ–±—ã—Ç–∏–µ
   */
  async processEvent(event) {
    const { id: eventId, type, companyId, data, timestamp } = event;
    
    logger.info('üîÑ Processing webhook event', {
      eventId,
      type,
      companyId,
      recordId: data?.id
    });

    try {
      // –ú–∞—Ä–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
      await this.markEventProcessed(eventId);

      // –†–æ—É—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –ø–æ —Ç–∏–ø—É
      switch (type) {
        case 'record.created':
          await this.handleRecordCreated(data, companyId);
          break;
        
        case 'record.updated':
          await this.handleRecordUpdated(data, companyId);
          break;
        
        case 'record.deleted':
          await this.handleRecordDeleted(data, companyId);
          break;
        
        default:
          logger.warn('‚ö†Ô∏è Unknown event type', { type });
      }

      logger.info('‚úÖ Event processed successfully', { eventId });
    } catch (error) {
      logger.error('‚ùå Error processing event', {
        eventId,
        error: error.message,
        stack: error.stack
      });
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
   */
  async handleRecordCreated(recordData, companyId) {
    logger.info('üìù Handling record.created event', {
      recordId: recordData.id,
      clientPhone: recordData.client?.phone
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    const isOurBooking = await this.isBookingCreatedByBot(recordData);
    if (isOurBooking) {
      logger.info('‚úÖ Booking created by our bot, skipping notification');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const clientPhone = recordData.client?.phone;
    if (!clientPhone) {
      logger.warn('‚ö†Ô∏è No client phone in record data');
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è WhatsApp
    const formattedPhone = this.formatPhoneForWhatsApp(clientPhone);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyInfo = await this.getCompanyInfo(companyId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = this.formatNewBookingMessage(recordData, companyInfo);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendWhatsAppNotification(formattedPhone, message, 'booking_created');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à—É –ë–î –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await this.saveBookingToCache(recordData, companyId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
   */
  async handleRecordUpdated(recordData, companyId) {
    logger.info('‚úèÔ∏è Handling record.updated event', {
      recordId: recordData.id,
      clientPhone: recordData.client?.phone
    });

    const clientPhone = recordData.client?.phone;
    if (!clientPhone) {
      logger.warn('‚ö†Ô∏è No client phone in record data');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const previousRecord = await this.getPreviousRecordData(recordData.id);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const changes = this.detectChanges(previousRecord, recordData);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à–µ, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ (YClients –æ—Ç–ø—Ä–∞–≤–∏–ª webhook)
    if (!previousRecord) {
      logger.info('üìù No previous record in cache, but sending update notification anyway');
    } else if (Object.keys(changes).length === 0) {
      logger.info('‚úÖ No significant changes detected');
      return;
    }

    const formattedPhone = this.formatPhoneForWhatsApp(clientPhone);
    const companyInfo = await this.getCompanyInfo(companyId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const message = this.formatUpdateMessage(recordData, changes, companyInfo);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendWhatsAppNotification(formattedPhone, message, 'booking_updated');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–µ—à–µ
    await this.updateBookingInCache(recordData, companyId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
   */
  async handleRecordDeleted(recordData, companyId) {
    logger.info('üóëÔ∏è Handling record.deleted event', {
      recordId: recordData.id,
      clientPhone: recordData.client?.phone
    });

    const clientPhone = recordData.client?.phone;
    if (!clientPhone) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –Ω–∞—à–µ–π –ë–î
      const cachedRecord = await this.getCachedRecord(recordData.id);
      if (!cachedRecord?.client_phone) {
        logger.warn('‚ö†Ô∏è Cannot find client phone for deleted record');
        return;
      }
      clientPhone = cachedRecord.client_phone;
    }

    const formattedPhone = this.formatPhoneForWhatsApp(clientPhone);
    const companyInfo = await this.getCompanyInfo(companyId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    const message = this.formatCancellationMessage(recordData, companyInfo);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendWhatsAppNotification(formattedPhone, message, 'booking_cancelled');

    // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –≤ –∫–µ—à–µ
    await this.markBookingAsCancelled(recordData.id);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
   */
  formatNewBookingMessage(record, companyInfo) {
    const date = new Date(record.datetime);
    const dateStr = date.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long' 
    });
    const timeStr = date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';
    const staffName = record.staff?.name || '–ú–∞—Å—Ç–µ—Ä';
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–∫–∏–¥–∫—É
    const totalCost = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;
    const totalFirstCost = record.services?.reduce((sum, s) => sum + (s.first_cost || s.cost || 0), 0) || 0;
    const totalDiscount = record.services?.reduce((sum, s) => sum + (s.discount || 0), 0) || 0;

    let message = `‚úÖ *–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!*\n\n`;
    message += `üìÖ ${dateStr} –≤ ${timeStr}\n`;
    message += `üíá ${services}\n`;
    message += `üë§ –ú–∞—Å—Ç–µ—Ä: ${staffName}\n`;
    
    if (totalCost > 0) {
      if (totalDiscount > 0) {
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${totalFirstCost} —Ä—É–±~ ${totalCost} —Ä—É–± (—Å–∫–∏–¥–∫–∞ ${totalDiscount}%)\n`;
      } else {
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost} —Ä—É–±\n`;
      }
    }
    
    if (companyInfo?.address) {
      message += `üìç ${companyInfo.address}\n`;
    }
    
    message += `\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–¥–µ—Å—å üëá`;
    
    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  formatUpdateMessage(record, changes, companyInfo) {
    const date = new Date(record.datetime);
    const dateStr = date.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long' 
    });
    const timeStr = date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    let message = `üìù *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (changes && changes.datetime) {
      const oldDate = new Date(changes.datetime.old);
      const oldDateStr = oldDate.toLocaleDateString('ru-RU', { 
        day: 'numeric', 
        month: 'long' 
      });
      const oldTimeStr = oldDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      message += `–ë—ã–ª–æ: ${oldDateStr} –≤ ${oldTimeStr}\n`;
      message += `–°—Ç–∞–ª–æ: ${dateStr} –≤ ${timeStr}\n\n`;
    } else {
      message += `üìÖ ${dateStr} –≤ ${timeStr}\n`;
    }

    if (changes && changes.services) {
      message += `üíá –£—Å–ª—É–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${record.services?.map(s => s.title).join(', ')}\n`;
    } else {
      message += `üíá ${record.services?.map(s => s.title).join(', ')}\n`;
    }

    if (changes && changes.staff) {
      message += `üë§ –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä: ${record.staff?.name}\n`;
    } else {
      message += `üë§ –ú–∞—Å—Ç–µ—Ä: ${record.staff?.name}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–∫–∏–¥–∫–µ
    const totalCost = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;
    const totalFirstCost = record.services?.reduce((sum, s) => sum + (s.first_cost || s.cost || 0), 0) || 0;
    const totalDiscount = record.services?.reduce((sum, s) => sum + (s.discount || 0), 0) || 0;

    if (totalCost > 0) {
      if (totalDiscount > 0) {
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${totalFirstCost} —Ä—É–±~ ${totalCost} —Ä—É–± (—Å–∫–∏–¥–∫–∞ ${totalDiscount}%)\n`;
      } else {
        message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost} —Ä—É–±\n`;
      }
    }

    if (companyInfo?.address) {
      message += `üìç ${companyInfo.address}\n`;
    }

    message += `\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ!`;
    
    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
   */
  formatCancellationMessage(record, companyInfo) {
    const date = new Date(record.datetime);
    const dateStr = date.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long' 
    });
    const timeStr = date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';

    let message = `‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n`;
    message += `–ë—ã–ª–∞ –Ω–∞: ${dateStr} –≤ ${timeStr}\n`;
    message += `–£—Å–ª—É–≥–∞: ${services}\n\n`;
    message += `–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!`;
    
    return message;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */

  async isBookingCreatedByBot(recordData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏
    if (recordData.comment && (
      recordData.comment.includes('AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') ||
      recordData.comment.includes('WhatsApp') ||
      recordData.comment.includes('AI Admin')
    )) {
      return true;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–æ—Ç–µ
    const clientPhone = this.formatPhoneForWhatsApp(recordData.client?.phone);
    if (clientPhone) {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
      
      const { data: recentMessages } = await supabase
        .from('messages')
        .select('created_at')
        .eq('phone', clientPhone)
        .eq('direction', 'incoming')
        .gte('created_at', fiveMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (recentMessages && recentMessages.length > 0) {
        logger.info('üì± Client was recently active in bot, skipping notification');
        return true;
      }
    }
    
    return false;
  }

  formatPhoneForWhatsApp(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    let cleaned = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8') && cleaned.length === 11) {
      cleaned = '7' + cleaned.slice(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º 7 –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    if (cleaned.length === 10) {
      cleaned = '7' + cleaned;
    }
    
    return cleaned;
  }

  async getCompanyInfo(companyId) {
    const { data } = await supabase
      .from('companies')
      .select('*')
      .eq('yclients_id', companyId)
      .single();
    
    return data;
  }

  async sendWhatsAppNotification(phone, message, notificationType) {
    try {
      logger.info('üì§ Sending WhatsApp notification', {
        phone,
        type: notificationType,
        messageLength: message.length
      });

      const result = await this.whatsappClient.sendMessage(phone, message);
      
      if (result.success) {
        logger.info('‚úÖ WhatsApp notification sent successfully');
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await supabase
          .from('booking_notifications')
          .insert({
            phone,
            notification_type: notificationType,
            message,
            sent_at: new Date().toISOString()
          });
      } else {
        logger.error('‚ùå Failed to send WhatsApp notification', result.error);
      }
      
      return result;
    } catch (error) {
      logger.error('‚ùå Error sending WhatsApp notification', error);
      throw error;
    }
  }

  async markEventProcessed(eventId) {
    await supabase
      .from('webhook_events')
      .update({ processed_at: new Date().toISOString() })
      .eq('event_id', eventId);
  }

  async saveBookingToCache(recordData, companyId) {
    try {
      const { error } = await supabase
        .from('appointments_cache')
        .insert({
          yclients_record_id: recordData.id,
          company_id: companyId,
          client_id: recordData.client?.id,
          service_id: recordData.services?.[0]?.id,
          staff_id: recordData.staff?.id,
          appointment_datetime: recordData.datetime,
          cost: recordData.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0,
          status: 'confirmed',
          raw_data: recordData,
          created_at: new Date().toISOString()
        });

      if (error) {
        logger.error('Failed to save booking to cache', error);
      }
    } catch (error) {
      logger.error('Error saving booking to cache', error);
    }
  }

  async updateBookingInCache(recordData, companyId) {
    try {
      const { error } = await supabase
        .from('appointments_cache')
        .update({
          service_id: recordData.services?.[0]?.id,
          staff_id: recordData.staff?.id,
          appointment_datetime: recordData.datetime,
          cost: recordData.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0,
          raw_data: recordData,
          updated_at: new Date().toISOString()
        })
        .eq('yclients_record_id', recordData.id);

      if (error) {
        logger.error('Failed to update booking in cache', error);
      }
    } catch (error) {
      logger.error('Error updating booking in cache', error);
    }
  }

  async markBookingAsCancelled(recordId) {
    try {
      const { error } = await supabase
        .from('appointments_cache')
        .update({
          is_cancelled: true,
          status: 'cancelled',
          cancellation_reason: 'Deleted in YClients',
          updated_at: new Date().toISOString()
        })
        .eq('yclients_record_id', recordId);

      if (error) {
        logger.error('Failed to mark booking as cancelled', error);
      }
    } catch (error) {
      logger.error('Error marking booking as cancelled', error);
    }
  }

  async getPreviousRecordData(recordId) {
    const { data } = await supabase
      .from('appointments_cache')
      .select('raw_data')
      .eq('yclients_record_id', recordId)
      .single();
    
    return data?.raw_data;
  }

  async getCachedRecord(recordId) {
    const { data } = await supabase
      .from('appointments_cache')
      .select('*')
      .eq('yclients_record_id', recordId)
      .single();
    
    return data;
  }

  detectChanges(oldRecord, newRecord) {
    const changes = {};
    
    if (!oldRecord) return changes;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if (oldRecord.datetime !== newRecord.datetime) {
      changes.datetime = {
        old: oldRecord.datetime,
        new: newRecord.datetime
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥
    const oldServices = JSON.stringify(oldRecord.services?.map(s => s.id).sort());
    const newServices = JSON.stringify(newRecord.services?.map(s => s.id).sort());
    if (oldServices !== newServices) {
      changes.services = {
        old: oldRecord.services,
        new: newRecord.services
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
    if (oldRecord.staff?.id !== newRecord.staff?.id) {
      changes.staff = {
        old: oldRecord.staff,
        new: newRecord.staff
      };
    }
    
    return changes;
  }
}

module.exports = YClientsWebhookProcessor;