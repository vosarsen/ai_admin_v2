// src/services/booking/index.js
const { SupabaseDataLayer } = require('../../integrations/yclients/data/supabase-data-layer');
const { YclientsClient } = require('../../integrations/yclients/client');
const config = require('../../config');
const logger = require('../../utils/logger');
const DataTransformers = require('../../utils/data-transformers');
const { format, addDays, subDays, parse, isAfter, isBefore } = require('date-fns');
const { utcToZonedTime, zonedTimeToUtc } = require('date-fns-tz');
const { RetryHandler } = require('../../utils/retry-handler');
const criticalErrorLogger = require('../../utils/critical-error-logger');
const bookingOwnership = require('./booking-ownership');
const slotValidator = require('./slot-validator');

class BookingService {
  constructor() {
    this.timezone = config.business.timezone;
    this.maxDaysAhead = config.business.maxBookingDaysAhead;
    this.minMinutesAhead = config.business.minBookingMinutesAhead;
    this.dataLayer = new SupabaseDataLayer();
    this.yclientsClient = null;
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.timePeriods = {
      morning: { start: 6, end: 12 },      // 6:00-12:00
      afternoon: { start: 12, end: 18 },    // 12:00-18:00
      evening: { start: 18, end: 23 }       // 18:00-23:00
    };
    
    // Retry handler –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.retryHandler = new RetryHandler({
      maxRetries: 3,
      initialDelay: 1000,
      maxDelay: 5000,
      retryableErrors: ['ECONNREFUSED', 'ETIMEDOUT', 'ENOTFOUND', 'ECONNRESET'],
      retryableStatusCodes: [408, 429, 500, 502, 503, 504]
    });
  }

  getYclientsClient() {
    if (!this.yclientsClient) {
      this.yclientsClient = new YclientsClient();
    }
    return this.yclientsClient;
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
   */
  filterSlotsByTimePreference(slots, timePreference) {
    if (!timePreference || !slots || slots.length === 0) {
      return slots;
    }
    
    logger.info(`‚è∞ Filtering ${slots.length} slots by time preference: ${timePreference}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
    const preference = timePreference.toLowerCase();
    let period = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    if (preference.includes('—É—Ç—Ä') || preference === 'morning') {
      period = this.timePeriods.morning;
    } else if (preference.includes('–¥–µ–Ω—å') || preference.includes('–æ–±–µ–¥') || preference === 'afternoon') {
      period = this.timePeriods.afternoon;
    } else if (preference.includes('–≤–µ—á–µ—Ä') || preference === 'evening') {
      period = this.timePeriods.evening;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Å–ª–µ 18:00")
    const afterMatch = preference.match(/–ø–æ—Å–ª–µ\s*(\d{1,2})/);
    if (afterMatch) {
      const hour = parseInt(afterMatch[1]);
      period = { start: hour, end: 23 };
    }
    
    const beforeMatch = preference.match(/–¥–æ\s*(\d{1,2})/);
    if (beforeMatch) {
      const hour = parseInt(beforeMatch[1]);
      period = { start: 6, end: hour };
    }
    
    if (!period) {
      logger.warn(`Could not parse time preference: ${timePreference}`);
      return slots;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã
    const filtered = slots.filter(slot => {
      const time = slot.time || slot.datetime;
      const hour = parseInt(time.split(':')[0]);
      return hour >= period.start && hour < period.end;
    });
    
    logger.info(`‚úÖ Filtered to ${filtered.length} slots (${period.start}:00-${period.end}:00)`);
    
    return filtered;
  }

  async getServices(filters = {}, companyId = config.yclients.companyId) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase
      const result = await this.dataLayer.getServices(filters, companyId);
      if (result.success && result.data && result.data.length > 0) {
        logger.info(`‚úÖ Services loaded from Supabase: ${result.data.length}`);
        return result;
      }
      
      // –ï—Å–ª–∏ –≤ Supabase –ø—É—Å—Ç–æ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ YClients
      logger.info('üì± Services not found in Supabase, fetching from YClients...');
      return await this.getYclientsClient().getServices(filters, companyId);
    } catch (error) {
      logger.error('Error getting services:', error);
      return { success: false, error: error.message };
    }
  }

  async getAvailableSlots(staffId, date, serviceId, companyId = config.yclients.companyId, validateSlots = false) {
    try {
      // –°–ª–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∏–∑ YClients (–æ–Ω–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ)
      const result = await this.getYclientsClient().getAvailableSlots(staffId, date, { service_id: serviceId }, companyId);
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
      if (validateSlots && result.success && result.data) {
        const slots = Array.isArray(result.data) ? result.data : 
                     (result.data.data ? result.data.data : []);
        
        if (slots.length > 0) {
          logger.info(`Validating ${slots.length} slots for staff ${staffId} on ${date}`);
          
          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
          const validSlots = await slotValidator.validateSlotsWithBookings(
            slots,
            this.getYclientsClient(),
            companyId,
            staffId,
            date
          );
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
          return {
            ...result,
            data: Array.isArray(result.data) ? validSlots : { ...result.data, data: validSlots },
            originalCount: slots.length,
            validatedCount: validSlots.length
          };
        }
      }
      
      return result;
    } catch (error) {
      logger.error('Error getting available slots:', error);
      return { success: false, error: error.message };
    }
  }

  async findSuitableSlot(options = {}) {
    const {
      serviceId,
      staffId,
      preferredDate,
      preferredTime,
      timePreference,
      companyId = config.yclients.companyId
    } = options;

    logger.info(`üîç findSuitableSlot called with:`, {
      serviceId,
      staffId,
      preferredDate,
      preferredTime,
      timePreference,
      companyId
    });

    try {
      // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω serviceId, –∏—Å–ø–æ–ª—å–∑—É–µ–º default –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏
      const actualServiceId = serviceId || 18356041; // –°–¢–†–ò–ñ–ö–ê –ú–ê–®–ò–ù–ö–û–ô
      
      const targetDate = preferredDate || format(new Date(), 'yyyy-MM-dd');
      
      logger.info(`üéØ Searching slots for service ${actualServiceId} on ${targetDate}`);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç staffId, –∏—â–µ–º —Å–ª–æ—Ç—ã —É –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
      if (!staffId) {
        logger.info(`üë• No specific staff requested, searching all available staff`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        const staffResult = await this.dataLayer.getStaff(companyId, false);
        
        if (!staffResult.success || !staffResult.data || staffResult.data.length === 0) {
          logger.warn(`‚ùå No staff available for company ${companyId}`);
          return { 
            success: false, 
            error: 'No staff available',
            reason: 'no_staff',
            data: []
          };
        }
        
        logger.info(`üîç Found ${staffResult.data.length} staff members, checking availability...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —É –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        const allSlots = [];
        const staffWithSlots = [];
        
        for (const staffMember of staffResult.data) {
          try {
            const staffSlots = await this.getAvailableSlots(
              staffMember.yclients_id,
              targetDate,
              actualServiceId,
              companyId,
              true // –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤
            );
            
            if (staffSlots.success && staffSlots.data) {
              const slotsData = staffSlots.data?.data || staffSlots.data;
              if (Array.isArray(slotsData) && slotsData.length > 0) {
                logger.info(`‚úÖ Staff ${staffMember.name} has ${slotsData.length} available slots`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É —Å–ª–æ—Ç—É
                const slotsWithStaff = slotsData.map(slot => ({
                  ...slot,
                  staff_id: staffMember.yclients_id,
                  staff_name: staffMember.name,
                  staff_rating: staffMember.rating
                }));
                
                allSlots.push(...slotsWithStaff);
                staffWithSlots.push(staffMember);
              } else {
                logger.debug(`Staff ${staffMember.name} has no available slots`);
              }
            }
          } catch (error) {
            logger.warn(`Failed to get slots for staff ${staffMember.name}:`, error.message);
          }
        }
        
        if (allSlots.length === 0) {
          logger.warn(`‚ùå No available slots found for any staff`);
          return {
            success: false,
            error: 'No available slots found',
            reason: 'fully_booked',
            data: [],
            checkedStaffCount: staffResult.data.length
          };
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        let filteredSlots = allSlots;
        if (timePreference) {
          filteredSlots = this.filterSlotsByTimePreference(allSlots, timePreference);
          
          if (filteredSlots.length === 0) {
            logger.warn(`‚ùå No slots found matching time preference: ${timePreference}`);
            return {
              success: false,
              error: `No available slots found ${timePreference}`,
              reason: 'no_matching_time',
              data: [],
              allSlotsCount: allSlots.length,
              timePreference
            };
          }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        filteredSlots.sort((a, b) => new Date(a.datetime) - new Date(b.datetime));
        
        logger.info(`‚úÖ Found ${filteredSlots.length} slots${timePreference ? ` for ${timePreference}` : ''} from ${staffWithSlots.length} staff members`);
        
        return { 
          success: true, 
          data: filteredSlots,
          reason: null,
          staffWithSlots: staffWithSlots.length,
          totalStaffChecked: staffResult.data.length,
          totalSlotsBeforeFilter: allSlots.length
        };
      }
      
      const slotsResult = await this.retryHandler.execute(
        async () => {
          const result = await this.getAvailableSlots(
            staffId,
            targetDate,
            actualServiceId,
            companyId,
            true // –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤
          );
          
          if (!result.success) {
            throw new Error(result.error || 'Failed to get available slots');
          }
          
          return result;
        },
        'getAvailableSlots',
        { companyId, date: targetDate, staffId, serviceId: actualServiceId }
      );

      if (!slotsResult.success || !slotsResult.data) {
        logger.warn(`‚ùå No slots found for staff ${staffId}`);
        return { 
          success: false, 
          error: 'No available slots found',
          reason: 'no_slots',
          data: []
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
      // Yclients API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ { data: { data: [...], meta: [] } }
      const slotsData = slotsResult.data?.data || slotsResult.data;
      const availableSlots = Array.isArray(slotsData) ? slotsData : [];
      
      if (availableSlots.length === 0) {
        logger.warn(`‚ùå All slots are booked for staff ${staffId}`);
        return {
          success: false,
          error: 'All slots are booked',
          reason: 'fully_booked',
          data: [],
          alternativeSlots: slotsData // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        };
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
      let finalSlots = availableSlots;
      if (timePreference) {
        finalSlots = this.filterSlotsByTimePreference(availableSlots, timePreference);
        
        if (finalSlots.length === 0) {
          logger.warn(`‚ùå No slots found matching time preference: ${timePreference}`);
          return {
            success: false,
            error: `No available slots found ${timePreference}`,
            reason: 'no_matching_time',
            data: [],
            allSlotsCount: availableSlots.length,
            timePreference
          };
        }
      }
      
      logger.info(`‚úÖ Found ${finalSlots.length} available slots${timePreference ? ` for ${timePreference}` : ''}`);
      return { 
        success: true, 
        data: finalSlots,
        reason: null,
        totalSlotsBeforeFilter: availableSlots.length
      };
    } catch (error) {
      logger.error('Error finding suitable slot:', error);
      return { success: false, error: error.message };
    }
  }

  async createBooking(bookingData, companyId = config.yclients.companyId) {
    try {
      logger.info('üîÑ Creating booking with retry mechanism', {
        companyId,
        hasServices: !!bookingData.appointments,
        servicesCount: bookingData.appointments?.length
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
      const result = await this.retryHandler.execute(
        async () => {
          const response = await this.getYclientsClient().createBooking(bookingData, companyId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
          if (!response.success) {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.error('‚ùå Booking creation failed:', {
              response: response,
              errorType: typeof response.error,
              bookingData: bookingData
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º)
            const errorMessage = typeof response.error === 'string' 
              ? response.error 
              : (response.error?.message || JSON.stringify(response.error) || 'Booking creation failed');
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ—Ç –∑–∞–Ω—è—Ç), –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            if (errorMessage && (
              errorMessage.includes('–∑–∞–Ω—è—Ç') ||
              errorMessage.includes('–Ω–µ–¥–æ—Å—Ç—É–ø') ||
              errorMessage.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            )) {
              throw Object.assign(new Error(errorMessage), { retryable: false });
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ–º retry
            throw new Error(errorMessage);
          }
          
          return response;
        },
        'createBooking',
        { companyId, clientPhone: bookingData.phone }
      );
      
      logger.info('‚úÖ Booking created successfully', {
        recordId: result.data?.record_id,
        companyId
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é
      if (result.data?.record_id && bookingData.phone) {
        try {
          await bookingOwnership.saveBookingOwnership(
            result.data.record_id,
            bookingData.phone,
            {
              client_id: bookingData.client_id,
              client_name: bookingData.full_name,
              datetime: bookingData.datetime,
              service: bookingData.appointments?.[0]?.services?.[0]?.title,
              staff: bookingData.appointments?.[0]?.staff?.name,
              company_id: companyId
            }
          );
        } catch (error) {
          logger.warn('Failed to save booking ownership:', error.message);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        }
      }
      
      return result;
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –Ω–µ-–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞
      if (error.retryable === false) {
        logger.warn('Non-retryable booking error:', error.message);
        return { success: false, error: error.message };
      }
      
      logger.error('Error creating booking after retries:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
      await criticalErrorLogger.logCriticalError(error, {
        operation: 'createBooking',
        service: 'booking',
        companyId,
        clientPhone: bookingData.phone,
        clientName: bookingData.fullname,
        bookingData: {
          hasAppointments: !!bookingData.appointments,
          appointmentsCount: bookingData.appointments?.length,
          services: bookingData.appointments?.map(a => a.services),
          datetime: bookingData.appointments?.[0]?.datetime
        },
        retryAttempts: this.retryHandler.maxRetries,
        errorAfterRetries: true
      });
      
      return { 
        success: false, 
        error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      };
    }
  }

  /**
   * Search available slots based on criteria
   */
  async searchSlots({ companyId, service, staff, date, time }) {
    try {
      const result = await this.findSuitableSlot({
        serviceId: service?.id,
        staffId: staff?.id,
        preferredDate: date,
        preferredTime: time,
        companyId
      });

      return result;
    } catch (error) {
      logger.error('Error searching slots:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Get client bookings
   */
  async getClientBookings(phone, companyId = config.yclients.companyId) {
    try {
      logger.info(`üìã Getting bookings for client ${phone} at company ${companyId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–∞—à–µ–º –∫—ç—à–µ –≤–ª–∞–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
      const cachedBookings = await bookingOwnership.getClientBookings(phone);
      if (cachedBookings && cachedBookings.length > 0) {
        logger.info(`‚úÖ Found ${cachedBookings.length} bookings in ownership cache`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ YClients –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const detailedBookings = [];
        for (const cached of cachedBookings) {
          try {
            const details = await this.getYclientsClient().getRecord(companyId, cached.id);
            if (details.success && details.data) {
              detailedBookings.push(details.data);
            }
          } catch (error) {
            logger.warn(`Failed to get details for booking ${cached.id}:`, error.message);
          }
        }
        
        if (detailedBookings.length > 0) {
          return { 
            success: true, 
            bookings: detailedBookings,
            source: 'ownership_cache'
          };
        }
      }
      
      // Fallback: –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ YClients API
      logger.info('Falling back to YClients API search');
      const bookings = await this.getYclientsClient().getRecords(companyId, {
        client_phone: phone,
        start_date: format(new Date(), 'yyyy-MM-dd'), // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è
        end_date: format(addDays(new Date(), 60), 'yyyy-MM-dd') // –ò—â–µ–º –Ω–∞ 60 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
      });

      if (!bookings.success || !bookings.data) {
        return { success: false, error: 'Failed to fetch bookings' };
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.debug('Bookings response structure:', { 
        type: typeof bookings.data,
        isArray: Array.isArray(bookings.data),
        keys: Object.keys(bookings.data || {}),
        sample: JSON.stringify(bookings.data).substring(0, 200)
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö - YClients –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º data
      const bookingsList = Array.isArray(bookings.data) ? bookings.data : 
                          (bookings.data.data ? bookings.data.data : []);
      
      // –í–ê–ñ–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      // YClients API –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      const InternationalPhone = require('../../utils/international-phone');
      const normalizedPhone = InternationalPhone.normalize(phone);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ)
      const activeBookings = bookingsList.filter(booking => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–ø–∏—Å–∏
        if (booking.client && booking.client.phone) {
          const bookingPhone = InternationalPhone.normalize(booking.client.phone);
          if (!InternationalPhone.equals(bookingPhone, normalizedPhone)) {
            logger.warn(`‚ö†Ô∏è Skipping booking ${booking.id} - belongs to different client`, {
              requestedPhone: phone,
              bookingPhone: booking.client.phone,
              clientName: booking.client.name
            });
            return false;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å attendance (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ –ø—Ä–∏—à–µ–ª" = -1)
        if (booking.attendance === -1 || booking.visit_attendance === -1) {
          logger.info(`‚ö†Ô∏è Skipping booking ${booking.id} - already cancelled (no-show status)`, {
            attendance: booking.attendance,
            visit_attendance: booking.visit_attendance
          });
          return false;
        }
        
        const bookingDate = new Date(booking.datetime);
        const now = new Date();
        return bookingDate > now && booking.deleted === false;
      });

      logger.info(`‚úÖ Found ${activeBookings.length} active bookings for ${phone} (filtered ${bookingsList.length - activeBookings.length} invalid/past bookings)`);
      
      return { 
        success: true, 
        bookings: activeBookings 
      };
    } catch (error) {
      logger.error('Error getting client bookings:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Cancel booking
   */
  async cancelBooking(recordId, companyId = config.yclients.companyId) {
    try {
      logger.info(`üö´ Canceling booking ${recordId} at company ${companyId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫—É—é –æ—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      const softCancelResult = await this.getYclientsClient().cancelRecordSoft(companyId, recordId);
      
      if (softCancelResult.success) {
        logger.info(`‚úÖ Successfully soft-canceled booking ${recordId} (status: –Ω–µ –ø—Ä–∏—à–µ–ª)`);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –≤–ª–∞–¥–µ–Ω–∏—è
        try {
          await bookingOwnership.removeBooking(recordId);
        } catch (error) {
          logger.warn('Failed to remove booking ownership:', error.message);
        }
        
        return softCancelResult;
      }
      
      // –ï—Å–ª–∏ –º—è–≥–∫–∞—è –æ—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
      logger.warn(`‚ö†Ô∏è Soft cancel failed, trying to delete record ${recordId}`);
      const deleteResult = await this.getYclientsClient().deleteRecord(companyId, recordId);

      if (deleteResult.success) {
        logger.info(`‚úÖ Successfully deleted booking ${recordId}`);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –≤–ª–∞–¥–µ–Ω–∏—è
        try {
          await bookingOwnership.removeBooking(recordId);
        } catch (error) {
          logger.warn('Failed to remove booking ownership:', error.message);
        }
      } else {
        logger.error(`‚ùå Failed to cancel booking ${recordId}: ${deleteResult.error}`);
      }

      return deleteResult;
    } catch (error) {
      logger.error('Error canceling booking:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Cancel user booking with record hash
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç user endpoint –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async cancelUserBooking(recordId, recordHash) {
    try {
      logger.info(`üö´ Canceling user booking ${recordId} with hash`);
      
      // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ user endpoint
      const result = await this.getYclientsClient().deleteUserRecord(recordId, recordHash);

      if (result.success) {
        logger.info(`‚úÖ Successfully canceled user booking ${recordId}`);
      } else {
        logger.error(`‚ùå Failed to cancel user booking ${recordId}: ${result.error}`);
      }

      return result;
    } catch (error) {
      logger.error('Error canceling user booking:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞
   * @param {number} visitId - ID –≤–∏–∑–∏—Ç–∞
   * @param {number} recordId - ID –∑–∞–ø–∏—Å–∏
   */
  async confirmBooking(visitId, recordId) {
    try {
      logger.info(`‚úÖ Confirming booking ${recordId}`);
      
      const result = await this.getYclientsClient().updateVisitStatus(
        visitId,
        recordId,
        2, // –°—Ç–∞—Ç—É—Å "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª"
        { comment: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ WhatsApp –±–æ—Ç–∞' }
      );

      if (result.success) {
        logger.info(`‚úÖ Successfully confirmed booking ${recordId}`);
      } else {
        logger.error(`‚ùå Failed to confirm booking ${recordId}: ${result.error}`);
      }

      return result;
    } catch (error) {
      logger.error('Error confirming booking:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞
   * @param {number} visitId - ID –≤–∏–∑–∏—Ç–∞
   * @param {number} recordId - ID –∑–∞–ø–∏—Å–∏
   */
  async markNoShow(visitId, recordId, reason = '') {
    try {
      logger.info(`‚ùå Marking no-show for booking ${recordId}`);
      
      const result = await this.getYclientsClient().updateVisitStatus(
        visitId,
        recordId,
        -1, // –°—Ç–∞—Ç—É—Å "–ù–µ –ø—Ä–∏—à–µ–ª"
        { comment: reason || '–ö–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–∏–ª—Å—è' }
      );

      if (result.success) {
        logger.info(`‚úÖ Successfully marked no-show for booking ${recordId}`);
      } else {
        logger.error(`‚ùå Failed to mark no-show for booking ${recordId}: ${result.error}`);
      }

      return result;
    } catch (error) {
      logger.error('Error marking no-show:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª
   * @param {number} visitId - ID –≤–∏–∑–∏—Ç–∞
   * @param {number} recordId - ID –∑–∞–ø–∏—Å–∏
   */
  async markArrived(visitId, recordId) {
    try {
      logger.info(`‚úÖ Marking arrived for booking ${recordId}`);
      
      const result = await this.getYclientsClient().updateVisitStatus(
        visitId,
        recordId,
        1, // –°—Ç–∞—Ç—É—Å "–ü—Ä–∏—à–µ–ª"
        { comment: '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª' }
      );

      if (result.success) {
        logger.info(`‚úÖ Successfully marked arrived for booking ${recordId}`);
      } else {
        logger.error(`‚ùå Failed to mark arrived for booking ${recordId}: ${result.error}`);
      }

      return result;
    } catch (error) {
      logger.error('Error marking arrived:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = new BookingService();
