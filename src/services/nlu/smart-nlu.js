// src/services/nlu/smart-nlu.js
const logger = require('../../utils/logger');
const EntityExtractor = require('./entity-extractor');

class SmartNLU {
  constructor(aiService) {
    this.aiService = aiService;
    this.fallbackExtractor = new EntityExtractor();
  }

  /**
   * Process message with AI-powered NLU + fallback extraction
   */
  async processMessage(message, context) {
    logger.info(`üß† SmartNLU processing: "${message}"`);

    try {
      // Try AI-powered extraction first
      const aiResult = await this.extractWithAI(message, context);
      
      if (aiResult.success && aiResult.confidence > 0.7) {
        logger.info('‚úÖ AI extraction successful', { confidence: aiResult.confidence });
        return aiResult;
      }

      logger.warn('üîÑ AI extraction low confidence, using hybrid approach');
      
      // Combine AI results with pattern-based extraction
      const fallbackResult = this.fallbackExtractor.extract(message);
      const hybridResult = this.combineResults(aiResult, fallbackResult, context);
      
      return hybridResult;

    } catch (error) {
      logger.error('‚ùå AI extraction failed, falling back to patterns:', error.message);
      
      // Pure fallback extraction
      const fallbackResult = this.fallbackExtractor.extract(message);
      return this.formatResult(fallbackResult, 'pattern', context);
    }
  }

  /**
   * Extract entities using AI with structured prompt
   */
  async extractWithAI(message, context) {
    const prompt = this.buildExtractionPrompt(message, context);
    
    try {
      const response = await this.aiService._callAI(prompt, 'primary');
      logger.info('ü§ñ Raw AI response for NLU:', {
        response: response.substring(0, 500) + '...',
        fullLength: response.length
      });
      
      const parsed = this.parseAIResponse(response);
      const action = this.determineAction(parsed);
      // –î–æ–±–∞–≤–ª—è–µ–º action –≤ parsed –æ–±—ä–µ–∫—Ç
      parsed.action = action;
      const generatedResponse = this.generateResponse(parsed, context);
      
      logger.info('üéØ NLU extraction complete:', {
        intent: parsed.intent,
        action: action,
        generatedResponse: generatedResponse,
        entities: parsed.entities
      });
      
      // CRITICAL: Ensure search_slots never has a response
      const finalResponse = action === 'search_slots' ? null : generatedResponse;
      
      return {
        success: true,
        intent: parsed.intent,
        entities: parsed.entities,
        action: action,
        response: finalResponse,
        confidence: parsed.confidence || 0.8,
        provider: 'ai-nlu'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        confidence: 0
      };
    }
  }

  /**
   * Build specialized prompt for entity extraction
   */
  buildExtractionPrompt(message, context) {
    const currentDate = new Date().toISOString().split('T')[0];
    const currentTime = new Date().toTimeString().split(' ')[0].substring(0, 5);

    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–π —Å—É—â–Ω–æ—Å—Ç–∏.

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–ö–û–ù–¢–ï–ö–°–¢:
- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate}
- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: –ë–∞—Ä–∏, –°–µ—Ä–≥–µ–π, –†–∞–º–∑–∞–Ω
- –£—Å–ª—É–≥–∏: —Å—Ç—Ä–∏–∂–∫–∞, —Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã, –±—Ä–∏—Ç—å–µ, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã

–ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –î–û–ë–ê–í–õ–Ø–ô –ø–æ–ª–µ "response" –≤ –æ—Ç–≤–µ—Ç! –û–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ (–ë–ï–ó –ø–æ–ª—è response):
{
  "intent": "booking|reschedule|cancel|info|other",
  "entities": {
    "service": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ null",
    "staff": "–∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ null", 
    "date": "YYYY-MM-DD –∏–ª–∏ null",
    "time": "HH:MM –∏–ª–∏ null",
    "info_type": "staff_today|prices|services|schedule –∏–ª–∏ null",
    "time_preference": "morning|afternoon|evening –∏–ª–∏ null",
    "original_text": {
      "service": "–∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª —É—Å–ª—É–≥—É",
      "staff": "–∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –º–∞—Å—Ç–µ—Ä–∞",
      "date": "–∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –¥–∞—Ç—É", 
      "time": "–∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –≤—Ä–µ–º—è"
    }
  },
  "confidence": "—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1",
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"
}

–ü–†–ê–í–ò–õ–ê:
1. intent = "booking" –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, "info" –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. date = "—Å–µ–≥–æ–¥–Ω—è" ‚Üí "${currentDate}", "–∑–∞–≤—Ç—Ä–∞" ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
3. –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ - staff = null
4. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ - time = null
5. info_type = "staff_today" –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
6. confidence = 0.9 –µ—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, 0.5-0.7 –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏

–ê–ù–ê–õ–ò–ó–ò–†–£–ô:`;
  }

  /**
   * Parse AI response for entity extraction
   */
  parseAIResponse(response) {
    logger.info('üîç Parsing Smart NLU AI response:', {
      response: response.substring(0, 200) + '...',
      fullLength: response.length
    });
    
    try {
      // Extract JSON from response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      // CRITICAL: Log if AI returns unexpected 'response' field
      if (parsed.response !== undefined) {
        logger.warn('‚ö†Ô∏è AI returned unexpected "response" field in NLU extraction:', {
          response: parsed.response,
          intent: parsed.intent
        });
      }
      
      logger.info('‚úÖ Parsed Smart NLU response:', {
        intent: parsed.intent,
        hasEntities: !!parsed.entities,
        confidence: parsed.confidence,
        reasoning: parsed.reasoning,
        hasResponseField: parsed.response !== undefined
      });
      
      // Validate structure
      if (!parsed.intent || !parsed.entities) {
        throw new Error('Invalid response structure');
      }

      // Normalize entities
      const entities = {
        service: this.normalizeService(parsed.entities.service),
        staff: this.normalizeStaff(parsed.entities.staff),
        date: this.normalizeDate(parsed.entities.date),
        time: this.normalizeTime(parsed.entities.time),
        info_type: parsed.entities.info_type || null,
        time_preference: parsed.entities.time_preference || null
      };

      return {
        intent: parsed.intent,
        entities: entities,
        confidence: parsed.confidence || 0.7,
        reasoning: parsed.reasoning || 'AI processing'
      };

    } catch (error) {
      logger.error('Failed to parse AI extraction response:', error.message);
      logger.error('Raw response was:', response);
      throw error;
    }
  }

  /**
   * Combine AI and pattern-based results
   */
  combineResults(aiResult, patternResult, context) {
    const combined = {
      intent: aiResult.entities?.intent?.name || patternResult.intent.name,
      entities: {},
      confidence: Math.max(aiResult.confidence || 0, patternResult.confidence || 0),
      provider: 'hybrid'
    };

    // Use best confidence for each entity
    combined.entities.service = this.selectBestEntity(
      aiResult.entities?.service, 
      patternResult.service
    );
    
    combined.entities.staff = this.selectBestEntity(
      aiResult.entities?.staff,
      patternResult.staff
    );
    
    combined.entities.date = this.selectBestEntity(
      aiResult.entities?.date,
      patternResult.date?.date
    );
    
    combined.entities.time = this.selectBestEntity(
      aiResult.entities?.time,
      patternResult.time?.time  
    );

    combined.action = this.determineAction(combined);
    combined.response = this.generateResponse(combined, context);
    
    // CRITICAL: Ensure search_slots never has a response
    if (combined.action === 'search_slots') {
      combined.response = null;
    }

    return {
      success: true,
      ...combined
    };
  }

  /**
   * Select entity with highest confidence
   */
  selectBestEntity(aiEntity, patternEntity) {
    if (!aiEntity && !patternEntity) return null;
    if (!aiEntity) return patternEntity;
    if (!patternEntity) return aiEntity;
    
    const aiConf = typeof aiEntity === 'object' ? aiEntity.confidence : 0.8;
    const patternConf = typeof patternEntity === 'object' ? patternEntity.confidence : 0.6;
    
    return aiConf >= patternConf ? aiEntity : patternEntity;
  }

  /**
   * Determine action based on intent and entities
   */
  determineAction(parsed) {
    const { intent, entities } = parsed;
    
    if (intent === 'booking') {
      // If we have specific date, time and staff - create booking
      if (entities.date && entities.time && entities.staff) {
        return 'create_booking';
      }
      // Otherwise search for available slots
      return 'search_slots';
    }
    
    if (intent === 'reschedule') return 'reschedule_booking';
    if (intent === 'cancel') return 'cancel_booking';  
    if (intent === 'info') return 'get_info';
    
    return 'none';
  }

  /**
   * Generate appropriate response - –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  generateResponse(parsed, context) {
    const { intent, entities } = parsed;
    
    // CRITICAL: Ensure action is always defined
    let action = parsed.action;
    if (!action) {
      logger.warn('‚ö†Ô∏è Action not provided to generateResponse, determining it now');
      action = this.determineAction(parsed);
    }
    
    logger.info('üéØ Generating response for:', {
      intent,
      action,
      hasEntities: !!entities
    });
    
    // CRITICAL: For search_slots ALWAYS return null
    if (action === 'search_slots') {
      logger.info('üîç Returning null for search_slots - response will be generated later');
      return null;
    }
    
    if (action === 'create_booking') {
      const response = `–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—Å –∫ ${entities.staff} –Ω–∞ ${entities.date} –≤ ${entities.time}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å.`;
      logger.info('üìù Generated create_booking response:', response);
      return response;
    }
    
    if (intent === 'info') {
      const response = '–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –†–∞—Å—Ü–µ–Ω–∫–∏, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É—Å–ª—É–≥–∏?';
      logger.info('‚ÑπÔ∏è Generated info response:', response);
      return response;
    }
    
    const defaultResponse = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?';
    logger.info('üí¨ Generated default response:', defaultResponse);
    return defaultResponse;
  }

  /**
   * Normalization methods
   */
  normalizeService(service) {
    if (!service) return null;
    
    const serviceMap = {
      '—Å—Ç—Ä–∏–∂–∫–∞': '—Å—Ç—Ä–∏–∂–∫–∞',
      '–ø–æ—Å—Ç—Ä–∏—á—å—Å—è': '—Å—Ç—Ä–∏–∂–∫–∞',
      '–ø–æ–¥—Å—Ç—Ä–∏—á—å—Å—è': '—Å—Ç—Ä–∏–∂–∫–∞',
      '–±–æ—Ä–æ–¥–∞': '—Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã',
      '—Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã': '—Å—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã',
      '–±—Ä–∏—Ç—å–µ': '–±—Ä–∏—Ç—å–µ',
      '–ø–æ–±—Ä–∏—Ç—å—Å—è': '–±—Ä–∏—Ç—å–µ'
    };
    
    const normalized = serviceMap[service.toLowerCase()];
    return normalized || service;
  }

  normalizeStaff(staff) {
    if (!staff) return null;
    
    const staffMap = {
      '–±–∞—Ä–∏': '–ë–∞—Ä–∏',
      '—Å–µ—Ä–≥–µ–π': '–°–µ—Ä–≥–µ–π', 
      '—Å–µ—Ä–≥–µ—é': '–°–µ—Ä–≥–µ–π',
      '—Ä–∞–º–∑–∞–Ω': '–†–∞–º–∑–∞–Ω'
    };
    
    const normalized = staffMap[staff.toLowerCase()];
    return normalized || staff;
  }

  normalizeDate(date) {
    if (!date) return null;
    
    // If already in YYYY-MM-DD format
    if (/^\d{4}-\d{2}-\d{2}$/.test(date)) {
      return date;
    }
    
    const today = new Date();
    
    if (date === '—Å–µ–≥–æ–¥–Ω—è') {
      return today.toISOString().split('T')[0];
    }
    
    if (date === '–∑–∞–≤—Ç—Ä–∞') {
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      return tomorrow.toISOString().split('T')[0];
    }
    
    return date;
  }

  normalizeTime(time) {
    if (!time) return null;
    
    // If already in HH:MM format
    if (/^\d{1,2}:\d{2}$/.test(time)) {
      const [hours, minutes] = time.split(':');
      return `${hours.padStart(2, '0')}:${minutes}`;
    }
    
    return time;
  }

  formatDateForUser(date) {
    if (!date) return '';
    
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    if (date === today) return '—Å–µ–≥–æ–¥–Ω—è';
    if (date === tomorrowStr) return '–∑–∞–≤—Ç—Ä–∞';
    
    return date;
  }

  formatResult(extractionResult, provider, context) {
    const action = this.determineAction({
      intent: extractionResult.intent?.name || 'other',
      entities: {
        service: extractionResult.service?.name,
        staff: extractionResult.staff?.name,
        date: extractionResult.date?.date, 
        time: extractionResult.time?.time
      }
    });
    
    const response = this.generateResponse({
      intent: extractionResult.intent?.name || 'other',
      entities: {
        service: extractionResult.service?.name,
        staff: extractionResult.staff?.name,
        date: extractionResult.date?.date,
        time: extractionResult.time?.time
      },
      action: action  // –î–æ–±–∞–≤–ª—è–µ–º action –≤ –æ–±—ä–µ–∫—Ç
    }, context);
    
    // CRITICAL: Ensure search_slots never has a response
    const finalResponse = action === 'search_slots' ? null : response;
    
    return {
      success: true,
      intent: extractionResult.intent?.name || 'other',
      entities: {
        service: extractionResult.service?.name || null,
        staff: extractionResult.staff?.name || null, 
        date: extractionResult.date?.date || null,
        time: extractionResult.time?.time || null
      },
      action: action,
      response: finalResponse,
      confidence: extractionResult.confidence || 0.5,
      provider: provider
    };
  }
}

module.exports = SmartNLU;