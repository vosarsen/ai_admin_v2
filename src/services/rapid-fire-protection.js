// src/services/rapid-fire-protection.js
const smartCache = require('./cache/smart-cache');
const logger = require('../utils/logger');

/**
 * üî• RAPID-FIRE PROTECTION
 * –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
 * 
 * –ü–æ –¢–ó:
 * - –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 * - –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥—è—Ç –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∂–¥–µ–º –µ—â–µ 5 —Å–µ–∫—É–Ω–¥
 * - –ú–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è: 15 —Å–µ–∫—É–Ω–¥
 * - –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ
 */
class RapidFireProtection {
  constructor() {
    this.pendingMessages = new Map(); // phone -> { messages, timer, startTime }
    this.config = {
      waitTime: 5000,      // 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
      maxWaitTime: 15000,  // 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
      maxMessages: 10      // –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å rapid-fire –∑–∞—â–∏—Ç–æ–π
   */
  async processMessage(phone, message, callback) {
    const normalizedPhone = phone.replace('@c.us', '');
    
    logger.debug(`üî• Rapid-fire check for ${normalizedPhone}: "${message}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ pending —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if (this.pendingMessages.has(normalizedPhone)) {
      return this._addToPendingBatch(normalizedPhone, message, callback);
    } else {
      return this._startNewBatch(normalizedPhone, message, callback);
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  _startNewBatch(phone, message, callback) {
    logger.info(`üÜï Starting new message batch for ${phone}`);
    
    const batchData = {
      messages: [message],
      callback,
      startTime: Date.now(),
      timer: null
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–µ—Ä–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    batchData.timer = setTimeout(() => {
      this._processBatch(phone);
    }, this.config.waitTime);

    this.pendingMessages.set(phone, batchData);
    
    logger.debug(`‚è±Ô∏è Timer set for ${this.config.waitTime}ms for ${phone}`);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏
   */
  _addToPendingBatch(phone, message, callback) {
    const batchData = this.pendingMessages.get(phone);
    
    if (!batchData) {
      return this._startNewBatch(phone, message, callback);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–∞—Ä—Ç–∏–∏
    batchData.messages.push(message);
    
    const timeElapsed = Date.now() - batchData.startTime;
    const remainingTime = this.config.maxWaitTime - timeElapsed;
    
    logger.info(`üî• Added message to existing batch for ${phone}. Messages: ${batchData.messages.length}, Time elapsed: ${timeElapsed}ms`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (batchData.messages.length >= this.config.maxMessages) {
      logger.warn(`üì® Max messages limit reached for ${phone}, processing immediately`);
      clearTimeout(batchData.timer);
      return this._processBatch(phone);
    }

    if (remainingTime <= 0) {
      logger.warn(`‚è∞ Max wait time reached for ${phone}, processing immediately`);
      clearTimeout(batchData.timer);
      return this._processBatch(phone);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    clearTimeout(batchData.timer);
    batchData.timer = setTimeout(() => {
      this._processBatch(phone);
    }, Math.min(this.config.waitTime, remainingTime));
    
    logger.debug(`‚è±Ô∏è Timer reset for ${Math.min(this.config.waitTime, remainingTime)}ms for ${phone}`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à—É—é—Å—è –ø–∞—Ä—Ç–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async _processBatch(phone) {
    const batchData = this.pendingMessages.get(phone);
    
    if (!batchData) {
      logger.warn(`No batch data found for ${phone}`);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ pending
    this.pendingMessages.delete(phone);
    clearTimeout(batchData.timer);

    const { messages, callback, startTime } = batchData;
    const totalWaitTime = Date.now() - startTime;
    
    logger.info(`üì¶ Processing message batch for ${phone}:`, {
      messageCount: messages.length,
      totalWaitTime: `${totalWaitTime}ms`,
      messages: messages.map(m => m.substring(0, 50) + (m.length > 50 ? '...' : ''))
    });

    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ
      const combinedMessage = this._combineMessages(messages);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      await callback(combinedMessage, {
        isRapidFireBatch: true,
        originalMessagesCount: messages.length,
        totalWaitTime,
        originalMessages: messages
      });
      
      logger.info(`‚úÖ Rapid-fire batch processed successfully for ${phone}`);
      
    } catch (error) {
      logger.error(`‚ùå Error processing rapid-fire batch for ${phone}:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
      try {
        const lastMessage = messages[messages.length - 1];
        await callback(lastMessage, {
          isRapidFireFallback: true,
          error: error.message
        });
      } catch (fallbackError) {
        logger.error(`‚ùå Fallback also failed for ${phone}:`, fallbackError);
      }
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ –ª–æ–≥–∏—á–Ω–æ–µ
   */
  _combineMessages(messages) {
    if (messages.length === 1) {
      return messages[0];
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMessages = [...new Set(messages)];
    
    if (uniqueMessages.length === 1) {
      return uniqueMessages[0];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –º—ã—Å–ª–∏
    const combined = uniqueMessages.join(' ');
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
    if (combined.length < 200) {
      return uniqueMessages.join('. ');
    }

    // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    return `–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${uniqueMessages.join('. ')}`;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö pending —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async flushAll() {
    logger.info(`üöø Flushing all pending messages (${this.pendingMessages.size} batches)`);
    
    const phones = Array.from(this.pendingMessages.keys());
    
    for (const phone of phones) {
      await this._processBatch(phone);
    }
    
    logger.info(`‚úÖ All pending messages flushed`);
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
   */
  async flushPhone(phone) {
    const normalizedPhone = phone.replace('@c.us', '');
    
    if (this.pendingMessages.has(normalizedPhone)) {
      logger.info(`üöø Flushing pending messages for ${normalizedPhone}`);
      await this._processBatch(normalizedPhone);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rapid-fire –∑–∞—â–∏—Ç—ã
   */
  getStats() {
    const pending = Array.from(this.pendingMessages.entries()).map(([phone, data]) => ({
      phone,
      messageCount: data.messages.length,
      waitingTime: Date.now() - data.startTime,
      maxWaitTime: this.config.maxWaitTime
    }));

    return {
      config: this.config,
      pendingBatches: this.pendingMessages.size,
      pending,
      totalPendingMessages: pending.reduce((sum, batch) => sum + batch.messageCount, 0)
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    logger.info('üîß Rapid-fire protection config updated:', this.config);
  }

  /**
   * Graceful shutdown
   */
  async destroy() {
    logger.info('üõë Shutting down rapid-fire protection...');
    await this.flushAll();
    logger.info('‚úÖ Rapid-fire protection shutdown complete');
  }
}

// Singleton instance
module.exports = new RapidFireProtection();