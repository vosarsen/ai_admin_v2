// src/services/reminder/templates.js

/**
 * –®–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å –∏–º–µ–Ω–µ–º)
 * {service} - –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—á—Ç–æ?)
 * –Ω–∞ {service} - –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ —Å –ù–ê
 */
const dayBeforeTemplates = [
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} ‚ú®",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –ó–∞–≤—Ç—Ä–∞ –≤ {time} –∂–¥—ë–º –≤–∞—Å –Ω–∞ {service} üåü",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} ‚ò∫Ô∏è",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ó–∞–≤—Ç—Ä–∞ –≤ {time} {staff} –∂–¥—ë—Ç –≤–∞—Å –Ω–∞ {service} ‚ú®",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ –≤ {time} —É –≤–∞—Å {service} üìù",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! –í—Å—ë –≤ —Å–∏–ª–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞? {service} –≤ {time} ü§ù",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º {service} –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ {time} ‚úÖ",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! {staff} –∂–¥—ë—Ç –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –≤ {time} –Ω–∞ {service} üí´",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} üìÖ",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ –≤ {time} –Ω–∞ {service} üëã",
  "{name}, –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ñ–¥—ë–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –≤ {time} –Ω–∞ {service} ‚ú®",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {name}! –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –∑–∞–ø–∏—Å—å –Ω–∞ {service} –≤ {time} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üåü",
  "{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ –≤ {time} {service} üìÖ",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! {staff} –±—É–¥–µ—Ç —Ä–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –≤ {time} –Ω–∞ {service} üòä",
  "{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} ‚úÖ",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {name}! –ó–∞–≤—Ç—Ä–∞ –≤ {time} –≤–∞—Å –∂–¥—ë—Ç {service} üéØ",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ú–∞—Å—Ç–µ—Ä {staff} –≥–æ—Ç–æ–≤ –∫ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} üíº",
  "{name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –∑–∞–ø–∏—Å–∏: {service} –≤ {time} üìã",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –ñ–¥—ë–º –≤–∞—Å –Ω–∞ {service} –∑–∞–≤—Ç—Ä–∞ –≤ {time} üïê",
  "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! {name}, –∑–∞–≤—Ç—Ä–∞ –≤ {time} —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ {service} ‚≠ê"
];

/**
 * –®–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞ (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ)
 * {service} - –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—á—Ç–æ?)
 * –Ω–∞ {service} - –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ —Å –ù–ê
 */
const twoHoursTemplates = [
  "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —Å–µ–≥–æ–¥–Ω—è –≤ {time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {service}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ {staff} –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –í–∞—Å –Ω–∞ {service}. –í—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞: {time}.",
  "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤ {time} –∂–¥—ë–º –≤–∞—Å –Ω–∞ {service}.",
  "{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {service} –≤ {time} —É {staff}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {staff}! –ß–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤ ({time}) –∂–¥—ë–º –í–∞—Å –Ω–∞ {service} —É {staff}.",
  "–î—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {service} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time} —Å–µ–≥–æ–¥–Ω—è.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –í {time} –∂–¥—ë–º –í–∞—Å –Ω–∞ {service}. {staff} —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –í–∞—à–µ–º—É –ø—Ä–∏—Ö–æ–¥—É.",
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {name}! –ñ–¥—ë–º –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤ {time} –Ω–∞ {service}. –ú–∞—Å—Ç–µ—Ä {staff} –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏ –∂–¥—ë—Ç –í–∞—Å .",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {service} —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ({time}).",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –°–∫–æ—Ä–æ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ {service} –≤ {time}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –û—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞ –¥–æ {service} ({time}). {staff} –≤–∞—Å –∂–¥—ë—Ç.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ {service} –≤ {time}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ({time}) –æ–∂–∏–¥–∞–µ–º –í–∞—Å –Ω–∞ {service}. –ú–∞—Å—Ç–µ—Ä: {staff}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ {time}. –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –í–∞—à–µ–º—É –≤–∏–∑–∏—Ç—É.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –í–∞—Å –Ω–∞ {service} –≤ {time}. –û—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ({time}) –≤–∞—Å –∂–¥—ë—Ç {service}. –ú–∞—Å—Ç–µ—Ä {staff} –≥–æ—Ç–æ–≤.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: {service} —Å–µ–≥–æ–¥–Ω—è –≤ {time}. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
  "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –û—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ {service} –≤ {time}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –í {time} –º–∞—Å—Ç–µ—Ä {staff} –∂–¥—ë—Ç –≤–∞—Å –Ω–∞ {service}.",
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è :)  {service} –Ω–∞—á–Ω—ë—Ç—Å—è –≤ {time}."
];

/**
 * –û–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å
 */
const dayBeforeEndings = [
  "–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å üëç",
  "–ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ üìù",
  "–ï—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè",
  "–ñ–¥—ë–º –≤–∞—Å! –ï—Å–ª–∏ —á—Ç–æ - –ø–∏—à–∏—Ç–µ!",
  "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, –µ—Å–ª–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å ‚úâÔ∏è",
  "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ - —Å–æ–æ–±—â–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–∞–Ω–µ–µ üì±",
  "–ñ–¥—ë–º –≤–∞—Å! –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º üíå",
  "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å - –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å ü§ù"
];

/**
 * –û–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞
 */
const twoHoursEndings = [
  "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
  "–ñ–¥—ë–º –≤–∞—Å!",
  "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!",
  "–£–≤–∏–¥–∏–º—Å—è!",
  "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!",
  "–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è!",
  "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–∞–ª–æ–Ω–µ!",
  "–ñ–¥—ë–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º!"
];

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
 */
function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
 * @param {Number} count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
 * @param {String} one - —Ñ–æ—Ä–º–∞ –¥–ª—è 1 (—Å—Ç—Ä–∏–∂–∫–∞)
 * @param {String} two - —Ñ–æ—Ä–º–∞ –¥–ª—è 2-4 (—Å—Ç—Ä–∏–∂–∫–∏)
 * @param {String} five - —Ñ–æ—Ä–º–∞ –¥–ª—è 5+ (—Å—Ç—Ä–∏–∂–µ–∫)
 * @returns {String} –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
 */
function pluralize(count, one, two, five) {
  const n = Math.abs(count) % 100;
  const n1 = n % 10;

  if (n > 10 && n < 20) return five;
  if (n1 > 1 && n1 < 5) return two;
  if (n1 === 1) return one;
  return five;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
 * @param {Array} services - –º–∞—Å—Å–∏–≤ —É—Å–ª—É–≥ —Å declensions
 * @param {String} caseType - –ø–∞–¥–µ–∂ (prepositional_na, accusative, nominative –∏ —Ç.–¥.)
 * @returns {String} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
 */
function formatServicesInCase(services, caseType) {
  if (!services || services.length === 0) {
    return '—É—Å–ª—É–≥—É';
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const serviceCounts = new Map();

  services.forEach(service => {
    const key = service.title;
    if (!serviceCounts.has(key)) {
      serviceCounts.set(key, { service, count: 0 });
    }
    serviceCounts.get(key).count++;
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —É—Å–ª—É–≥
  const formattedGroups = [];

  for (const { service, count } of serviceCounts.values()) {
    let serviceName;

    if (service.declensions && service.declensions[caseType]) {
      serviceName = service.declensions[caseType];
    } else {
      serviceName = service.title.toLowerCase();
    }

    if (count > 1) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
      // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ declensions.plural
      let pluralForm = serviceName;

      if (service.declensions && service.declensions.plural && service.declensions.plural[caseType]) {
        pluralForm = service.declensions.plural[caseType];
      } else {
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–¥–µ–∂–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º [–∞-—è—ë]+ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤–º–µ—Å—Ç–æ \w

        // –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (–Ω–∞ —á—Ç–æ?)
        if (caseType === 'accusative' || caseType === 'prepositional_na') {
          pluralForm = serviceName
            .replace(/—É—é\s+([–∞-—è—ë]+)—É$/iu, '—ã–µ $1–∏')      // –º—É–∂—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É -> –º—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏
            .replace(/–∏–π\s+([–∞-—è—ë]+)$/iu, '–∏–µ $1—ã')       // –º—É–∂—Å–∫–æ–π –º–∞—Å—Å–∞–∂ -> –º—É–∂—Å–∫–∏–µ –º–∞—Å—Å–∞–∂–∏
            .replace(/—É—é\s+([–∞-—è—ë]+)–∏—é$/iu, '—ã–µ $1–∏–∏')    // –±–∞–∑–æ–≤—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É -> –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            .replace(/–æ–µ\s+([–∞-—è—ë]+)–∏–µ$/iu, '—ã–µ $1–∏—è');   // –±–∞–∑–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ -> –±–∞–∑–æ–≤—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        }
        // –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—á—Ç–æ?)
        else if (caseType === 'nominative') {
          pluralForm = serviceName
            .replace(/–∞—è\s+([–∞-—è—ë]+)–∞$/iu, '—ã–µ $1–∏')      // –º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ -> –º—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏
            .replace(/–∏–π\s+([–∞-—è—ë]+)$/iu, '–∏–µ $1–∏')       // –º—É–∂—Å–∫–æ–π –º–∞—Å—Å–∞–∂ -> –º—É–∂—Å–∫–∏–µ –º–∞—Å—Å–∞–∂–∏
            .replace(/–æ–µ\s+([–∞-—è—ë]+)–µ$/iu, '—ã–µ $1—è');     // –±–∞–∑–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ -> –±–∞–∑–æ–≤—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        }
        // –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—á–µ–≥–æ?)
        else if (caseType === 'genitive') {
          pluralForm = serviceName
            .replace(/–æ–π\s+([–∞-—è—ë]+)–∏$/iu, '—ã—Ö $1–µ–∫')     // –º—É–∂—Å–∫–æ–π —Å—Ç—Ä–∏–∂–∫–∏ -> –º—É–∂—Å–∫–∏—Ö —Å—Ç—Ä–∏–∂–µ–∫
            .replace(/–æ–≥–æ\s+([–∞-—è—ë]+)–∞$/iu, '—ã—Ö $1–µ–π');   // –º—É–∂—Å–∫–æ–≥–æ –º–∞—Å—Å–∞–∂–∞ -> –º—É–∂—Å–∫–∏—Ö –º–∞—Å—Å–∞–∂–µ–π
        }
        // –î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—á–µ–º—É?)
        else if (caseType === 'dative') {
          pluralForm = serviceName
            .replace(/–æ–π\s+([–∞-—è—ë]+)–µ$/iu, '—ã–º $1–∞–º')     // –º—É–∂—Å–∫–æ–π —Å—Ç—Ä–∏–∂–∫–µ -> –º—É–∂—Å–∫–∏–º —Å—Ç—Ä–∏–∂–∫–∞–º
            .replace(/–æ–º—É\s+([–∞-—è—ë]+)—É$/iu, '—ã–º $1–∞–º');   // –º—É–∂—Å–∫–æ–º—É –º–∞—Å—Å–∞–∂—É -> –º—É–∂—Å–∫–∏–º –º–∞—Å—Å–∞–∂–∞–º
        }
        // –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ (–æ —á—ë–º?)
        else if (caseType === 'prepositional') {
          pluralForm = serviceName
            .replace(/–æ–π\s+([–∞-—è—ë]+)–µ$/iu, '—ã—Ö $1–∞—Ö')     // –æ –º—É–∂—Å–∫–æ–π —Å—Ç—Ä–∏–∂–∫–µ -> –æ –º—É–∂—Å–∫–∏—Ö —Å—Ç—Ä–∏–∂–∫–∞—Ö
            .replace(/–æ–º\s+([–∞-—è—ë]+)–µ$/iu, '—ã—Ö $1–∞—Ö');    // –æ –º—É–∂—Å–∫–æ–º –º–∞—Å—Å–∞–∂–µ -> –æ –º—É–∂—Å–∫–∏—Ö –º–∞—Å—Å–∞–∂–∞—Ö
        }
      }

      formattedGroups.push(`${count} ${pluralForm}`);
    } else {
      formattedGroups.push(serviceName);
    }
  }

  // –°–æ–µ–¥–∏–Ω—è–µ–º –≥—Ä—É–ø–ø—ã —É—Å–ª—É–≥
  if (formattedGroups.length === 1) {
    return formattedGroups[0];
  } else if (formattedGroups.length === 2) {
    // –î–ª—è –¥–≤—É—Ö –≥—Ä—É–ø–ø: "2 –º—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã"
    return `${formattedGroups[0]} –∏ ${formattedGroups[1]}`;
  } else {
    // –î–ª—è —Ç—Ä—ë—Ö –∏ –±–æ–ª–µ–µ: "2 —Å—Ç—Ä–∏–∂–∫–∏, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã –∏ —É–∫–ª–∞–¥–∫—É"
    const allButLast = formattedGroups.slice(0, -1).join(', ');
    const last = formattedGroups[formattedGroups.length - 1];
    return `${allButLast} –∏ ${last}`;
  }
}

/**
 * –ó–∞–º–µ–Ω–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
 */
function fillTemplate(template, data) {
  let result = template;

  // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
  result = result.replace(/{name}/g, data.clientName || '–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç');
  result = result.replace(/{time}/g, data.time);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
  if (data.staffDeclensions) {
    // "—É {staff}" - –∏—Å–ø–æ–ª—å–∑—É–µ–º prepositional_u (—É –°–µ—Ä–≥–µ—è, —É –ê–ª–∏)
    result = result.replace(/—É {staff}/g,
      data.staffDeclensions.prepositional_u || `—É ${data.staff}`);

    // "–ú–∞—Å—Ç–µ—Ä {staff}" - –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    result = result.replace(/[–ú–º]–∞—Å—Ç–µ—Ä {staff}/g,
      `–º–∞—Å—Ç–µ—Ä ${data.staffDeclensions.nominative || data.staff}`);

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ {staff} - –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    result = result.replace(/{staff}/g,
      data.staffDeclensions.nominative || data.staff);
  } else {
    // –ï—Å–ª–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –µ—Å—Ç—å
    result = result.replace(/{staff}/g, data.staff);
  }

  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ —É—Å–ª—É–≥ —Å–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
  const services = data.servicesWithDeclensions || [];

  if (services.length > 0) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –ø–∞–¥–µ–∂ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º formatServicesInCase
    // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ü–ï–†–í–´–ú–ò!

    // 1. –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—Å–∞–º—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
    result = result.replace(/—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ {service}/g,
      `—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ ${formatServicesInCase(services, 'nominative')}`);

    result = result.replace(/\{service\} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞/g,
      `${formatServicesInCase(services, 'nominative')} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`);

    result = result.replace(/—É –≤–∞—Å {service}/g,
      `—É –≤–∞—Å ${formatServicesInCase(services, 'nominative')}`);

    result = result.replace(/–≤–∞—Å –∂–¥—ë—Ç {service}/g,
      `–≤–∞—Å –∂–¥—ë—Ç ${formatServicesInCase(services, 'nominative')}`);

    result = result.replace(/–Ω–∞—á–Ω—ë—Ç—Å—è {service}/g,
      `–Ω–∞—á–Ω—ë—Ç—Å—è ${formatServicesInCase(services, 'nominative')}`);

    // 2. –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    result = result.replace(/–¥–ª—è {service}/g,
      `–¥–ª—è ${formatServicesInCase(services, 'genitive')}`);

    result = result.replace(/–¥–æ {service}/g,
      `–¥–æ ${formatServicesInCase(services, 'genitive')}`);

    // 3. –î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    result = result.replace(/–∫ {service}/g,
      `–∫ ${formatServicesInCase(services, 'dative')}`);

    // 4. –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ (—Å –ø—Ä–µ–¥–ª–æ–≥–æ–º –ù–ê) - –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ!
    result = result.replace(/–∑–∞–ø–∏—Å–∏ –Ω–∞ {service}/g,
      `–∑–∞–ø–∏—Å–∏ –Ω–∞ ${formatServicesInCase(services, 'prepositional_na')}`);

    result = result.replace(/–Ω–∞ {service}/g,
      `–Ω–∞ ${formatServicesInCase(services, 'prepositional_na')}`);

    result = result.replace(/–ø—Ä–æ {service}/g,
      `–ø—Ä–æ ${formatServicesInCase(services, 'accusative')}`);

    // 5. –û—Å—Ç–∞–≤—à–∏–µ—Å—è {service} –±–µ–∑ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ - –æ–±—ã—á–Ω–æ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    result = result.replace(/{service}/g,
      formatServicesInCase(services, 'nominative'));

  } else {
    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ —É—Å–ª—É–≥
    if (data.serviceDeclensions) {
      result = result.replace(/–Ω–∞ {service}/g,
        `–Ω–∞ ${data.serviceDeclensions.prepositional_na || data.serviceDeclensions.prepositional || data.service.toLowerCase()}`);
      result = result.replace(/{service}/g,
        data.serviceDeclensions.nominative || data.service.toLowerCase());
    } else {
      result = result.replace(/{service}/g, data.service.toLowerCase());
    }
  }

  return result;
}

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
 */
function generateDayBeforeReminder(data) {
  const template = getRandomElement(dayBeforeTemplates);
  const ending = getRandomElement(dayBeforeEndings);

  const mainText = fillTemplate(template, data);

  // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = mainText + '\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
  message += `–ú–∞—Å—Ç–µ—Ä: ${data.staff}\n`;
  if (data.price > 0) {
    message += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${data.price} —Ä—É–±.\n`;
  }
  if (data.address) {
    message += `\n–ñ–¥—ë–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: ${data.address}\n`;
  }
  message += '\n' + ending;

  return message;
}

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
 */
function generateTwoHoursReminder(data) {
  const template = getRandomElement(twoHoursTemplates);
  const ending = getRandomElement(twoHoursEndings);

  const mainText = fillTemplate(template, data);

  // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = mainText + '\n';

  if (data.address) {
    message += `–ê–¥—Ä–µ—Å: ${data.address}\n`;
  }
  message += '\n' + ending;

  return message;
}

module.exports = {
  generateDayBeforeReminder,
  generateTwoHoursReminder
};