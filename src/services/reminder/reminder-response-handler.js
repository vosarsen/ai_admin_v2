// src/services/reminder/reminder-response-handler.js
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∏–∑–∏—Ç—ã –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ
 */

const logger = require('../../utils/logger');
const reminderContextTracker = require('./reminder-context-tracker');
const { YclientsClient } = require('../../integrations/yclients/client');
const whatsappClient = require('../../integrations/whatsapp/client');
const config = require('../../config');

class ReminderResponseHandler {
  constructor() {
    this.yclientsClient = new YclientsClient({
      companyId: config.yclients.companyId,
      bearerToken: config.yclients.bearerToken,
      userToken: config.yclients.userToken,
      partnerId: config.yclients.partnerId
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   * @param {string} phone - –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏)
   * @returns {Promise<{handled: boolean, confirmed: boolean, error?: string}>}
   */
  async handleResponse(phone, message, messageId = null) {
    try {
      logger.info(`üì® Checking if message is reminder response`, {
        phone: this._sanitizePhone(phone),
        messagePreview: message.substring(0, 50)
      });

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ reminderContextTracker (—Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ + AI)
      const shouldHandle = await reminderContextTracker.shouldHandleAsReminderResponse(
        phone,
        message
      );

      if (!shouldHandle) {
        logger.debug('Not a reminder response, skipping');
        return {
          handled: false,
          confirmed: false
        };
      }

      logger.info(`‚úÖ Confirmed reminder response detected from ${this._sanitizePhone(phone)}`);

      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const context = await reminderContextTracker.getReminderContext(phone);

      if (!context || !context.booking) {
        logger.error('No booking context found for reminder response', { phone });
        return {
          handled: true,
          confirmed: false,
          error: 'No booking context'
        };
      }

      const { recordId } = context.booking;

      if (!recordId) {
        logger.error('No recordId in booking context', { context });
        return {
          handled: true,
          confirmed: false,
          error: 'No recordId'
        };
      }

      logger.info(`üìù Processing confirmation for booking ${recordId}`);

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ YClients (attendance = 2 "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
      const updateResult = await this._updateBookingStatus(recordId);

      if (!updateResult.success) {
        logger.error(`Failed to update booking ${recordId} status:`, updateResult.error);
        return {
          handled: true,
          confirmed: false,
          error: updateResult.error
        };
      }

      logger.info(`‚úÖ Booking ${recordId} confirmed in YClients`);

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é ‚ù§Ô∏è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
      await this._sendReaction(phone, messageId);

      // 5. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –≤ Redis
      await reminderContextTracker.markAsConfirmed(phone);

      logger.info(`üéâ Reminder response successfully processed for ${this._sanitizePhone(phone)}`, {
        recordId,
        message: message.substring(0, 50)
      });

      return {
        handled: true,
        confirmed: true,
        recordId,
        bookingDetails: context.booking
      };

    } catch (error) {
      logger.error('Error handling reminder response:', error);
      return {
        handled: true,
        confirmed: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ YClients
   * @private
   */
  async _updateBookingStatus(recordId) {
    try {
      // attendance = 2 –æ–∑–Ω–∞—á–∞–µ—Ç "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å"
      const result = await this.yclientsClient.updateBookingStatus(recordId, 2);

      if (!result.success) {
        logger.error(`YClients API error when updating booking ${recordId}:`, result.error);
        return {
          success: false,
          error: result.error || 'Failed to update booking status'
        };
      }

      logger.info(`‚úÖ Booking ${recordId} status updated to "confirmed" (attendance=2)`);
      return { success: true };

    } catch (error) {
      logger.error(`Exception updating booking ${recordId}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   * @private
   */
  async _sendReaction(phone, messageId) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é ‚ù§Ô∏è
      const result = await whatsappClient.sendReaction(phone, '‚ù§Ô∏è');

      if (result.success) {
        logger.info(`üíñ Reaction sent to ${this._sanitizePhone(phone)}`);
      } else {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å
        logger.warn(`Failed to send reaction to ${this._sanitizePhone(phone)}:`, result.error);
      }
    } catch (error) {
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      logger.warn(`Exception sending reaction:`, error);
    }
  }

  /**
   * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
   * @private
   */
  _sanitizePhone(phone) {
    if (!phone) return 'unknown';
    const digits = phone.replace(/\D/g, '');
    if (digits.length > 6) {
      return `${digits.substring(0, 3)}****${digits.substring(digits.length - 2)}`;
    }
    return 'phone_****';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
   */
  getStats() {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ Prometheus
    return {
      service: 'reminder-response-handler',
      status: 'operational'
    };
  }
}

module.exports = new ReminderResponseHandler();
