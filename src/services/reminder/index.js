// src/services/reminder/index.js
const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');
const messageQueue = require('../../queue/message-queue');
const config = require('../../config');

class ReminderService {
  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async scheduleRemindersForExistingBookings() {
    try {
      logger.info('üìÖ Loading existing bookings for reminders...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);
      
      const weekLater = new Date();
      weekLater.setDate(weekLater.getDate() + 7);
      weekLater.setHours(23, 59, 59, 999);
      
      const { data: bookings, error } = await supabase
        .from('bookings')
        .select('*')
        .gte('datetime', tomorrow.toISOString())
        .lte('datetime', weekLater.toISOString())
        .eq('status', 'active');
        
      if (error) {
        logger.error('Failed to load bookings:', error);
        return;
      }
      
      if (!bookings || bookings.length === 0) {
        logger.info('No upcoming bookings found');
        return;
      }
      
      logger.info(`Found ${bookings.length} upcoming bookings`);
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
      for (const booking of bookings) {
        await this.scheduleRemindersForBooking(booking);
      }
      
      logger.info(`‚úÖ Scheduled reminders for ${bookings.length} bookings`);
      
    } catch (error) {
      logger.error('Failed to schedule reminders for existing bookings:', error);
    }
  }
  
  /**
   * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  async scheduleRemindersForBooking(booking) {
    try {
      const bookingTime = new Date(booking.datetime);
      const now = new Date();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥
      const [staffData, servicesData, companyData] = await Promise.all([
        this.getStaffWithDeclensions(booking.staff_id),
        this.getServicesWithDeclensions(booking.service_ids),
        this.getCompanyInfo(booking.company_id)
      ]);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ booking —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const bookingData = {
        datetime: booking.datetime,
        service_name: booking.services?.join(', ') || '—É—Å–ª—É–≥–∞',
        staff_name: booking.staff_name || '–º–∞—Å—Ç–µ—Ä',
        record_id: booking.yclients_record_id,
        client_name: booking.client_name,
        cost: booking.cost,
        staff_declensions: staffData?.declensions,
        service_declensions: servicesData?.[0]?.declensions, // –ë–µ—Ä–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —É—Å–ª—É–≥–∏
        address: companyData?.address || '—É–ª. –ö—É–ª—å—Ç—É—Ä—ã 15/11'
      };
      
      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 19:00 –∏ 21:00
      const dayBefore = new Date(bookingTime);
      dayBefore.setDate(dayBefore.getDate() - 1);
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 19:00 –∏ 21:00
      const randomHour = 19 + Math.floor(Math.random() * 2); // 19 –∏–ª–∏ 20
      const randomMinute = Math.floor(Math.random() * 60); // 0-59
      dayBefore.setHours(randomHour, randomMinute, 0, 0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      if (dayBefore > now && !booking.day_before_sent) {
        await messageQueue.addReminder({
          type: 'day_before',
          booking: bookingData,
          phone: booking.client_phone,
          bookingId: booking.id
        }, dayBefore);
        logger.info(`üìÖ Scheduled day-before reminder for booking ${booking.yclients_record_id}`);
      }
      
      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
      const twoHoursBefore = new Date(bookingTime.getTime() - 2 * 60 * 60 * 1000);
      
      if (twoHoursBefore > now && !booking.hour_before_sent) {
        await messageQueue.addReminder({
          type: 'hours_before',
          booking: bookingData,
          phone: booking.client_phone,
          hours: 2,
          bookingId: booking.id
        }, twoHoursBefore);
        logger.info(`‚è∞ Scheduled 2-hour reminder for booking ${booking.yclients_record_id}`);
      }
      
    } catch (error) {
      logger.error(`Failed to schedule reminders for booking ${booking.yclients_record_id}:`, error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
   */
  async sendReminder(phone, booking, reminderType) {
    try {
      const whatsappClient = require('../../integrations/whatsapp/client');
      const { generateDayBeforeReminder, generateTwoHoursReminder } = require('./templates');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
      const date = new Date(booking.datetime);
      const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      
      const templateData = {
        clientName: booking.client_name || '',
        time: timeStr,
        service: booking.service_name || '—É—Å–ª—É–≥–∞',
        staff: booking.staff_name || '–º–∞—Å—Ç–µ—Ä',
        price: booking.cost || 0,
        address: booking.address || '—É–ª. –ö—É–ª—å—Ç—É—Ä—ã 15/11',
        staffDeclensions: booking.staff_declensions,
        serviceDeclensions: booking.service_declensions
      };
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      let reminderText;
      if (reminderType === 'day_before') {
        reminderText = generateDayBeforeReminder(templateData);
      } else if (reminderType === 'hours_before' || reminderType === 'two_hours') {
        reminderText = generateTwoHoursReminder(templateData);
      } else {
        // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reminderText = this.formatSimpleReminder(booking);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WhatsApp
      await whatsappClient.sendMessage(phone, reminderText);
      
      logger.info(`‚úÖ Reminder sent to ${phone} (type: ${reminderType})`);
      
      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
      if (booking.id) {
        await this.markReminderSent(booking.id, reminderType);
      }
      
    } catch (error) {
      logger.error(`Failed to send reminder to ${phone}:`, error);
      throw error;
    }
  }
  
  /**
   * –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (fallback)
   */
  formatSimpleReminder(booking) {
    const date = new Date(booking.datetime);
    const timeStr = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const dateStr = date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' });
    
    return `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n` +
           `üìÖ ${dateStr} –≤ ${timeStr}\n` +
           `–£—Å–ª—É–≥–∞: ${booking.service_name}\n` +
           `–ú–∞—Å—Ç–µ—Ä: ${booking.staff_name}\n\n` +
           `–ñ–¥–µ–º –≤–∞—Å!`;
  }
  
  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
   */
  async markReminderSent(bookingId, reminderType) {
    try {
      const updateData = {};
      
      if (reminderType === 'day_before') {
        updateData.day_before_sent = true;
        updateData.day_before_sent_at = new Date().toISOString();
      } else if (reminderType === 'hours_before') {
        updateData.hour_before_sent = true;
        updateData.hour_before_sent_at = new Date().toISOString();
      }
      
      const { error } = await supabase
        .from('bookings')
        .update(updateData)
        .eq('id', bookingId);
        
      if (error) {
        logger.error(`Failed to mark reminder as sent:`, error);
      }
      
    } catch (error) {
      logger.error('Error marking reminder as sent:', error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ —Å–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
   */
  async getStaffWithDeclensions(staffId) {
    if (!staffId) return null;
    
    try {
      const { data, error } = await supabase
        .from('staff')
        .select('name, declensions')
        .eq('id', staffId)
        .maybeSingle();

      if (error) {
        logger.error('Failed to load staff info:', error);
        return null;
      }
      
      return data;
    } catch (error) {
      logger.error('Error loading staff declensions:', error);
      return null;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö —Å–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
   */
  async getServicesWithDeclensions(serviceIds) {
    if (!serviceIds || serviceIds.length === 0) return null;
    
    try {
      const { data, error } = await supabase
        .from('services')
        .select('title, declensions')
        .in('id', serviceIds);
        
      if (error) {
        logger.error('Failed to load services declensions:', error);
        return null;
      }
      
      return data;
    } catch (error) {
      logger.error('Error loading services declensions:', error);
      return null;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async getCompanyInfo(companyId) {
    if (!companyId) return null;
    
    try {
      const { data, error } = await supabase
        .from('companies')
        .select('title, address, phone')
        .eq('company_id', companyId)
        .maybeSingle();

      if (error) {
        logger.error('Failed to load company info:', error);
        return null;
      }
      
      return data;
    } catch (error) {
      logger.error('Error loading company info:', error);
      return null;
    }
  }
}

module.exports = new ReminderService();