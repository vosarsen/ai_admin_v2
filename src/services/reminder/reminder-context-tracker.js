// src/services/reminder/reminder-context-tracker.js
/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –≤ Redis
 * —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

const logger = require('../../utils/logger');
const { createRedisClient } = require('../../utils/redis-factory');
const config = require('../../config');

class ReminderContextTracker {
  constructor() {
    this.redisPrefix = 'reminder_context:';
    this.ttl = 24 * 60 * 60; // 24 —á–∞—Å–∞
    this.redis = null;
    this._initRedis();
  }

  async _initRedis() {
    try {
      this.redis = await createRedisClient();
      logger.info('‚úÖ Redis client initialized for ReminderContextTracker');
    } catch (error) {
      logger.error('Failed to initialize Redis client:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
   */
  async saveReminderContext(phone, bookingData, reminderType) {
    try {
      if (!this.redis) {
        logger.warn('Redis client not initialized, trying to reconnect...');
        await this._initRedis();
        if (!this.redis) {
          logger.error('Failed to initialize Redis client');
          return false;
        }
      }
      
      const key = `${this.redisPrefix}${phone}`;
      
      const context = {
        type: reminderType, // 'day_before', '2hours'
        sentAt: new Date().toISOString(),
        booking: {
          recordId: bookingData.record_id || bookingData.id,
          datetime: bookingData.datetime,
          serviceName: bookingData.service_name,
          staffName: bookingData.staff_name
        },
        awaitingConfirmation: true
      };

      await this.redis.set(key, JSON.stringify(context), 'EX', this.ttl);
      
      logger.info(`üìù Saved reminder context for ${phone}:`, {
        type: reminderType,
        recordId: context.booking.recordId
      });

      return true;
    } catch (error) {
      logger.error('Failed to save reminder context:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async getReminderContext(phone) {
    try {
      const key = `${this.redisPrefix}${phone}`;
      const data = await this.redis.get(key);
      
      if (!data) {
        return null;
      }

      const context = JSON.parse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 12 —á–∞—Å–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
      const sentAt = new Date(context.sentAt);
      const hoursAgo = (Date.now() - sentAt.getTime()) / (1000 * 60 * 60);
      
      if (context.awaitingConfirmation && hoursAgo > 12) {
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞—Ä–µ–ª
        await this.clearReminderContext(phone);
        return null;
      }

      return context;
    } catch (error) {
      logger.error('Failed to get reminder context:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞)
   */
  async clearReminderContext(phone) {
    try {
      const key = `${this.redisPrefix}${phone}`;
      await this.redis.del(key);
      logger.debug(`üóëÔ∏è Cleared reminder context for ${phone}`);
      return true;
    } catch (error) {
      logger.error('Failed to clear reminder context:', error);
      return false;
    }
  }

  /**
   * –ü–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
   */
  async markAsConfirmed(phone) {
    try {
      const context = await this.getReminderContext(phone);
      if (!context) {
        return false;
      }

      context.awaitingConfirmation = false;
      context.confirmedAt = new Date().toISOString();

      const key = `${this.redisPrefix}${phone}`;
      await this.redis.set(key, JSON.stringify(context), 'EX', this.ttl);
      
      logger.info(`‚úÖ Marked reminder as confirmed for ${phone}`);
      return true;
    } catch (error) {
      logger.error('Failed to mark reminder as confirmed:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  isConfirmationMessage(message) {
    if (!message || typeof message !== 'string') {
      return false;
    }

    const lowerMessage = message.toLowerCase().trim();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmationPatterns = [
      '–æ–∫', 'ok', '–¥–∞', 'yes', '–∫–æ–Ω–µ—á–Ω–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 
      '–ø—Ä–∏–¥—É', '–ø—Ä–∏–¥–µ–º', '–±—É–¥—É', '–±—É–¥–µ–º', '—Å–ø–∞—Å–∏–±–æ', '—Ö–æ—Ä–æ—à–æ',
      '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–≥–ª–∞—Å–Ω–∞',
      'üëç', 'üëå', '‚úÖ', 'üíØ', '+', '++', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (confirmationPatterns.includes(lowerMessage)) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return confirmationPatterns.some(pattern => 
      lowerMessage.startsWith(pattern + ' ') || 
      lowerMessage.startsWith(pattern + ',') ||
      lowerMessage.startsWith(pattern + '.')
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   */
  async shouldHandleAsReminderResponse(phone, message) {
    const context = await this.getReminderContext(phone);
    
    if (!context || !context.awaitingConfirmation) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sentAt = new Date(context.sentAt);
    const minutesAgo = (Date.now() - sentAt.getTime()) / (1000 * 60);
    
    if (minutesAgo > 30) {
      // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return this.isConfirmationMessage(message);
  }
}

module.exports = new ReminderContextTracker();