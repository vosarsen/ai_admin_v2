// src/services/reminder/reminder-context-tracker.js
/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –≤ Redis
 * —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

const logger = require('../../utils/logger');
const { createRedisClient } = require('../../utils/redis-factory');
const config = require('../../config');

class ReminderContextTracker {
  constructor() {
    this.redisPrefix = 'reminder_context:';
    this.ttl = 24 * 60 * 60; // 24 —á–∞—Å–∞
    this.redis = null;
    this._initRedis();
  }

  async _initRedis() {
    try {
      this.redis = await createRedisClient();
      logger.info('‚úÖ Redis client initialized for ReminderContextTracker');
    } catch (error) {
      logger.error('Failed to initialize Redis client:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
   */
  async saveReminderContext(phone, bookingData, reminderType) {
    try {
      if (!this.redis) {
        logger.warn('Redis client not initialized, trying to reconnect...');
        await this._initRedis();
        if (!this.redis) {
          logger.error('Failed to initialize Redis client');
          return false;
        }
      }
      
      const key = `${this.redisPrefix}${phone}`;
      
      const context = {
        type: reminderType, // 'day_before', '2hours'
        sentAt: new Date().toISOString(),
        booking: {
          recordId: bookingData.record_id || bookingData.id,
          datetime: bookingData.datetime,
          serviceName: bookingData.service_name,
          staffName: bookingData.staff_name
        },
        awaitingConfirmation: true
      };

      await this.redis.set(key, JSON.stringify(context), 'EX', this.ttl);
      
      logger.info(`üìù Saved reminder context for ${phone}:`, {
        type: reminderType,
        recordId: context.booking.recordId
      });

      return true;
    } catch (error) {
      logger.error('Failed to save reminder context:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async getReminderContext(phone) {
    try {
      const key = `${this.redisPrefix}${phone}`;
      const data = await this.redis.get(key);
      
      if (!data) {
        return null;
      }

      const context = JSON.parse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 12 —á–∞—Å–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
      const sentAt = new Date(context.sentAt);
      const hoursAgo = (Date.now() - sentAt.getTime()) / (1000 * 60 * 60);
      
      if (context.awaitingConfirmation && hoursAgo > 12) {
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞—Ä–µ–ª
        await this.clearReminderContext(phone);
        return null;
      }

      return context;
    } catch (error) {
      logger.error('Failed to get reminder context:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞)
   */
  async clearReminderContext(phone) {
    try {
      const key = `${this.redisPrefix}${phone}`;
      await this.redis.del(key);
      logger.debug(`üóëÔ∏è Cleared reminder context for ${phone}`);
      return true;
    } catch (error) {
      logger.error('Failed to clear reminder context:', error);
      return false;
    }
  }

  /**
   * –ü–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
   */
  async markAsConfirmed(phone) {
    try {
      const context = await this.getReminderContext(phone);
      if (!context) {
        return false;
      }

      context.awaitingConfirmation = false;
      context.confirmedAt = new Date().toISOString();

      const key = `${this.redisPrefix}${phone}`;
      await this.redis.set(key, JSON.stringify(context), 'EX', this.ttl);
      
      logger.info(`‚úÖ Marked reminder as confirmed for ${phone}`);
      return true;
    } catch (error) {
      logger.error('Failed to mark reminder as confirmed:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–∞—Ç—Ç–µ—Ä–Ω—ã)
   */
  isConfirmationMessage(message) {
    if (!message || typeof message !== 'string') {
      return false;
    }

    const lowerMessage = message.toLowerCase().trim();

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmationPatterns = [
      // –ë–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      '–æ–∫', 'ok', '–¥–∞', 'yes', '–∫–æ–Ω–µ—á–Ω–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
      '–ø—Ä–∏–¥—É', '–ø—Ä–∏–¥–µ–º', '–±—É–¥—É', '–±—É–¥–µ–º', '—Å–ø–∞—Å–∏–±–æ', '—Ö–æ—Ä–æ—à–æ',
      '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–æ–≥–ª–∞—Å–Ω–∞',

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–ø–æ–π–¥—É', '–ø–æ–π–¥–µ–º', '–∞–≥–∞', '—É–≥—É',
      '—Ç–æ—á–Ω–æ', '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ', '—Ä–∞–∑—É–º–µ–µ—Ç—Å—è', '–±–µ–∑ –ø—Ä–æ–±–ª–µ–º',
      '–ª–∞–¥–Ω–æ', '–æ–∫–µ–π', '–æ–∫–µ—é—à–∫–∏', '–æ–∫)', '–æ–∫!', '–¥–∞)', '–¥–∞!',
      '–ø—Ä–∏–¥—É!', '–±—É–¥—É!', '–∫–æ–Ω–µ—á–Ω–æ!', '–∫–æ–Ω–µ—á–Ω–æ –ø—Ä–∏–¥—É',
      '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—É', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É', '—Ç–æ—á–Ω–æ –ø—Ä–∏–¥—É',
      '—Ç–æ—á–Ω–æ –±—É–¥—É', '–¥–∞ –ø—Ä–∏–¥—É', '–¥–∞ –±—É–¥—É', '–∞–≥–∞ –ø—Ä–∏–¥—É',

      // –°–ª–µ–Ω–≥ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ
      '–æ–∫–∏', '–æ–∫—Å', '–¥–∞–≤–∞–π', '–≥–æ', '–ø–æ–≥–Ω–∞–ª–∏', '–µ—Å',
      '–µ—Å—Å', '–µ—Å—Ç—å', '—è—Å–Ω', '—è—Å–Ω–æ', '–ø–æ–Ω—è–ª', '–ø–æ–Ω—è–ª–∞',
      '–∑–∞–ø–∏—Å—ã–≤–∞–π', '–∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ', '–∂–¥—É', '–∂–¥—ë–º',

      // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (—á–∞—Å—Ç–æ –∏–¥—É—Ç –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
      '—Å–ø—Å', '—Å–ø–∞—Å–∏–±–æ!', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', 'thx',

      // –≠–º–æ–¥–∑–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      'üëç', 'üëå', '‚úÖ', 'üíØ', '+', '++', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      '‚ù§Ô∏è', 'üíó', '‚ù§', '‚ô•Ô∏è', 'üíô', 'üíö', 'üíõ', 'üíú',
      'üëè', 'üôè', 'üòä', 'üôÇ', 'üòâ', 'ü§ù', 'üí™'
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (confirmationPatterns.includes(lowerMessage)) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const startsWithPattern = confirmationPatterns.some(pattern =>
      lowerMessage.startsWith(pattern + ' ') ||
      lowerMessage.startsWith(pattern + ',') ||
      lowerMessage.startsWith(pattern + '.') ||
      lowerMessage.startsWith(pattern + '!')
    );

    if (startsWithPattern) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ (–±–æ–ª–µ–µ –≥–∏–±–∫–æ)
    const confirmationPhrases = [
      '–ø—Ä–∏–¥—É –Ω–∞ –∑–∞–ø–∏—Å—å',
      '–±—É–¥—É –Ω–∞ –≤–∏–∑–∏—Ç–µ',
      '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å',
      '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤–∏–∑–∏—Ç',
      '–≤—Å–µ –≤ —Å–∏–ª–µ',
      '–≤—Å—ë –≤ —Å–∏–ª–µ',
      '–≤—Å—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
      '–≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'
    ];

    return confirmationPhrases.some(phrase => lowerMessage.includes(phrase));
  }

  /**
   * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
   * Fallback –º–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
   */
  async isConfirmationByAI(message) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI provider —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
      const providerFactory = require('../ai/provider-factory');
      const provider = providerFactory.getProvider();

      const prompt = `–ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω.

–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: "${message}"

–≠—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ü–†–ò–î–ï–¢ –Ω–∞ –≤–∏–∑–∏—Ç?

–í–∞–∂–Ω–æ:
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∏–∑–∏—Ç (–¥–∞, –ø—Ä–∏–¥—É, –±—É–¥—É, –æ–∫ –∏ —Ç.–¥.) ‚Üí –æ—Ç–≤–µ—Ç—å "YES"
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç, –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏–ª–∏ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Üí –æ—Ç–≤–µ—Ç—å "NO"
- –ï—Å–ª–∏ –Ω–µ—è—Å–Ω–æ –∏–ª–∏ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ ‚Üí –æ—Ç–≤–µ—Ç—å "NO"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: YES –∏–ª–∏ NO`;

      logger.info('ü§ñ Using AI to detect confirmation intent', {
        message: message.substring(0, 100)
      });

      const response = await provider.call(prompt, {
        maxTokens: 10, // –ù—É–∂–Ω–æ –≤—Å–µ–≥–æ 1 —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        temperature: 0 // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      });

      const answer = response.trim().toUpperCase();
      const isConfirmation = answer === 'YES';

      logger.info(`ü§ñ AI confirmation detection result: ${answer}`, {
        isConfirmation,
        message: message.substring(0, 50)
      });

      return isConfirmation;

    } catch (error) {
      logger.error('Failed to use AI for confirmation detection:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ AI —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø–æ—Ç–æ–º AI
   */
  async shouldHandleAsReminderResponse(phone, message) {
    const context = await this.getReminderContext(phone);

    if (!context || !context.awaitingConfirmation) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sentAt = new Date(context.sentAt);
    const minutesAgo = (Date.now() - sentAt.getTime()) / (1000 * 60);

    if (minutesAgo > 30) {
      // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ
      logger.debug(`Reminder timeout: ${minutesAgo} minutes since reminder sent`);
      return false;
    }

    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (0.001ms)
    const patternMatch = this.isConfirmationMessage(message);

    if (patternMatch) {
      logger.info('‚úÖ Confirmation detected by pattern matching');
      return true;
    }

    // 2. –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI (1-2 —Å–µ–∫—É–Ω–¥—ã)
    logger.info('ü§ñ Pattern matching failed, falling back to AI detection');
    const aiMatch = await this.isConfirmationByAI(message);

    if (aiMatch) {
      logger.info('‚úÖ Confirmation detected by AI');
    } else {
      logger.info('‚ùå Not a confirmation (AI result)');
    }

    return aiMatch;
  }
}

module.exports = new ReminderContextTracker();