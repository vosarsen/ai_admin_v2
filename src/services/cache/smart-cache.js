// src/services/cache/smart-cache.js
const { createRedisClient } = require('../../utils/redis-factory');
const logger = require('../../utils/logger');

/**
 * üß† SMART CACHE SERVICE
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è AI-First –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
 * - –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 */
class SmartCache {
  constructor() {
    this.redis = null;
    
    // Fallback –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
    this.memoryCache = new Map();
    this.memoryCacheTTL = 60000; // 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.memoryCacheMaxSize = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏
    
    this.stats = {
      hits: 0,
      misses: 0,
      computeTime: 0,
      popularKeys: new Map(),
      memoryFallbackUsed: 0
    };
    this.initPromise = this.initialize();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leak
    this.cleanupInterval = setInterval(() => {
      this._cleanupStats();
      this._cleanupMemoryCache();
    }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
  }

  async initialize() {
    try {
      this.redis = createRedisClient('smart-cache');
      logger.info('üß† Smart Cache initialized');
    } catch (error) {
      logger.error('Failed to initialize Smart Cache:', error);
      throw error;
    }
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get-or-compute —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getOrCompute(key, computeFn, options = {}) {
    await this.initPromise;
    
    const startTime = Date.now();
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à
      const cached = await this.redis.get(key);
      if (cached) {
        this.stats.hits++;
        this._updatePopularity(key);
        logger.debug(`üì¶ Cache HIT for key: ${key}`);
        return JSON.parse(cached);
      }

      // 2. Cache miss - –ø—Ä–æ–≤–µ—Ä—è–µ–º memory fallback
      const memoryCached = this._getFromMemoryCache(key);
      if (memoryCached) {
        this.stats.hits++;
        this.stats.memoryFallbackUsed++;
        logger.debug(`üíæ Memory cache HIT for key: ${key}`);
        return memoryCached;
      }

      // 3. Cache miss - –≤—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      this.stats.misses++;
      logger.debug(`üîÑ Cache MISS for key: ${key}, computing...`);
      
      const result = await computeFn();
      
      // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
      const ttl = this._calculateSmartTTL(key, options);
      
      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –∏ memory cache
      try {
        await this.redis.setex(key, ttl, JSON.stringify(result));
      } catch (redisError) {
        logger.warn(`Failed to save to Redis, using memory cache: ${redisError.message}`);
        // –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ memory cache
        this._saveToMemoryCache(key, result, ttl * 1000); // TTL –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      }
      
      const computeTime = Date.now() - startTime;
      this.stats.computeTime += computeTime;
      
      logger.debug(`üíæ Cached result for key: ${key}, TTL: ${ttl}s, compute time: ${computeTime}ms`);
      
      return result;
      
    } catch (error) {
      logger.error(`Cache error for key ${key}:`, error);
      
      // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º memory cache –µ—â–µ —Ä–∞–∑
      const memoryCached = this._getFromMemoryCache(key);
      if (memoryCached) {
        return memoryCached;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º computeFn –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ memory cache
      const result = await computeFn();
      this._saveToMemoryCache(key, result, this.memoryCacheTTL);
      return result;
    }
  }

  /**
   * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async getSemanticCache(text, companyId, computeFn, options = {}) {
    const normalizedText = this._normalizeText(text);
    const key = `intent_${normalizedText}_${companyId}`;
    
    return this.getOrCompute(key, computeFn, {
      ...options,
      type: 'semantic',
      originalText: text
    });
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  async getEntityCache(entityType, entityName, companyId, computeFn, options = {}) {
    const normalizedName = this._normalizeText(entityName);
    const key = `entity_${entityType}_${normalizedName}_${companyId}`;
    
    return this.getOrCompute(key, computeFn, {
      ...options,
      type: 'entity',
      entityType
    });
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º TTL
   */
  async getPopularCache(key, computeFn, options = {}) {
    const popularity = this._getPopularity(key);
    const adjustedOptions = {
      ...options,
      ttl: options.ttl * Math.max(1, Math.floor(popularity / 10)) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
    };
    
    return this.getOrCompute(key, computeFn, adjustedOptions);
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getBatch(keys, computeFn, options = {}) {
    await this.initPromise;
    
    const results = {};
    const missingKeys = [];
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    for (const key of keys) {
      try {
        const cached = await this.redis.get(key);
        if (cached) {
          results[key] = JSON.parse(cached);
          this.stats.hits++;
        } else {
          missingKeys.push(key);
          this.stats.misses++;
        }
      } catch (error) {
        logger.warn(`Error getting key ${key} from cache:`, error);
        missingKeys.push(key);
      }
    }
    
    // 2. –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (missingKeys.length > 0) {
      const computed = await computeFn(missingKeys);
      
      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      for (const key of missingKeys) {
        if (computed[key] !== undefined) {
          results[key] = computed[key];
          const ttl = this._calculateSmartTTL(key, options);
          await this.redis.setex(key, ttl, JSON.stringify(computed[key]));
        }
      }
    }
    
    return results;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
   */
  async invalidatePattern(pattern) {
    await this.initPromise;
    
    try {
      const keys = await this.redis.keys(pattern);
      if (keys.length > 0) {
        await this.redis.del(...keys);
        logger.info(`üóëÔ∏è Invalidated ${keys.length} cache keys matching pattern: ${pattern}`);
      }
    } catch (error) {
      logger.error(`Error invalidating pattern ${pattern}:`, error);
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async invalidateCompany(companyId) {
    await this.invalidatePattern(`*_${companyId}`);
    await this.invalidatePattern(`entity_*_${companyId}`);
    await this.invalidatePattern(`intent_*_${companyId}`);
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞
   */
  async warmup(companyId, commonQueries = []) {
    logger.info(`üî• Warming up cache for company ${companyId}`);
    
    const defaultQueries = [
      '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É',
      '—Ö–æ—á—É –º–∞–Ω–∏–∫—é—Ä',
      '–ø–æ–¥—Å—Ç—Ä–∏—á—å –±–æ—Ä–æ–¥—É',
      '—Å—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π'
    ];
    
    const queries = [...defaultQueries, ...commonQueries];
    
    for (const query of queries) {
      try {
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const key = `intent_${this._normalizeText(query)}_${companyId}`;
        await this.redis.setex(key, 7200, JSON.stringify({ 
          warmed: true, 
          query,
          timestamp: Date.now() 
        }));
      } catch (error) {
        logger.warn(`Error warming up query "${query}":`, error);
      }
    }
    
    logger.info(`‚úÖ Cache warmed up with ${queries.length} queries`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  getStats() {
    const hitRate = this.stats.hits + this.stats.misses > 0 
      ? Math.round((this.stats.hits / (this.stats.hits + this.stats.misses)) * 100)
      : 0;
    
    const avgComputeTime = this.stats.misses > 0 
      ? Math.round(this.stats.computeTime / this.stats.misses)
      : 0;
      
    return {
      ...this.stats,
      hitRate: `${hitRate}%`,
      avgComputeTime: `${avgComputeTime}ms`,
      popularKeys: Array.from(this.stats.popularKeys.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10)
    };
  }

  // =================== PRIVATE METHODS ===================

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  _normalizeText(text) {
    return text
      .toLowerCase()
      .trim()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '_');
  }

  /**
   * –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
   */
  _calculateSmartTTL(key, options) {
    const baseTTL = options.ttl || 3600; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const popularity = this._getPopularity(key);
    
    // –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ TTL
    const ttlMultipliers = {
      'semantic': 1.0,    // AI –∑–∞–ø—Ä–æ—Å—ã - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TTL
      'entity': 2.0,      // –°—É—â–Ω–æ—Å—Ç–∏ - –¥–æ–ª—å—à–µ –∂–∏–≤—É—Ç
      'popular': 3.0,     // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –µ—â–µ –¥–æ–ª—å—à–µ
      'static': 24.0      // –°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - 24 —á–∞—Å–∞
    };
    
    const typeMultiplier = ttlMultipliers[options.type] || 1.0;
    const popularityMultiplier = Math.max(1, Math.floor(popularity / 5));
    
    return Math.min(
      baseTTL * typeMultiplier * popularityMultiplier,
      86400 // –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
    );
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç memory leak
   */
  _updatePopularity(key) {
    const current = this.stats.popularKeys.get(key) || 0;
    this.stats.popularKeys.set(key, current + 1);
    
    // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leak
    // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 500 –∫–ª—é—á–µ–π (—Ä–∞–Ω—å—à–µ –±—ã–ª–æ 1000)
    if (this.stats.popularKeys.size > 500) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 100 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
      const sorted = Array.from(this.stats.popularKeys.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 100);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é Map –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
      this.stats.popularKeys.clear();
      this.stats.popularKeys = new Map(sorted);
      
      logger.debug(`Cleaned popularity cache, kept top ${sorted.length} keys`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
   */
  _getPopularity(key) {
    return this.stats.popularKeys.get(key) || 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ memory cache
   */
  _getFromMemoryCache(key) {
    const entry = this.memoryCache.get(key);
    if (!entry) return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() > entry.expiresAt) {
      this.memoryCache.delete(key);
      return null;
    }
    
    return entry.data;
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ memory cache
   */
  _saveToMemoryCache(key, data, ttl) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä memory cache
    if (this.memoryCache.size >= this.memoryCacheMaxSize) {
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      const toDelete = Math.floor(this.memoryCacheMaxSize / 4); // –£–¥–∞–ª—è–µ–º 25%
      const keys = Array.from(this.memoryCache.keys()).slice(0, toDelete);
      keys.forEach(k => this.memoryCache.delete(k));
      logger.debug(`Memory cache cleanup: removed ${toDelete} old entries`);
    }
    
    this.memoryCache.set(key, {
      data,
      expiresAt: Date.now() + (ttl || this.memoryCacheTTL),
      createdAt: Date.now()
    });
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ memory cache
   */
  _cleanupMemoryCache() {
    const now = Date.now();
    let cleaned = 0;
    
    this.memoryCache.forEach((entry, key) => {
      if (now > entry.expiresAt) {
        this.memoryCache.delete(key);
        cleaned++;
      }
    });
    
    if (cleaned > 0) {
      logger.debug(`Memory cache cleanup: removed ${cleaned} expired entries`);
    }
  }
  
  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  _cleanupStats() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ
    if (this.stats.hits > 1000000) {
      this.stats.hits = Math.floor(this.stats.hits / 10);
      this.stats.misses = Math.floor(this.stats.misses / 10);
      this.stats.computeTime = Math.floor(this.stats.computeTime / 10);
      this.stats.memoryFallbackUsed = Math.floor(this.stats.memoryFallbackUsed / 10);
      logger.info('Reset cache statistics to prevent overflow');
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ —Å –Ω–∏–∑–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é
    const threshold = 2; // –ú–∏–Ω–∏–º—É–º 2 –æ–±—Ä–∞—â–µ–Ω–∏—è —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è
    const keysToDelete = [];
    
    this.stats.popularKeys.forEach((count, key) => {
      if (count < threshold) {
        keysToDelete.push(key);
      }
    });
    
    keysToDelete.forEach(key => this.stats.popularKeys.delete(key));
    
    if (keysToDelete.length > 0) {
      logger.debug(`Removed ${keysToDelete.length} unpopular keys from statistics`);
    }
  }

  /**
   * Graceful shutdown
   */
  async destroy() {
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
    
    if (this.redis) {
      await this.redis.quit();
      logger.info('üí• Smart Cache destroyed');
    }
  }
}

// Singleton instance
module.exports = new SmartCache();