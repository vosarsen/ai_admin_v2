// src/services/ai-admin/index.js
const { supabase } = require('../../database/supabase');
const bookingService = require('../booking');
const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * AI –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
 * –ò–º–µ–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –∏ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏
 */
class AIAdmin {
  constructor() {
    this.contextStore = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async processMessage(message, phone, companyId = config.yclients.companyId) {
    logger.info(`üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${phone}: "${message}"`);

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
      const context = await this.getOrCreateContext(phone, companyId);

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
      const [company, client, services, staff] = await Promise.all([
        this.getCompanyInfo(companyId),
        this.getClientInfo(phone, companyId),
        this.getServices(companyId),
        this.getStaff(companyId)
      ]);

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      context.messages.push({ role: 'user', content: message, timestamp: new Date() });

      // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
      const prompt = this.buildPrompt({
        message,
        context,
        company,
        client,
        services,
        staff
      });

      // 5. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiResponse = await this.callAI(prompt);

      // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è AI
      const result = await this.processAIResponse(aiResponse, {
        phone,
        companyId,
        client,
        context
      });

      // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.messages.push({ role: 'assistant', content: result.response, timestamp: new Date() });
      await this.saveContext(phone, context);

      return result;

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return {
        success: false,
        response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.',
        error: error.message
      };
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
   */
  buildPrompt({ message, context, company, client, services, staff }) {
    const lastMessages = context.messages.slice(-10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    
    return `–¢—ã - AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã "${company.title}".

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${company.title}
- –ê–¥—Ä–µ—Å: ${company.address}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${company.phone}
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${JSON.stringify(company.working_hours)}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
- –ò–º—è: ${client.name}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤: ${client.visit_count}
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${client.last_visit_date || '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'}
- –õ—é–±–∏–º—ã–µ —É—Å–ª—É–≥–∏: ${client.last_services ? client.last_services.map(s => s.service_name).join(', ') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
- –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: ${client.favorite_staff_ids ? client.favorite_staff_ids.join(', ') : '–ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π'}

–î–û–°–¢–£–ü–ù–´–ï –£–°–õ–£–ì–ò:
${services.map(s => `- ${s.title} (${s.price_min}‚ÇΩ, ${s.duration} –º–∏–Ω)`).join('\n')}

–î–û–°–¢–£–ü–ù–´–ï –ú–ê–°–¢–ï–†–ê:
${staff.map(s => `- ${s.name} (${s.specialization}, —Ä–µ–π—Ç–∏–Ω–≥: ${s.rating || '–Ω–µ—Ç'})`).join('\n')}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
${lastMessages.map(m => `${m.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}: ${m.content}`).join('\n')}

–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–¢–í–û–ò –ó–ê–î–ê–ß–ò:
1. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º
2. –ü–æ–º–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É
3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –≤—ã—è—Å–Ω–∏:
   - –ö–∞–∫—É—é —É—Å–ª—É–≥—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
   - –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
   - –ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø—Ä–µ–¥–ª–æ–∂–∏ –ª—É—á—à–∏—Ö)
4. –ö–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏, —É–∫–∞–∂–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É:
   [CREATE_BOOKING: service_id=ID, staff_id=ID, date=YYYY-MM-DD, time=HH:MM]

–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç "—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞" –∏ —Ç.–¥. - –ø–µ—Ä–µ–≤–µ–¥–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–ª –º–∞—Å—Ç–µ—Ä–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—à–∏ –∫ –ª—é–±–æ–º—É —Å–≤–æ–±–æ–¥–Ω–æ–º—É
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
- –ë—É–¥—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º: –ø—Ä–µ–¥–ª–∞–≥–∞–π —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏

–û—Ç–≤–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—É –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É:`;
  }

  /**
   * –í—ã–∑–æ–≤ AI API
   */
  async callAI(prompt) {
    const aiService = require('../ai');
    const response = await aiService._callAI(prompt);
    return response;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
   */
  async processAIResponse(aiResponse, { phone, companyId, client, context }) {
    logger.info('ü§ñ AI –æ—Ç–≤–µ—Ç:', aiResponse);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const bookingMatch = aiResponse.match(/\[CREATE_BOOKING: service_id=(\d+), staff_id=(\d+), date=([\d-]+), time=([\d:]+)\]/);
    
    if (bookingMatch) {
      const [, serviceId, staffId, date, time] = bookingMatch;
      
      logger.info('üìÖ AI —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å:', { serviceId, staffId, date, time });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ booking service
      const bookingResult = await bookingService.createBooking({
        client: {
          phone: client.phone,
          name: client.name,
          email: client.email
        },
        services: [parseInt(serviceId)],
        staff_id: parseInt(staffId),
        datetime: `${date} ${time}:00`,
        comment: '–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ WhatsApp'
      }, companyId);

      if (bookingResult.success) {
        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const cleanResponse = aiResponse.replace(bookingMatch[0], '').trim();
        return {
          success: true,
          response: cleanResponse + '\n\n‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
          booking: bookingResult.data
        };
      } else {
        return {
          success: false,
          response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.',
          error: bookingResult.error
        };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã
    const needSlots = aiResponse.toLowerCase().includes('—Å–≤–æ–±–æ–¥–Ω') || 
                     aiResponse.toLowerCase().includes('–¥–æ—Å—Ç—É–ø–Ω') ||
                     aiResponse.toLowerCase().includes('—Å–ª–æ—Ç');

    if (needSlots && context.lastIntent === 'booking') {
      // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
      const slots = await this.findAvailableSlots(context);
      if (slots.length > 0) {
        const slotsText = this.formatSlots(slots);
        return {
          success: true,
          response: aiResponse + '\n\n' + slotsText
        };
      }
    }

    return {
      success: true,
      response: aiResponse
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  async findAvailableSlots(context) {
    const { preferredDate, preferredService, preferredStaff } = context;
    
    const result = await bookingService.findSuitableSlot({
      serviceId: preferredService,
      staffId: preferredStaff,
      preferredDate: preferredDate || new Date().toISOString().split('T')[0]
    });

    return result.success ? result.data : [];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatSlots(slots) {
    if (!slots || slots.length === 0) {
      return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.';
    }

    const grouped = {};
    slots.forEach(slot => {
      const staffName = slot.staff_name || '–ú–∞—Å—Ç–µ—Ä';
      if (!grouped[staffName]) {
        grouped[staffName] = [];
      }
      grouped[staffName].push(slot.time || slot.datetime.split(' ')[1]);
    });

    let text = 'üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n';
    for (const [staff, times] of Object.entries(grouped)) {
      text += `üë§ ${staff}:\n`;
      text += times.map(time => `‚Ä¢ ${time}`).join('\n');
      text += '\n\n';
    }

    return text;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async getCompanyInfo(companyId) {
    const { data, error } = await supabase
      .from('companies')
      .select('*')
      .eq('company_id', companyId)
      .single();

    if (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏:', error);
      return { title: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', address: '', phone: '' };
    }

    return data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
   */
  async getClientInfo(phone, companyId) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = phone.replace(/\D/g, '');
    
    const { data, error } = await supabase
      .from('clients')
      .select('*')
      .eq('company_id', companyId)
      .or(`phone.eq.${normalizedPhone},raw_phone.eq.${normalizedPhone}`)
      .single();

    if (error || !data) {
      logger.info('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const { data: newClient } = await supabase
        .from('clients')
        .insert({
          company_id: companyId,
          phone: normalizedPhone,
          raw_phone: phone,
          name: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
          created_by_ai: true,
          source: 'whatsapp'
        })
        .select()
        .single();
      
      return newClient || { name: '–ö–ª–∏–µ–Ω—Ç', phone: normalizedPhone };
    }

    return data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
   */
  async getServices(companyId) {
    const { data, error } = await supabase
      .from('services')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .eq('is_bookable', true)
      .order('weight', { ascending: false })
      .limit(20);

    if (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥:', error);
      return [];
    }

    return data || [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
   */
  async getStaff(companyId) {
    const { data, error } = await supabase
      .from('staff')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .eq('is_bookable', true)
      .order('rating', { ascending: false });

    if (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
      return [];
    }

    return data || [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
   */
  async getOrCreateContext(phone, companyId) {
    const contextKey = `${phone}_${companyId}`;
    
    if (this.contextStore.has(contextKey)) {
      return this.contextStore.get(contextKey);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    const { data } = await supabase
      .from('dialog_contexts')
      .select('*')
      .eq('user_id', phone)
      .eq('company_id', companyId)
      .order('updated_at', { ascending: false })
      .limit(1)
      .single();

    if (data) {
      const context = {
        messages: data.messages || [],
        state: data.state,
        data: data.data || {},
        lastActivity: new Date(data.updated_at)
      };
      this.contextStore.set(contextKey, context);
      return context;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const newContext = {
      messages: [],
      state: 'INIT',
      data: {},
      lastActivity: new Date()
    };

    this.contextStore.set(contextKey, newContext);
    return newContext;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
   */
  async saveContext(phone, context) {
    const { error } = await supabase
      .from('dialog_contexts')
      .upsert({
        user_id: phone,
        company_id: context.companyId || config.yclients.companyId,
        messages: context.messages,
        state: context.state,
        data: context.data,
        updated_at: new Date(),
        message_count: context.messages.length
      });

    if (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏
   */
  cleanupOldContexts() {
    const now = Date.now();
    const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

    for (const [key, context] of this.contextStore.entries()) {
      if (now - context.lastActivity.getTime() > maxAge) {
        this.contextStore.delete(key);
      }
    }
  }
}

module.exports = new AIAdmin();