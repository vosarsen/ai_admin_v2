const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');
const { YclientsClient } = require('../../integrations/yclients/client');
const whatsappClient = require('../../integrations/whatsapp/client');
const config = require('../../config');
const businessTypes = require('../../config/business-types');
const { detectBusinessType, defaultEmojis } = businessTypes;

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (date) => {
  const d = new Date(date);
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', 
                  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
  return `${d.getDate()} ${months[d.getMonth()]}`;
};

const formatTime = (date) => {
  const d = new Date(date);
  return `${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;
};

/**
 * –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–µ–π –≤ YClients
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–ø–∏—Å—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
 */
class BookingMonitorService {
  constructor() {
    this.yclientsClient = new YclientsClient();
    this.whatsappClient = whatsappClient;
    this.checkInterval = config.bookingMonitor?.checkInterval || 60000; // 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.isRunning = false;
    this.intervalId = null;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  start() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è Booking monitor is already running');
      return;
    }

    logger.info('üöÄ Starting booking monitor service (new version)');
    this.isRunning = true;

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.checkBookings();

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    this.intervalId = setInterval(() => {
      this.checkBookings();
    }, this.checkInterval);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stop() {
    if (!this.isRunning) {
      logger.warn('‚ö†Ô∏è Booking monitor is not running');
      return;
    }

    logger.info('üõë Stopping booking monitor service');
    this.isRunning = false;

    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
   */
  async checkBookings() {
    try {
      logger.debug('üîç Checking bookings for changes...');

      const companyId = config.yclients.companyId;

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
      const today = new Date();
      const nextWeek = new Date();
      nextWeek.setDate(nextWeek.getDate() + 7);

      const formatDateForAPI = (date) => {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
      };

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ YClients
      const result = await this.yclientsClient.getRecords(companyId, {
        start_date: formatDateForAPI(today),
        end_date: formatDateForAPI(nextWeek)
      });

      const records = result.data || [];
      
      if (records.length === 0) {
        logger.debug('‚úÖ No bookings found');
        return;
      }

      logger.info(`üìã Found ${records.length} bookings to check`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
      for (const record of records) {
        await this.processBooking(record);
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        // await this.checkAndSendReminders(record);
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ booking_states (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      await supabase
        .from('booking_states')
        .delete()
        .lt('datetime', thirtyDaysAgo.toISOString());

    } catch (error) {
      logger.error('‚ùå Error checking bookings:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   */
  async processBooking(record) {
    try {
      const recordId = record.id.toString();
      const now = new Date();
      const recordDate = new Date(record.datetime);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ—à–ª–æ–º
      if (recordDate < now) {
        logger.debug(`‚è≠Ô∏è Skipping past booking ${recordId} at ${record.datetime}`);
        return;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ø—Ä–∏—à–µ–ª" (attendance = 1)
      if (record.attendance === 1) {
        logger.debug(`‚è≠Ô∏è Skipping completed booking ${recordId} (client attended)`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
      const { data: previousState } = await supabase
        .from('booking_states')
        .select('*')
        .eq('yclients_record_id', recordId)
        .single();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const currentState = {
        yclients_record_id: recordId,
        company_id: record.company_id || config.yclients.companyId,
        attendance: record.attendance || 0,
        datetime: record.datetime,
        services: record.services || [],
        staff_id: record.staff?.id || record.staff_id,
        staff_name: record.staff?.name || '',
        client_phone: this.formatPhoneNumber(record.client?.phone || record.phone || ''),
        client_name: record.client?.name || '',
        price: record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0,
        last_checked_at: now.toISOString()
      };

      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ –ë–î - —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
      if (!previousState) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await supabase
          .from('booking_states')
          .insert(currentState);

        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å attendance = 0 –∏–ª–∏ 2
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É (–Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
        if (record.attendance !== 2 && record.attendance !== 0) {
          logger.debug(`üìù New booking ${recordId} saved, but no notification (attendance=${record.attendance})`);
        } else {
          logger.debug(`üìù New booking ${recordId} saved without notification`);
        }
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const changes = this.detectChanges(previousState, currentState);

      if (changes.length === 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_checked_at
        await supabase
          .from('booking_states')
          .update({ last_checked_at: now.toISOString() })
          .eq('yclients_record_id', recordId);
        
        logger.debug(`‚úÖ No changes in booking ${recordId}`);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      const updateData = {
        ...currentState,
        last_attendance: previousState.attendance,
        last_datetime: previousState.datetime,
        last_services: previousState.services,
        last_staff_id: previousState.staff_id,
        updated_at: now.toISOString()
      };

      await supabase
        .from('booking_states')
        .update(updateData)
        .eq('yclients_record_id', recordId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      await this.sendChangeNotifications(record, changes, previousState);

    } catch (error) {
      logger.error(`‚ùå Error processing booking ${record.id}:`, error);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
   */
  detectChanges(previousState, currentState) {
    const changes = [];

    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã attendance
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" (0->2, null->2, undefined->2)
    const prevAttendance = previousState.attendance ?? 0;
    const currAttendance = currentState.attendance ?? 0;
    
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å —Å "–æ–∂–∏–¥–∞–µ—Ç—Å—è" –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    if ((prevAttendance === 0 || prevAttendance === null || prevAttendance === undefined) && 
        currAttendance === 2) {
      logger.debug('üìù Booking confirmed (0/null->2), no notification needed');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–æ–º–µ —Å—Ç–∞—Ç—É—Å–∞
      const hasOtherChanges = this.hasOtherChanges(previousState, currentState);
      if (!hasOtherChanges) {
        return []; // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      }
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å "–ø—Ä–∏—à–µ–ª"
    if (currAttendance === 1) {
      logger.debug('üìù Client attended (->1), no notification needed');
      return [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É (attendance –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ -1)
    if (prevAttendance !== -1 && currAttendance === -1) {
      changes.push({
        type: 'booking_cancelled',
        description: '–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const prevTime = new Date(previousState.datetime).getTime();
    const currTime = new Date(currentState.datetime).getTime();
    if (prevTime !== currTime) {
      changes.push({
        type: 'booking_time_changed',
        description: '–ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏',
        oldValue: previousState.datetime,
        newValue: currentState.datetime
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
    if (previousState.staff_id !== currentState.staff_id && currentState.staff_id) {
      changes.push({
        type: 'booking_staff_changed',
        description: '–ò–∑–º–µ–Ω–µ–Ω –º–∞—Å—Ç–µ—Ä',
        oldValue: previousState.staff_name,
        newValue: currentState.staff_name
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥
    const prevServices = JSON.stringify(previousState.services || []);
    const currServices = JSON.stringify(currentState.services || []);
    if (prevServices !== currServices) {
      changes.push({
        type: 'booking_service_changed',
        description: '–ò–∑–º–µ–Ω–µ–Ω—ã —É—Å–ª—É–≥–∏',
        oldValue: previousState.services,
        newValue: currentState.services
      });
    }

    return changes;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–º–∏–º–æ —Å—Ç–∞—Ç—É—Å–∞ attendance
   */
  hasOtherChanges(previousState, currentState) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    const prevTime = new Date(previousState.datetime).getTime();
    const currTime = new Date(currentState.datetime).getTime();
    if (prevTime !== currTime) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    if (previousState.staff_id !== currentState.staff_id) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏
    const prevServices = JSON.stringify(previousState.services || []);
    const currServices = JSON.stringify(currentState.services || []);
    if (prevServices !== currServices) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
    if (previousState.price !== currentState.price) return true;

    return false;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  async sendChangeNotifications(record, changes, previousState) {
    const phone = this.formatPhoneNumber(record.client?.phone || record.phone);
    
    if (!phone) {
      logger.warn(`‚ö†Ô∏è No phone number for booking ${record.id}`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–µ–¥–∞–≤–Ω–æ
    const { data: recentNotifications } = await supabase
      .from('booking_notifications')
      .select('*')
      .eq('yclients_record_id', record.id.toString())
      .gte('sent_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      .order('sent_at', { ascending: false });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let message = '';
    let notificationType = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const isCancelled = changes.some(c => c.type === 'booking_cancelled');
    const timeChanged = changes.find(c => c.type === 'booking_time_changed');
    const staffChanged = changes.find(c => c.type === 'booking_staff_changed');
    const serviceChanged = changes.find(c => c.type === 'booking_service_changed');

    if (isCancelled) {
      // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
      notificationType = 'booking_cancelled';
      message = await this.formatCancellationMessage(record, record.company_id || config.yclients.companyId);
    } else if (timeChanged || staffChanged || serviceChanged) {
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–ø–∏—Å–∏
      notificationType = 'booking_changed';
      message = await this.formatChangeMessage(record, changes, previousState, record.company_id || config.yclients.companyId);
    }

    if (!message) {
      logger.debug(`üìù No notification needed for changes in booking ${record.id}`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
    const isDuplicate = recentNotifications?.some(n => 
      n.notification_type_new === notificationType
    );

    if (isDuplicate) {
      logger.debug(`‚è≠Ô∏è Skipping duplicate notification for booking ${record.id}`);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await this.whatsappClient.sendMessage(phone, message);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
      await supabase
        .from('booking_notifications')
        .insert({
          yclients_record_id: record.id.toString(),
          phone: phone,
          notification_type: notificationType, // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          notification_type_new: notificationType,
          message: message,
          sent_at: new Date().toISOString(),
          company_id: record.company_id || config.yclients.companyId
        });

      logger.info(`‚úÖ ${notificationType} notification sent for booking ${record.id} to ${phone}`);
    } catch (error) {
      logger.error(`‚ùå Failed to send notification for booking ${record.id}:`, error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
   */
  async formatCancellationMessage(record, companyId) {
    const date = formatDate(new Date(record.datetime));
    const time = formatTime(new Date(record.datetime));
    const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';

    return `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞

${date} –≤ ${time}
${services}

–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  async formatChangeMessage(record, changes, previousState, companyId) {
    const date = formatDate(new Date(record.datetime));
    const time = formatTime(new Date(record.datetime));
    const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';
    const staff = record.staff?.name || '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';
    const price = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;

    let changesList = [];

    changes.forEach(change => {
      if (change.type === 'booking_time_changed') {
        const oldDate = formatDate(new Date(change.oldValue));
        const oldTime = formatTime(new Date(change.oldValue));
        changesList.push(`–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ: ${oldDate} ${oldTime} ‚Üí ${date} ${time}`);
      } else if (change.type === 'booking_staff_changed') {
        changesList.push(`–ú–∞—Å—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω: ${change.oldValue || '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚Üí ${staff}`);
      } else if (change.type === 'booking_service_changed') {
        changesList.push(`–£—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω–µ–Ω—ã`);
      }
    });

    return `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞

${changesList.join('\n')}

–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
${date} –≤ ${time}
${services}
–ú–∞—Å—Ç–µ—Ä: ${staff}
${price > 0 ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n` : ''}
–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ!`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å–∞ (—ç–º–æ–¥–∑–∏, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é)
   */
  async getBusinessConfig(companyId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
      const { data: company } = await supabase
        .from('companies')
        .select('name, business_type')
        .eq('yclients_id', companyId)
        .single();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
      let businessType = company?.business_type;
      if (!businessType && company?.name) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        const { data: services } = await supabase
          .from('services')
          .select('title')
          .eq('company_id', companyId)
          .limit(10);
        
        businessType = detectBusinessType(company.name, services || []);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
      const config = businessTypes[businessType] || businessTypes.beauty;
      return {
        emojis: config.emojis || defaultEmojis,
        terminology: config.terminology || businessTypes.beauty.terminology,
        businessType: businessType || 'beauty'
      };
    } catch (error) {
      logger.warn('Failed to get business config, using defaults', error);
      return {
        emojis: defaultEmojis,
        terminology: businessTypes.beauty.terminology,
        businessType: 'beauty'
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  formatPhoneNumber(phone) {
    if (!phone) return '';
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    let cleaned = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8') && cleaned.length === 11) {
      cleaned = '7' + cleaned.slice(1);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º
    if (!cleaned.startsWith('7') && cleaned.length === 10) {
      cleaned = '7' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
   */
  async checkAndSendReminders(record) {
    try {
      const recordId = record.id.toString();
      const now = new Date();
      const recordDate = new Date(record.datetime);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏
      if (recordDate <= now) {
        return;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ø—Ä–∏—à–µ–ª"
      if (record.attendance === -1 || record.attendance === 1) {
        return;
      }

      const phone = this.formatPhoneNumber(record.client?.phone || record.phone);
      if (!phone) {
        return;
      }

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(23, 59, 59, 999);
      
      const { data: todayVisits } = await supabase
        .from('booking_states')
        .select('*')
        .eq('client_phone', phone)
        .gte('datetime', today.toISOString())
        .lt('datetime', tomorrow.toISOString())
        .eq('attendance', 1);
      
      if (todayVisits && todayVisits.length > 0) {
        logger.debug(`‚è≠Ô∏è Skipping reminder for ${phone} - client visited today`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
      const { data: sentReminders } = await supabase
        .from('booking_notifications')
        .select('notification_type_new, sent_at')
        .eq('yclients_record_id', recordId)
        .in('notification_type_new', ['reminder_day_before', 'reminder_2hours'])
        .order('sent_at', { ascending: false });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
      const todayStart = new Date();
      todayStart.setHours(0, 0, 0, 0);
      
      const sentDayBeforeToday = sentReminders?.some(r => 
        r.notification_type_new === 'reminder_day_before' && 
        new Date(r.sent_at) > todayStart
      );
      
      const sent2HoursToday = sentReminders?.some(r => 
        r.notification_type_new === 'reminder_2hours' && 
        new Date(r.sent_at) > todayStart
      );
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const timeDiff = recordDate - now;
      const hoursUntil = timeDiff / (1000 * 60 * 60);
      const daysUntil = Math.floor(hoursUntil / 24);
      
      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –º–µ–∂–¥—É 19:00 –∏ 21:00)
      const currentHour = now.getHours();
      const isEvening = currentHour >= 19 && currentHour <= 21;
      const isTomorrow = daysUntil === 0 && recordDate.getDate() !== now.getDate() || daysUntil === 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
      if (isEvening && 
          isTomorrow && 
          !sentDayBeforeToday) {
        
        await this.sendReminderNotification(record, 'day_before', phone);
      }
      
      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ (—Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å –∑–∞–ø–∏—Å–∏)
      const isToday = recordDate.toDateString() === now.toDateString();
      if (isToday &&
          hoursUntil <= 2.5 && 
          hoursUntil >= 1.5 && 
          !sent2HoursToday) {
        
        await this.sendReminderNotification(record, '2hours', phone);
      }
      
    } catch (error) {
      logger.error(`‚ùå Error checking reminders for booking ${record.id}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async getCompanyInfo(companyId) {
    try {
      const { data: company } = await supabase
        .from('companies')
        .select('address')
        .eq('yclients_id', companyId)
        .single();
      
      return company;
    } catch (error) {
      logger.warn('Failed to get company info', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏
   */
  async sendReminderNotification(record, reminderType, phone) {
    try {
      const recordDate = new Date(record.datetime);
      const now = new Date();
      const date = formatDate(recordDate);
      const time = formatTime(recordDate);
      const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';
      const staff = record.staff?.name || '–ú–∞—Å—Ç–µ—Ä';
      const price = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const companyInfo = await this.getCompanyInfo(record.company_id || config.yclients.companyId);
      const address = companyInfo?.address || '';
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å–∞ (—ç–º–æ–¥–∑–∏ –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é)
      const businessConfig = await this.getBusinessConfig(record.company_id || config.yclients.companyId);
      const { emojis = defaultEmojis, terminology = businessTypes.beauty.terminology } = businessConfig || {};
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
      const isToday = recordDate.toDateString() === now.toDateString();
      const dayText = isToday ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞';
      
      let message = '';
      let notificationType = '';
      
      if (reminderType === 'day_before') {
        notificationType = 'reminder_day_before';
        message = `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥—É—Ç:

${date} –≤ ${time}
${services}
–ú–∞—Å—Ç–µ—Ä: ${staff}
${price > 0 ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n` : ''}
${address ? `–ê–¥—Ä–µ—Å: ${address}\n` : ''}
–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.`;
      } else if (reminderType === '2hours') {
        notificationType = 'reminder_2hours';
        message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –≤–∞—Å –∂–¥—É—Ç.

–°–µ–≥–æ–¥–Ω—è –≤ ${time}
${services}
–ú–∞—Å—Ç–µ—Ä: ${staff}
${price > 0 ? `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n` : ''}
${address ? `–ê–¥—Ä–µ—Å: ${address}\n` : ''}
–î–æ –≤—Å—Ç—Ä–µ—á–∏!`;
      }
      
      if (!message) return;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.whatsappClient.sendMessage(phone, message);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
      await supabase
        .from('booking_notifications')
        .insert({
          yclients_record_id: record.id.toString(),
          phone: phone,
          notification_type: notificationType, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          notification_type_new: notificationType,
          message: message,
          sent_at: new Date().toISOString(),
          company_id: record.company_id || config.yclients.companyId
        });
      
      logger.info(`‚úÖ ${notificationType} sent for booking ${record.id} to ${phone}`);
      
    } catch (error) {
      logger.error(`‚ùå Failed to send reminder for booking ${record.id}:`, error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const bookingMonitor = new BookingMonitorService();

module.exports = bookingMonitor;