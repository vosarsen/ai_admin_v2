const logger = require('../../utils/logger');
const { supabase } = require('../../database/supabase');
const YclientsClient = require('../../integrations/yclients/client');
const WhatsAppClient = require('../../integrations/whatsapp/client');
const config = require('../../config');

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (date) => {
  const d = new Date(date);
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', 
                  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
  return `${d.getDate()} ${months[d.getMonth()]}`;
};

const formatTime = (date) => {
  const d = new Date(date);
  return `${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;
};

/**
 * –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ YClients
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º
 */
class BookingMonitorService {
  constructor() {
    this.yclientsClient = new YclientsClient();
    this.whatsappClient = new WhatsAppClient();
    this.checkInterval = config.bookingMonitor?.checkInterval || 60000; // 1 –º–∏–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.isRunning = false;
    this.intervalId = null;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  start() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è Booking monitor is already running');
      return;
    }

    logger.info('üöÄ Starting booking monitor service');
    this.isRunning = true;

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.checkNewBookings();

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    this.intervalId = setInterval(() => {
      this.checkNewBookings();
    }, this.checkInterval);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stop() {
    if (!this.isRunning) {
      logger.warn('‚ö†Ô∏è Booking monitor is not running');
      return;
    }

    logger.info('üõë Stopping booking monitor service');
    this.isRunning = false;

    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
   */
  async checkNewBookings() {
    try {
      logger.debug('üîç Checking for new bookings...');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –ë–î
      const { data: lastCheck } = await supabase
        .from('booking_monitor_state')
        .select('last_checked_at, company_id')
        .single();

      const lastCheckedAt = lastCheck?.last_checked_at || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
      const companyId = lastCheck?.company_id || config.yclients.companyId;

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
      const today = new Date();
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);

      logger.debug(`üìÖ Checking bookings for today and tomorrow`);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ YClients
      const formatDateForAPI = (date) => {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
      };

      const records = await this.yclientsClient.getRecords({
        start_date: formatDateForAPI(today),
        end_date: formatDateForAPI(tomorrow)
      }, companyId);

      if (!records.data || records.data.length === 0) {
        logger.debug('‚úÖ No bookings found');
        await this.updateLastCheckedTime();
        return;
      }

      logger.info(`üìã Found ${records.data.length} bookings to check`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const newRecords = records.data.filter(record => {
        const createdAt = new Date(record.created || record.datetime);
        return createdAt > new Date(lastCheckedAt);
      });

      if (newRecords.length === 0) {
        logger.debug('‚úÖ No new bookings found');
        await this.updateLastCheckedTime();
        return;
      }

      logger.info(`üìã Found ${newRecords.length} new bookings to process`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      for (const record of newRecords) {
        await this.processNewBooking(record);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.updateLastCheckedTime();

    } catch (error) {
      logger.error('‚ùå Error checking new bookings:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
   */
  async processNewBooking(record) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
      const { data: existingNotification } = await supabase
        .from('booking_notifications')
        .select('id')
        .eq('yclients_record_id', record.id)
        .single();

      if (existingNotification) {
        logger.debug(`‚úÖ Notification already sent for booking ${record.id}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
      const { data: ourBooking } = await supabase
        .from('bookings')
        .select('id')
        .eq('yclients_record_id', record.id)
        .single();

      if (ourBooking) {
        logger.debug(`‚úÖ Booking ${record.id} was created by our bot, skipping notification`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
      const phone = record.client?.phone || record.phone;
      if (!phone) {
        logger.warn(`‚ö†Ô∏è No phone number for booking ${record.id}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
      const createdAt = new Date(record.created || record.datetime);
      const now = new Date();
      const timeSinceCreation = now - createdAt;
      const notificationDelay = config.bookingMonitor?.notificationDelay || 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      if (timeSinceCreation < notificationDelay) {
        logger.debug(`‚è±Ô∏è Booking ${record.id} is too fresh, waiting ${notificationDelay - timeSinceCreation}ms more`);
        // –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º —Å–≤–µ–∂–∞—è, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
        return;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = this.formatPhoneNumber(phone);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendBookingNotification(record, formattedPhone);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
      await supabase
        .from('booking_notifications')
        .insert({
          yclients_record_id: record.id,
          phone: formattedPhone,
          sent_at: new Date().toISOString(),
          booking_data: record
        });

      logger.info(`‚úÖ Notification sent for booking ${record.id} to ${formattedPhone}`);

    } catch (error) {
      logger.error(`‚ùå Error processing booking ${record.id}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏
   */
  async sendBookingNotification(record, phone) {
    const date = formatDate(new Date(record.datetime));
    const time = formatTime(new Date(record.datetime));
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
    const services = record.services?.map(s => s.title).join(', ') || '–£—Å–ª—É–≥–∞';
    const staff = record.staff?.name || '–ú–∞—Å—Ç–µ—Ä';
    const price = record.services?.reduce((sum, s) => sum + (s.cost || 0), 0) || 0;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const { data: company } = await supabase
      .from('companies')
      .select('name, address')
      .eq('id', record.company_id)
      .single();

    const companyName = company?.name || '–°–∞–ª–æ–Ω';
    const address = company?.address || '';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `‚úÖ *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:*
üè¢ ${companyName}
üìÖ ${date}
üïê ${time}
üíá ${services}
üë§ ${staff}
${price > 0 ? `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n` : ''}${address ? `üìç ${address}\n` : ''}
üí¨ _–ñ–¥—ë–º –≤–∞—Å! –ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ._

ü§ñ _–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞_`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp
    await this.whatsappClient.sendMessage(phone, message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  formatPhoneNumber(phone) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    let cleaned = phone.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (cleaned.startsWith('8') && cleaned.length === 11) {
      cleaned = '7' + cleaned.slice(1);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º
    if (!cleaned.startsWith('7') && cleaned.length === 10) {
      cleaned = '7' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async updateLastCheckedTime() {
    const now = new Date().toISOString();
    
    await supabase
      .from('booking_monitor_state')
      .upsert({
        id: 1,
        last_checked_at: now,
        company_id: config.yclients.companyId
      });
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const bookingMonitor = new BookingMonitorService();

module.exports = bookingMonitor;