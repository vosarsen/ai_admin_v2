// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è AI Admin v2 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å –ë–î
const logger = require('../../utils/logger');
const { loadFullContext, invalidateCache, getStats } = require('../../database/optimized-supabase');
const BookingService = require('../booking/booking-service');
const { getBusinessConfig } = require('../../config/business-types');
const CircuitBreaker = require('opossum');

class OptimizedAIAdminV2 {
  constructor() {
    this.bookingService = new BookingService();
    
    // Circuit breaker –¥–ª—è AI –≤—ã–∑–æ–≤–æ–≤
    this.aiCircuitBreaker = new CircuitBreaker(
      this.callAI.bind(this),
      {
        timeout: 30000,
        errorThresholdPercentage: 50,
        resetTimeout: 60000,
        volumeThreshold: 5
      }
    );
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.stats = {
      totalRequests: 0,
      cacheHits: 0,
      avgResponseTime: 0,
      contextLoadTime: [],
      aiCallTime: []
    };
  }

  async processMessage(message, from, companyId) {
    const startTime = Date.now();
    this.stats.totalRequests++;
    
    try {
      logger.info(`üöÄ Optimized AI Admin v2 processing: "${message}" from ${from}`);
      
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
      const contextStart = Date.now();
      const context = await loadFullContext(from, companyId);
      const contextTime = Date.now() - contextStart;
      
      this.stats.contextLoadTime.push(contextTime);
      if (this.stats.contextLoadTime.length > 100) {
        this.stats.contextLoadTime.shift();
      }
      
      logger.debug(`Context loaded in ${contextTime}ms`);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
      const businessType = this.detectBusinessType(context.company);
      const businessConfig = getBusinessConfig(businessType);
      
      // 3. –°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const prompt = this.buildOptimizedPrompt(message, context, businessConfig);
      
      // 4. –í—ã–∑—ã–≤–∞–µ–º AI —á–µ—Ä–µ–∑ circuit breaker
      const aiStart = Date.now();
      const aiResponse = await this.aiCircuitBreaker.fire(prompt);
      const aiTime = Date.now() - aiStart;
      
      this.stats.aiCallTime.push(aiTime);
      if (this.stats.aiCallTime.length > 100) {
        this.stats.aiCallTime.shift();
      }
      
      // 5. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      const commands = this.extractCommands(aiResponse);
      const results = await this.executeCommands(commands, context, companyId);
      
      // 6. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const finalResponse = this.formatResponse(aiResponse, results);
      
      const totalTime = Date.now() - startTime;
      logger.info(`‚úÖ Optimized processing completed in ${totalTime}ms (context: ${contextTime}ms, AI: ${aiTime}ms)`);
      
      return finalResponse;
      
    } catch (error) {
      logger.error('Error in optimized AI Admin v2:', error);
      throw error;
    }
  }

  buildOptimizedPrompt(message, context, businessConfig) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
    const relevantServices = this.filterRelevantServices(context.services, message);
    const availableStaff = this.filterAvailableStaff(context.staff, context.schedules);
    
    return `–¢—ã AI-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${businessConfig.terminology.businessType}.
    
–ö–û–ù–¢–ï–ö–°–¢:
- –ö–ª–∏–µ–Ω—Ç: ${context.client?.name || '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'} (${context.client?.visit_count || 0} –≤–∏–∑–∏—Ç–æ–≤)
- –õ—é–±–∏–º—ã–µ —É—Å–ª—É–≥–∏: ${this.getClientFavorites(context.client)}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ ${businessConfig.terminology.services} (—Ç–æ–ø-10): ${this.formatServices(relevantServices.slice(0, 10))}
- –†–∞–±–æ—Ç–∞—é—â–∏–µ ${businessConfig.terminology.specialists}: ${this.formatStaff(availableStaff)}

–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:
[SEARCH_SLOTS service_name: –Ω–∞–∑–≤–∞–Ω–∏–µ, staff_name: –∏–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), date: –¥–∞—Ç–∞, time_preference: —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä]
[CREATE_BOOKING service_id: ID, staff_id: ID, date: –¥–∞—Ç–∞, time: –≤—Ä–µ–º—è]
[SHOW_PRICES category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)]

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.`;
  }

  filterRelevantServices(services, message) {
    if (!services || !message) return services;
    
    const keywords = message.toLowerCase().split(' ');
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    return services.sort((a, b) => {
      const aRelevance = keywords.filter(k => 
        a.title.toLowerCase().includes(k) || 
        a.category_title?.toLowerCase().includes(k)
      ).length;
      
      const bRelevance = keywords.filter(k => 
        b.title.toLowerCase().includes(k) || 
        b.category_title?.toLowerCase().includes(k)
      ).length;
      
      return bRelevance - aRelevance || b.weight - a.weight;
    });
  }

  filterAvailableStaff(staff, schedules) {
    if (!staff || !schedules) return staff;
    
    const today = new Date().toISOString().split('T')[0];
    const workingToday = new Set(
      schedules
        .filter(s => s.date === today && s.is_working)
        .map(s => s.staff_id)
    );
    
    return staff.filter(s => workingToday.has(s.yclients_id));
  }

  getClientFavorites(client) {
    if (!client?.last_service_ids?.length) return '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    return client.last_service_ids.slice(0, 3).join(', ');
  }

  formatServices(services) {
    if (!services?.length) return '–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥';
    return services.map(s => 
      `${s.title} (${s.price_min}-${s.price_max}‚ÇΩ, ${s.duration}–º–∏–Ω)`
    ).join(', ');
  }

  formatStaff(staff) {
    if (!staff?.length) return '–≤—Å–µ –∑–∞–Ω—è—Ç—ã';
    return staff.map(s => 
      `${s.name}${s.rating ? ` ‚≠ê${s.rating}` : ''}`
    ).join(', ');
  }

  detectBusinessType(company) {
    const name = company?.title?.toLowerCase() || '';
    
    if (name.includes('–±–∞—Ä–±–µ—Ä') || name.includes('barber')) return 'barbershop';
    if (name.includes('–Ω–æ–≥—Ç') || name.includes('–º–∞–Ω–∏–∫—é—Ä')) return 'nails';
    if (name.includes('–º–∞—Å—Å–∞–∂')) return 'massage';
    if (name.includes('—ç–ø–∏–ª—è—Ü') || name.includes('—à—É–≥–∞—Ä')) return 'epilation';
    if (name.includes('–±—Ä–æ–≤') || name.includes('—Ä–µ—Å–Ω–∏—Ü')) return 'brows';
    
    return 'beauty';
  }

  async callAI(prompt) {
    // –ó–¥–µ—Å—å –≤–∞—à –≤—ã–∑–æ–≤ –∫ AI API
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI
  }

  extractCommands(aiResponse) {
    const commands = [];
    const commandRegex = /\[([A-Z_]+)([^\]]*)\]/g;
    
    let match;
    while ((match = commandRegex.exec(aiResponse)) !== null) {
      commands.push({
        type: match[1],
        params: this.parseCommandParams(match[2])
      });
    }
    
    return commands;
  }

  parseCommandParams(paramsStr) {
    const params = {};
    const paramRegex = /(\w+):\s*([^,]+)/g;
    
    let match;
    while ((match = paramRegex.exec(paramsStr)) !== null) {
      params[match[1]] = match[2].trim();
    }
    
    return params;
  }

  async executeCommands(commands, context, companyId) {
    const results = [];
    
    for (const command of commands) {
      try {
        const result = await this.executeCommand(command, context, companyId);
        results.push(result);
      } catch (error) {
        logger.error(`Error executing command ${command.type}:`, error);
        results.push({ 
          error: true, 
          message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã' 
        });
      }
    }
    
    return results;
  }

  async executeCommand(command, context, companyId) {
    switch (command.type) {
      case 'SEARCH_SLOTS':
        return await this.searchSlots(command.params, context, companyId);
      
      case 'CREATE_BOOKING':
        return await this.createBooking(command.params, context, companyId);
      
      case 'SHOW_PRICES':
        return this.showPrices(command.params, context);
      
      default:
        return { error: true, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' };
    }
  }

  formatResponse(aiResponse, commandResults) {
    let response = aiResponse;
    
    // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    commandResults.forEach((result, index) => {
      const commandMatch = response.match(/\[[A-Z_]+[^\]]*\]/);
      if (commandMatch) {
        response = response.replace(commandMatch[0], result.formatted || '');
      }
    });
    
    return response;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getPerformanceStats() {
    const dbStats = await getStats();
    
    return {
      requests: {
        total: this.stats.totalRequests,
        avgContextLoadTime: this.calculateAverage(this.stats.contextLoadTime),
        avgAICallTime: this.calculateAverage(this.stats.aiCallTime)
      },
      cache: dbStats.redis,
      circuitBreaker: {
        state: this.aiCircuitBreaker.stats(),
        opened: this.aiCircuitBreaker.opened
      }
    };
  }

  calculateAverage(arr) {
    if (!arr.length) return 0;
    return Math.round(arr.reduce((a, b) => a + b, 0) / arr.length);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞
  async warmupForCompany(companyId) {
    const { warmupCache } = require('../../database/optimized-supabase');
    await warmupCache(companyId);
  }
}

module.exports = OptimizedAIAdminV2;