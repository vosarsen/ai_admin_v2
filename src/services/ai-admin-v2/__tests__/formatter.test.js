// src/services/ai-admin-v2/__tests__/formatter.test.js
const formatter = require('../modules/formatter');

describe('Formatter', () => {
  describe('formatServices', () => {
    it('should format services list for barbershop', () => {
      const services = [
        { title: '–°—Ç—Ä–∏–∂–∫–∞', price_min: 1500, duration: 30 },
        { title: '–ë–æ—Ä–æ–¥–∞', price_min: 800, duration: 20 }
      ];
      
      const result = formatter.formatServices(services, 'barbershop');
      
      expect(result).toContain('–°—Ç—Ä–∏–∂–∫–∞ - –æ—Ç 1500 —Ä—É–±');
      expect(result).toContain('–ë–æ—Ä–æ–¥–∞ - –æ—Ç 800 —Ä—É–±');
    });

    it('should use correct terminology for different business types', () => {
      const services = [
        { title: '–ú–∞–Ω–∏–∫—é—Ä', price_min: 2000 }
      ];
      
      const nailsResult = formatter.formatServices(services, 'nails');
      const beautyResult = formatter.formatServices(services, 'beauty');
      
      expect(nailsResult).toContain('–ø—Ä–æ—Ü–µ–¥—É—Ä–∞');
      expect(beautyResult).toContain('—É—Å–ª—É–≥–∞');
    });

    it('should handle empty services array', () => {
      const result = formatter.formatServices([], 'barbershop');
      
      expect(result).toBe('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥');
    });

    it('should show discounts when available', () => {
      const services = [
        { 
          title: '–°—Ç—Ä–∏–∂–∫–∞', 
          price_min: 1500,
          discount: 20,
          discounted_price_min: 1200
        }
      ];
      
      const result = formatter.formatServices(services, 'barbershop');
      
      expect(result).toContain('~~1500~~');
      expect(result).toContain('1200 —Ä—É–±');
      expect(result).toContain('(-20%)');
    });
  });

  describe('formatStaffSchedules', () => {
    it('should format staff schedules by date', () => {
      const schedules = [
        { staff_id: 1, date: '2024-07-20', start_time: '09:00', end_time: '18:00' },
        { staff_id: 2, date: '2024-07-20', start_time: '10:00', end_time: '19:00' }
      ];
      
      const staff = [
        { id: 1, name: '–°–µ—Ä–≥–µ–π' },
        { id: 2, name: '–ú–∞—Ä–∏—è' }
      ];
      
      const result = formatter.formatStaffSchedules(schedules, staff);
      
      expect(result).toContain('20.07');
      expect(result).toContain('–°–µ—Ä–≥–µ–π (09:00-18:00)');
      expect(result).toContain('–ú–∞—Ä–∏—è (10:00-19:00)');
    });

    it('should handle empty schedules', () => {
      const result = formatter.formatStaffSchedules([], []);
      
      expect(result).toBe('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    });
  });

  describe('formatTodayStaff', () => {
    beforeEach(() => {
      jest.useFakeTimers();
      jest.setSystemTime(new Date('2024-07-20T10:00:00'));
    });

    afterEach(() => {
      jest.useRealTimers();
    });

    it('should show only today working staff', () => {
      const schedules = [
        { staff_id: 1, date: '2024-07-20', start_time: '09:00', end_time: '18:00' },
        { staff_id: 2, date: '2024-07-21', start_time: '10:00', end_time: '19:00' }
      ];
      
      const staff = [
        { id: 1, name: '–°–µ—Ä–≥–µ–π' },
        { id: 2, name: '–ú–∞—Ä–∏—è' }
      ];
      
      const result = formatter.formatTodayStaff(schedules, staff);
      
      expect(result).toContain('–°–µ—Ä–≥–µ–π (09:00-18:00)');
      expect(result).not.toContain('–ú–∞—Ä–∏—è');
    });

    it('should show message when no one works today', () => {
      const schedules = [
        { staff_id: 1, date: '2024-07-21', start_time: '09:00', end_time: '18:00' }
      ];
      
      const result = formatter.formatTodayStaff(schedules, []);
      
      expect(result).toBe('–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    });
  });

  describe('formatSlots', () => {
    it('should group slots by time period', () => {
      const slots = [
        { datetime: '2024-07-20T09:00:00', seance_length: 30, master: { name: '–°–µ—Ä–≥–µ–π' } },
        { datetime: '2024-07-20T15:00:00', seance_length: 30, master: { name: '–°–µ—Ä–≥–µ–π' } },
        { datetime: '2024-07-20T19:00:00', seance_length: 30, master: { name: '–ú–∞—Ä–∏—è' } }
      ];
      
      const result = formatter.formatSlots(slots, 'barbershop');
      
      expect(result).toHaveProperty('morning');
      expect(result).toHaveProperty('afternoon');
      expect(result).toHaveProperty('evening');
      expect(result.morning).toContain('09:00');
      expect(result.afternoon).toContain('15:00');
      expect(result.evening).toContain('19:00');
    });

    it('should handle empty slots', () => {
      const result = formatter.formatSlots([], 'barbershop');
      
      expect(result).toBeNull();
    });

    it('should use correct terminology for master', () => {
      const slots = [
        { datetime: '2024-07-20T10:00:00', master: { name: '–°–µ—Ä–≥–µ–π' } }
      ];
      
      const barbershopResult = formatter.formatSlots(slots, 'barbershop');
      const nailsResult = formatter.formatSlots(slots, 'nails');
      
      expect(barbershopResult.morning).toContain('–±–∞—Ä–±–µ—Ä');
      expect(nailsResult.morning).toContain('–º–∞—Å—Ç–µ—Ä');
    });
  });

  describe('formatBookingConfirmation', () => {
    it('should format booking confirmation message', () => {
      const booking = {
        date: '2024-07-20',
        time: '15:00',
        services: '–°—Ç—Ä–∏–∂–∫–∞',
        staff: '–°–µ—Ä–≥–µ–π',
        price: 1500,
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1'
      };
      
      const result = formatter.formatBookingConfirmation(booking, 'barbershop');
      
      expect(result).toContain('20 –∏—é–ª—è');
      expect(result).toContain('15:00');
      expect(result).toContain('–°—Ç—Ä–∏–∂–∫–∞');
      expect(result).toContain('–°–µ—Ä–≥–µ–π');
      expect(result).toContain('1500 —Ä—É–±');
      expect(result).toContain('—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1');
    });

    it('should use correct terminology for different business types', () => {
      const booking = {
        date: '2024-07-20',
        time: '15:00',
        services: '–ú–∞–Ω–∏–∫—é—Ä',
        staff: '–ú–∞—Ä–∏—è'
      };
      
      const barbershopResult = formatter.formatBookingConfirmation(booking, 'barbershop');
      const nailsResult = formatter.formatBookingConfirmation(booking, 'nails');
      
      expect(barbershopResult).toContain('–ë–∞—Ä–±–µ—Ä: –ú–∞—Ä–∏—è');
      expect(nailsResult).toContain('–ú–∞—Å—Ç–µ—Ä: –ú–∞—Ä–∏—è');
    });

    it('should handle missing optional fields', () => {
      const booking = {
        date: '2024-07-20',
        time: '15:00'
      };
      
      const result = formatter.formatBookingConfirmation(booking, 'barbershop');
      
      expect(result).toContain('20 –∏—é–ª—è');
      expect(result).toContain('15:00');
      expect(result).not.toContain('undefined');
    });
  });

  describe('formatPrices', () => {
    it('should format price list', () => {
      const services = [
        { title: '–°—Ç—Ä–∏–∂–∫–∞', price_min: 1500, price_max: 2500 },
        { title: '–ë–æ—Ä–æ–¥–∞', price_min: 800 }
      ];
      
      const result = formatter.formatPrices(services, 'barbershop');
      
      expect(result).toContain('üíà –ü–†–ê–ô–°-–õ–ò–°–¢');
      expect(result).toContain('–°—Ç—Ä–∏–∂–∫–∞: 1500-2500 —Ä—É–±');
      expect(result).toContain('–ë–æ—Ä–æ–¥–∞: –æ—Ç 800 —Ä—É–±');
    });

    it('should show discounted prices', () => {
      const services = [
        { 
          title: '–°—Ç—Ä–∏–∂–∫–∞', 
          price_min: 1500,
          discount: 20,
          discounted_price_min: 1200
        }
      ];
      
      const result = formatter.formatPrices(services, 'barbershop');
      
      expect(result).toContain('~~1500~~');
      expect(result).toContain('1200 —Ä—É–±');
      expect(result).toContain('—Å–∫–∏–¥–∫–∞ 20%');
    });
  });

  describe('formatWorkingHours', () => {
    it('should format working hours object', () => {
      const hours = {
        monday: { start: '09:00', end: '21:00' },
        tuesday: { start: '09:00', end: '21:00' },
        wednesday: { start: '09:00', end: '21:00' }
      };
      
      const result = formatter.formatWorkingHours(hours);
      
      expect(result).toContain('–ø–Ω-—Å—Ä: 09:00-21:00');
    });

    it('should handle empty hours', () => {
      const result = formatter.formatWorkingHours({});
      
      expect(result).toBe('–Ω–µ —É–∫–∞–∑–∞–Ω—ã');
    });

    it('should group consecutive days with same hours', () => {
      const hours = {
        monday: { start: '09:00', end: '21:00' },
        tuesday: { start: '09:00', end: '21:00' },
        wednesday: { start: '10:00', end: '20:00' },
        thursday: { start: '10:00', end: '20:00' }
      };
      
      const result = formatter.formatWorkingHours(hours);
      
      expect(result).toContain('–ø–Ω-–≤—Ç: 09:00-21:00');
      expect(result).toContain('—Å—Ä-—á—Ç: 10:00-20:00');
    });
  });

  describe('formatConversation', () => {
    it('should format conversation history', () => {
      const messages = [
        {
          message_text: '–ü—Ä–∏–≤–µ—Ç',
          is_from_client: true,
          created_at: '2024-07-20T10:00:00'
        },
        {
          message_text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!',
          is_from_client: false,
          created_at: '2024-07-20T10:01:00'
        }
      ];
      
      const result = formatter.formatConversation(messages);
      
      expect(result).toContain('–ö–ª–∏–µ–Ω—Ç: –ü—Ä–∏–≤–µ—Ç');
      expect(result).toContain('–ë–æ—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!');
    });

    it('should limit long messages', () => {
      const longMessage = '–ê'.repeat(200);
      const messages = [
        {
          message_text: longMessage,
          is_from_client: true,
          created_at: '2024-07-20T10:00:00'
        }
      ];
      
      const result = formatter.formatConversation(messages);
      
      expect(result).toContain('...');
      expect(result.length).toBeLessThan(longMessage.length);
    });

    it('should handle empty conversation', () => {
      const result = formatter.formatConversation([]);
      
      expect(result).toBe('–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
    });
  });

  describe('formatRescheduleConfirmation', () => {
    it('should format reschedule confirmation', () => {
      const data = {
        oldDateTime: '2024-07-20T15:00:00',
        newDateTime: '2024-07-21T16:00:00',
        services: ['–°—Ç—Ä–∏–∂–∫–∞'],
        staff: '–°–µ—Ä–≥–µ–π'
      };
      
      const result = formatter.formatRescheduleConfirmation(data);
      
      expect(result).toContain('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞');
      expect(result).toContain('20 –∏—é–ª—è –≤ 15:00');
      expect(result).toContain('21 –∏—é–ª—è –≤ 16:00');
      expect(result).toContain('–°—Ç—Ä–∏–∂–∫–∞');
      expect(result).toContain('–°–µ—Ä–≥–µ–π');
    });

    it('should handle missing data gracefully', () => {
      const result = formatter.formatRescheduleConfirmation({});
      
      expect(result).toBe('');
    });
  });

  describe('formatVisitHistory', () => {
    it('should format visit history', () => {
      const history = [
        { date: '2024-06-15', services: ['–°—Ç—Ä–∏–∂–∫–∞'] },
        { date: '2024-05-10', services: ['–°—Ç—Ä–∏–∂–∫–∞', '–ë–æ—Ä–æ–¥–∞'] }
      ];
      
      const result = formatter.formatVisitHistory(history);
      
      expect(result).toContain('2 –≤–∏–∑–∏—Ç–∞');
      expect(result).toContain('–ø–æ—Å–ª–µ–¥–Ω–∏–π 15.06.2024');
    });

    it('should handle no history', () => {
      const result = formatter.formatVisitHistory([]);
      
      expect(result).toBe('–ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç');
    });

    it('should handle null history', () => {
      const result = formatter.formatVisitHistory(null);
      
      expect(result).toBe('–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    });
  });
});