/**
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Qwen –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * –ó–∞–º–µ–Ω—è–µ—Ç –º–µ—Ç–æ–¥ callAI –Ω–∞–ø—Ä—è–º—É—é –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
 */

// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const aiAdminV2 = require('./index');
const AIProviderAdapter = require('./ai-provider-adapter');
const logger = require('../../utils/logger').child({ module: 'ai-admin-v2-qwen' });

// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
const aiProvider = new AIProviderAdapter();

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
const originalCallAI = aiAdminV2.callAI.bind(aiAdminV2);

// –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ callAI
aiAdminV2.callAI = async function(prompt) {
  logger.info('üöÄ Using Qwen adaptive AI system');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
    const response = await aiProvider.callAI(prompt, {});
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 100 –∑–∞–ø—Ä–æ—Å–æ–≤
    const stats = aiProvider.getUsageStats();
    if (stats.total % 100 === 0 && stats.total > 0) {
      logger.info('üìä AI Usage Statistics:', stats);
    }
    
    return response;
    
  } catch (error) {
    logger.error('Qwen AI call failed:', error);
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    if (process.env.USE_ORIGINAL_AI === 'true') {
      logger.warn('Falling back to original AI provider...');
      return originalCallAI(prompt);
    }
    
    throw error;
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
aiAdminV2.getAIStats = function() {
  return aiProvider.getUsageStats();
};

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
aiAdminV2.resetAIStats = function() {
  return aiProvider.resetStats();
};

logger.info('‚úÖ Qwen integration activated');

module.exports = aiAdminV2;