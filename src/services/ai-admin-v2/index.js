const config = require('../../config');
const logger = require('../../utils/logger').child({ module: 'ai-admin-v2' });
const InternationalPhone = require('../../utils/international-phone');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const dataLoader = require('./modules/cached-data-loader'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –∫—ç—à–µ–º
const formatter = require('./modules/formatter');
const businessLogic = require('./modules/business-logic');
const commandHandler = require('./modules/command-handler');
const contextServiceV2 = require('../context/context-service-v2');
const intermediateContext = require('../context/intermediate-context');
const errorMessages = require('../../utils/error-messages');
const criticalErrorLogger = require('../../utils/critical-error-logger');
const providerFactory = require('../ai/provider-factory');
const promptManager = require('./prompt-manager');
const reactProcessor = require('./modules/react-processor');
const twoStageProcessor = require('./modules/two-stage-processor');
// ResponseProcessor —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º commandHandler –Ω–∞–ø—Ä—è–º—É—é
const { ErrorHandler, BookingError, ContextError, ValidationError } = require('./modules/error-handler');
const MessageProcessor = require('./modules/message-processor');
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π context-manager-v2
const contextManager = require('./modules/context-manager-v2');
const performanceMetrics = require('./modules/performance-metrics');
const prometheusMetrics = require('./modules/prometheus-metrics');
const ClientPersonalizationService = require('../personalization/client-personalization');

/**
 * AI Admin v2 - –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å 5-6 —ç—Ç–∞–ø–∞–º–∏ –Ω–∞ –æ–¥–∏–Ω AI –≤—ã–∑–æ–≤
 */
class AIAdminV2 {
  constructor() {
    this.responseFormatter = formatter; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    // ResponseProcessor —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º commandHandler –Ω–∞–ø—Ä—è–º—É—é
    this.errorHandler = ErrorHandler;
    this.messageProcessor = new MessageProcessor(dataLoader, contextServiceV2, intermediateContext);
    this.personalizationService = new ClientPersonalizationService();
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  validateInput(message, phone, companyId) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message || typeof message !== 'string') {
      throw new ValidationError('Message is required and must be a string', 'message', message);
    }
    
    if (message.length > 5000) {
      throw new ValidationError('Message is too long (max 5000 characters)', 'message', message.length);
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phone || typeof phone !== 'string') {
      throw new ValidationError('Phone is required and must be a string', 'phone', phone);
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å @c.us –∏ –±–µ–∑
    const phoneRegex = /^(\+?\d{10,15}|[\d\-\(\)\s]{10,20}(@c\.us)?)$/;
    if (!phoneRegex.test(phone)) {
      throw new ValidationError('Invalid phone format', 'phone', phone);
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID –∫–æ–º–ø–∞–Ω–∏–∏
    if (!companyId || (typeof companyId !== 'number' && typeof companyId !== 'string')) {
      throw new ValidationError('CompanyId is required', 'companyId', companyId);
    }
    
    const companyIdNum = parseInt(companyId);
    if (isNaN(companyIdNum) || companyIdNum <= 0) {
      throw new ValidationError('CompanyId must be a positive number', 'companyId', companyId);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * –£–ø—Ä–æ—â–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MessageProcessor
   */
  async processMessage(message, phone, companyId) {
    let context = null;
    let results = null;
    
    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operation = performanceMetrics.startOperation('processMessage');
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.validateInput(message, phone, companyId);
      
      logger.info(`ü§ñ AI Admin v2 processing: "${message}" from ${phone}`);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â—É—é –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ (—á–µ—Ä–µ–∑ v2)
      const cleanPhone = InternationalPhone.normalize(phone) || phone.replace('@c.us', '');
      const dialogContext = await contextServiceV2.getDialogContext(cleanPhone, companyId);
      const redisContext = dialogContext ? {
        ...dialogContext,
        pendingCancellation: dialogContext.pendingAction?.type === 'cancellation'
      } : null;
      if (redisContext?.pendingCancellation) {
        const cancellationResult = await this.messageProcessor.handlePendingCancellation(
          message, phone, companyId, redisContext
        );
        
        if (cancellationResult.handled) {
          return cancellationResult.response;
        }
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.messageProcessor.checkAndWaitForPreviousProcessing(phone);
      
      // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π context manager
      context = await contextManager.loadFullContext(phone, companyId);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º Redis –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Stage 1
      context.redisContext = redisContext;
      
      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      await intermediateContext.saveProcessingStart(phone, message, context);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.currentMessage = message;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –æ–±—â–µ–Ω–∏—è
      const businessType = businessLogic.detectBusinessType(context.company);
      context.company.type = businessType;
      logger.info(`Business type detected: ${businessType}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (context.intermediateContext) {
        logger.info('Intermediate context found:', {
          isRecent: context.intermediateContext.isRecent,
          mentionedServices: context.intermediateContext.mentionedServices,
          mentionedStaff: context.intermediateContext.mentionedStaff,
          lastBotQuestion: context.intermediateContext.lastBotQuestion
        });
      } else {
        logger.info('No intermediate context found');
      }
      
      // –°—Ç—Ä–æ–∏–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const prompt = this.buildSmartPrompt(message, context, phone);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const promptName = process.env.AI_PROMPT_VERSION || 'enhanced-prompt';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      const useReAct = promptName === 'react-prompt' || process.env.USE_REACT === 'true';
      const useTwoStage = promptName === 'two-stage' || process.env.USE_TWO_STAGE === 'true';
      
      let finalResponse;
      let executedCommands = [];
      
      let commandResults = []; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
      
      if (useTwoStage) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        logger.info('üéØ Using Two-Stage processor for fast response');
        const twoStageResult = await twoStageProcessor.processTwoStage(
          message,
          context,
          this // –ø–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ AIAdminV2 –¥–ª—è –≤—ã–∑–æ–≤–∞ callAI
        );
        
        finalResponse = twoStageResult.response;
        executedCommands = twoStageResult.commands;
        commandResults = twoStageResult.commandResults || []; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥
        
        logger.info(`‚úÖ Two-Stage completed in 2 iterations with ${twoStageResult.metrics.totalTime}ms`);
      } else if (useReAct) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ReAct –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info('Using ReAct processor for response handling');
        
        // –û–¥–∏–Ω –≤—ã–∑–æ–≤ AI —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è ReAct
        const aiResponse = await this.callAI(prompt, {
          message: message,
          promptName: promptName
        });
        
        const reactResult = await reactProcessor.processReActCycle(
          aiResponse, 
          context,
          this // –ø–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ AIAdminV2 –¥–ª—è –≤—ã–∑–æ–≤–∞ callAI
        );
        
        finalResponse = reactResult.response;
        executedCommands = reactResult.commands;
        
        logger.info(`ReAct completed in ${reactResult.iterations} iterations`);
      } else {
        // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        // –û–¥–∏–Ω –≤—ã–∑–æ–≤ AI —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const aiResponse = await this.callAI(prompt, {
          message: message,
          promptName: promptName
        });
        
        finalResponse = await this.processAIResponse(aiResponse, context);
        executedCommands = commandHandler.extractCommands(aiResponse);
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const result = {
        success: true,
        response: finalResponse,
        executedCommands: executedCommands,
        commandResults: commandResults, // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        results: []
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      if (result.executedCommands?.length > 0) {
        promptManager.recordUsage(promptName, {
          success: true,
          commandsExecuted: result.executedCommands.length
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞
      // –î–ª—è Two-Stage –∏—Å–ø–æ–ª—å–∑—É–µ–º finalResponse, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - aiResponse
      const responseForContext = useTwoStage ? finalResponse : (typeof aiResponse !== 'undefined' ? aiResponse : finalResponse);
      await intermediateContext.updateAfterAIAnalysis(phone, responseForContext, result.executedCommands || []);
      
      // –ù–û–í–´–ô –ü–û–î–•–û–î: –ï–¥–∏–Ω–æ–µ –∞—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const normalizedPhone = InternationalPhone.normalize(phone) || phone.replace('@c.us', '');
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const contextUpdates = {
        userMessage: message,
        botResponse: result.response,
        state: 'active'
      };
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±–æ—Ä–µ –∏–∑ –∫–æ–º–∞–Ω–¥
      if (result.executedCommands && result.executedCommands.length > 0) {
        const selection = {};
        let hasDateFromSearch = false;
        
        result.executedCommands.forEach(cmd => {
          if (cmd.params?.service_name) {
            selection.service = cmd.params.service_name;
          }
          if (cmd.params?.staff_name) {
            selection.staff = cmd.params.staff_name;
          }
          if (cmd.params?.time) {
            selection.time = cmd.params.time;
          }
          if (cmd.params?.date) {
            selection.date = cmd.params.date;
            // –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –∏–∑ SEARCH_SLOTS
            if (cmd.command === 'SEARCH_SLOTS') {
              hasDateFromSearch = true;
              logger.info(`Saving date from SEARCH_SLOTS: ${cmd.params.date}`);
            }
          }
        });
        
        if (Object.keys(selection).length > 0) {
          contextUpdates.selection = selection;
        }
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (hasDateFromSearch && selection.date) {
          contextUpdates.lastDate = selection.date;
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ
      if (context.client?.name && !context.client?.fromDatabase) {
        contextUpdates.clientName = context.client.name;
      }
      
      // –ï–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      logger.info('üî• Calling contextManager.saveContext with:', {
        phone: normalizedPhone,
        companyId,
        updates: contextUpdates
      });
      await contextManager.saveContext(normalizedPhone, companyId, contextUpdates);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–º–∞–Ω–¥ (–≤–∫–ª—é—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
      if (result.executedCommands && result.executedCommands.length > 0) {
        logger.info('üî• Calling contextManager.saveCommandContext with:', {
          phone: normalizedPhone,
          companyId,
          commands: result.executedCommands,
          hasResults: !!result.commandResults
        });
        await contextManager.saveCommandContext(
          normalizedPhone, 
          companyId, 
          result.executedCommands,
          result.commandResults
        );
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const dateCommand = result.executedCommands.find(cmd => 
          cmd.params?.date && (cmd.command === 'SEARCH_SLOTS' || cmd.command === 'CREATE_BOOKING')
        );
        
        if (dateCommand) {
          logger.info(`Date synchronized to context: ${dateCommand.params.date}`);
        }
      }
      
      // –ü–æ–º–µ—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
      await intermediateContext.markAsCompleted(phone, result);
      
      const processingTime = Date.now() - context.startTime;
      logger.info(`‚úÖ AI Admin v2 completed in ${processingTime}ms`);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      performanceMetrics.endOperation(operation, true);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ Prometheus
      prometheusMetrics.recordMessageProcessing(
        'text',
        processingTime / 1000,
        true,
        context.company?.type || 'unknown'
      );
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥
      if (result.executedCommands) {
        result.executedCommands.forEach(cmd => {
          performanceMetrics.recordCommand(cmd.command, true);
          
          // –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–µ–π
          if (cmd.command === 'CREATE_BOOKING' && cmd.success) {
            const serviceType = cmd.params?.service_name || 'unknown';
            prometheusMetrics.recordBookingCreated(serviceType, true);
          } else if (cmd.command === 'CANCEL_BOOKING' && cmd.success) {
            prometheusMetrics.recordBookingCancelled('user_request');
          }
        });
      }
      
      return {
        success: true,
        response: result.response,
        commands: result.executedCommands,
        executedCommands: result.executedCommands,
        results: result.results
      };
      
    } catch (error) {
      logger.error('Error in AI Admin v2:', error);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π
      performanceMetrics.endOperation(operation, false);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏ –≤ Prometheus
      const processingTime = Date.now() - (context?.startTime || Date.now());
      prometheusMetrics.recordMessageProcessing(
        'text',
        processingTime / 1000,
        false,
        context?.company?.type || 'unknown'
      );
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ ErrorHandler
      const errorInfo = await this.errorHandler.handleError(error, {
        operation: 'processMessage',
        companyId,
        phone,
        hasContext: !!context,
        message
      });
      
      // –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (phone) {
        await intermediateContext.setProcessingStatus(phone, 'error');
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (errorInfo.severity === 'high') {
        logger.error('Critical error in message processing', errorInfo);
      }
      
      return {
        success: false,
        response: errorInfo.userMessage || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.',
        error: errorInfo.message,
        needsRetry: errorInfo.needsRetry
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ ContextManager)
   */
  async loadFullContext(phone, companyId) {
    return await contextManager.loadFullContext(phone, companyId);
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  buildSmartPrompt(message, context, phone) {
    const terminology = businessLogic.getBusinessTerminology(context.company.type);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    const clientAnalysis = this.personalizationService.analyzeClient(context.client);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
    const promptContext = {
      // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
      businessInfo: {
        title: context.company?.title || config.app.defaultCompanyName || '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
        type: terminology.businessName,
        workHours: context.company?.work_hours || '9:00-21:00',
        address: context.company?.address || '',
        phone: context.company?.phone || ''
      },
      services: context.services || [],
      staff: context.staff || [],
      recentBookings: context.client?.bookings || [],
      userInfo: {
        name: context.client?.name || '',
        phone: phone,
        isReturning: context.isReturningClient || false
      },
      
      // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      clientData: context.client || null,
      clientAnalysis: clientAnalysis,
      
      // –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è detailed-prompt
      ...context,
      phone,
      terminology,
      currentTime: context.currentTime || new Date().toISOString(),
      timezone: context.timezone || 'Europe/Moscow',
      // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
      intermediateContext: context.intermediateContext || null
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    let basePrompt;
    const promptVersion = process.env.AI_PROMPT_VERSION || 
                         (process.env.USE_REACT === 'true' ? 'react-prompt' : 'personalized-prompt');
    
    if (process.env.AI_PROMPT_AB_TEST === 'true') {
      // A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const abTestResult = promptManager.getPromptForABTest(promptContext);
      basePrompt = abTestResult.text;
      logger.info(`Using prompt ${abTestResult.name} v${abTestResult.version} for A/B test`);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      basePrompt = promptManager.getActivePrompt(promptContext);
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    basePrompt = basePrompt.replace('{message}', message);
    
    return basePrompt;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async processAIResponse(aiResponse, context) {
    logger.info('Processing AI response...');
    
    // –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (aiResponse) {
      const preview = aiResponse.substring(0, 1000);
      logger.info('ü§ñ AI full response:', { 
        preview,
        totalLength: aiResponse.length,
        hasCommands: aiResponse.includes('['),
        firstBracket: aiResponse.indexOf('['),
        sample: aiResponse.substring(0, 200)
      });
    } else {
      logger.warn('‚ö†Ô∏è AI response is empty or null');
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const commands = commandHandler.extractCommands(aiResponse);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (commands && commands.length > 0) {
      logger.info(`üìã Extracted ${commands.length} commands:`, commands.map(c => c.command));
    } else {
      logger.warn('‚ö†Ô∏è No commands extracted from AI response');
    }
    
    const cleanResponse = commandHandler.removeCommands(aiResponse);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    const results = await commandHandler.executeCommands(commands, context);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    let finalResponse = cleanResponse;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const slotResults = results.filter(r => r.type === 'slots');
    if (slotResults.length > 0) {
      const allSlots = slotResults.reduce((acc, result) => {
        return acc.concat(result.data || []);
      }, []);
      
      if (allSlots.length > 0) {
        const slotsData = formatter.formatSlots(allSlots, context.company.type);
        if (slotsData) {
          // –í—ã–∑—ã–≤–∞–µ–º AI –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
          const slotsPrompt = `–ü–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:
${JSON.stringify(slotsData)}

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–¥–µ–∂–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: "–£ –°–µ—Ä–≥–µ—è —Å–≤–æ–±–æ–¥–Ω–æ", –Ω–µ "–£ –°–µ—Ä–≥–µ–π".
–°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.`;
          
          const formattedSlots = await this.callAI(slotsPrompt);
          // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –æ —Å–ª–æ—Ç–∞—Ö
          const cleanFormattedSlots = commandHandler.removeCommands(formattedSlots);
          finalResponse += '\n\n' + cleanFormattedSlots;
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CHECK_STAFF_SCHEDULE
    const staffScheduleResults = results.filter(r => r.type === 'staff_schedule');
    if (staffScheduleResults.length > 0) {
      const scheduleResult = staffScheduleResults[0].data;
      if (scheduleResult.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –∏—Å–∫–∞–ª–∏ –µ–≥–æ
        if (scheduleResult.targetStaff) {
          if (!scheduleResult.targetStaff.isWorking) {
            // –ú–∞—Å—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - AI –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            logger.info('Target staff is not working:', scheduleResult.targetStaff);
          }
        } else if (scheduleResult.working?.length > 0) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
          const workingNames = scheduleResult.working.join(', ');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –≤ –æ—Ç–≤–µ—Ç–µ
          if (!finalResponse.includes(workingNames)) {
            finalResponse += `\n\n${scheduleResult.formattedDate} —Ä–∞–±–æ—Ç–∞—é—Ç: ${workingNames}.`;
          }
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥
    for (const result of results) {
      if (result.type === 'booking_created') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        await this.saveBookingToDatabase(result.data, context);
      }
    }
    
    return finalResponse;
  }


  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveBookingToDatabase(bookingData, context) {
    if (!bookingData?.record_id) return;
    
    try {
      const { supabase } = require('../../database/supabase');
      const phone = InternationalPhone.normalize(context.phone) || context.phone.replace('@c.us', '');
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
      const { data: clientData } = await supabase
        .from('clients')
        .select('id')
        .eq('phone', phone)
        .eq('company_id', context.company.company_id)
        .maybeSingle();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
      const appointmentData = {
        yclients_record_id: parseInt(bookingData.record_id),
        company_id: context.company.company_id,
        client_id: clientData?.id || null,
        appointment_datetime: bookingData.datetime || null,
        status: 'confirmed',
        comment: '–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ WhatsApp',
        synced_at: new Date().toISOString()
      };
      
      await supabase
        .from('appointments_cache')
        .insert([appointmentData]);
        
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      await dataLoader.invalidateCache('fullContext', `${phone}_${context.company.company_id}`);
      
      logger.info('Booking saved to database:', appointmentData);
    } catch (error) {
      logger.error('Failed to save booking to database:', error);
    }
  }

  /**
   * –í—ã–∑–æ–≤ AI —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  async callAI(prompt, context = {}) {
    const startTime = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –ª–æ–≥–∏–∫—É –∏–∑ ErrorHandler
    return await this.errorHandler.executeWithRetry(async () => {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
      const provider = await providerFactory.getProvider();
      
      // –í—ã–∑—ã–≤–∞–µ–º AI
      const result = await provider.call(prompt, {
        message: context.message || '',
        temperature: 0.7,
        maxTokens: 1000
      });
      
      const responseTime = Date.now() - startTime;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      performanceMetrics.recordAICall(responseTime, true);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
      if (context.promptName) {
        promptManager.recordUsage(context.promptName, {
          success: true,
          responseTime,
          commandsExecuted: context.commandsExecuted || 0
        });
      }
      
      logger.info(`‚úÖ AI responded in ${responseTime}ms using ${provider.name}`);
      
      return result.text;
    }, {
      operationName: 'callAI',
      promptName: context.promptName,
      startTime
    }).catch(error => {
      const responseTime = Date.now() - startTime;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      performanceMetrics.recordAICall(responseTime, false, 'unknown', 'unknown');
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (context.promptName) {
        promptManager.recordUsage(context.promptName, {
          success: false,
          responseTime: responseTime,
          error: error.message
        });
      }
      
      throw error;
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceMetrics() {
    return performanceMetrics.getSummary();
  }
}

module.exports = new AIAdminV2();
