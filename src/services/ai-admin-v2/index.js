// src/services/ai-admin-v2/index.js
const { 
  loadFullContext: optimizedLoadContext,
  getServices,
  getStaff,
  getClient,
  invalidateCache 
} = require('../../database/optimized-supabase');
const { supabase } = require('../../database/supabase'); // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * AI –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä v2 - –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è:
 * - AI –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å
 * - –ú–∏–Ω–∏–º—É–º —Å–ª–æ–µ–≤ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
 * - –ú–∞–∫—Å–∏–º—É–º –≥–∏–±–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç—ã
 * - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª—é–±–æ–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
 */
class AIAdminV2 {
  constructor() {
    this.contextCache = new Map();
    this.aiProvider = null; // Lazy load
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async processMessage(message, phone, companyId) {
    const startTime = Date.now();
    logger.info(`ü§ñ AI Admin v2 processing: "${message}" from ${phone}`);
    
    let context = null;
    
    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      context = await this.loadFullContext(phone, companyId);
      
      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      context.conversation.push({
        role: 'user',
        content: message,
        timestamp: new Date().toISOString()
      });

      // 3. –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const prompt = this.buildSmartPrompt(message, context, phone);
      
      // 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiResponse = await this.callAI(prompt);
      
      // 5. –ü–∞—Ä—Å–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      const result = await this.processAIResponse(aiResponse, context);
      
      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      await this.saveContext(phone, companyId, context, result);
      
      logger.info(`‚úÖ AI Admin v2 completed in ${Date.now() - startTime}ms`);
      return result;

    } catch (error) {
      logger.error('AI Admin v2 error:', error);
      return {
        success: false,
        response: this.getErrorMessage(error, context?.company?.type),
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ–º –í–ï–°–¨ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π)
   */
  async loadFullContext(phone, companyId) {
    const startTime = Date.now();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å Redis –∫—ç—à–µ–º
      const baseContext = await optimizedLoadContext(phone, companyId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ baseContext —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!baseContext) {
        throw new Error('Failed to load base context');
      }
      
      // –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const [conversation, businessStats] = await Promise.all([
        this.loadConversation(phone, companyId),
        this.loadBusinessStats(companyId)
      ]);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
      const sortedServices = this.sortServicesForClient(
        baseContext.services || [], 
        baseContext.client
      );
      
      const context = {
        ...baseContext,
        services: sortedServices,
        conversation: conversation || [],
        businessStats: businessStats || { todayLoad: 0, bookedSlots: 0, totalSlots: 50 },
        currentTime: new Date().toISOString(),
        timezone: baseContext.company?.timezone || 'Europe/Moscow',
        phone: phone
      };

      const loadTime = Date.now() - startTime;
      logger.info(`Context loaded in ${loadTime}ms`);
      
      return context;
    } catch (error) {
      logger.error('Error loading context:', error);
      throw error;
    }
  }

  /**
   * –°—Ç—Ä–æ–∏–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  buildSmartPrompt(message, context, phone) {
    const { company, client, services, staff, staffSchedules, conversation, businessStats } = context;
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –ø–æ–¥ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    const terminology = this.getBusinessTerminology(company.type);
    
    return `–¢—ã - ${terminology.role} –≤ ${company.title}.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ò–ó–ù–ï–°–ï:
- –¢–∏–ø: ${terminology.businessType}
- –ê–¥—Ä–µ—Å: ${company.address}
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${this.formatWorkingHours(company.working_hours)}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${company.phone}
${businessStats ? `- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${businessStats.todayLoad}%` : ''}

–ö–õ–ò–ï–ù–¢:
- –ò–º—è: ${client?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${client?.phone || phone}
- –°—Ç–∞—Ç—É—Å: ${client?.loyalty_level || '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'}
- –í–∏–∑–∏—Ç–æ–≤: ${client?.visit_count || 0}
${client?.last_visit_date ? `- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${this.formatDate(client.last_visit_date)}` : ''}
${client?.discount ? `- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: ${client.discount}%` : ''}
${client?.preferences ? `- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${JSON.stringify(client.preferences)}` : ''}
${client?.favorite_staff_ids?.length ? `- –õ—é–±–∏–º—ã–µ ${terminology.specialists}: ${this.getStaffNames(client.favorite_staff_ids, staff)}` : ''}
${client?.formatted_visit_history?.length ? `\n–ò–°–¢–û–†–ò–Ø –ü–û–°–õ–ï–î–ù–ò–• –í–ò–ó–ò–¢–û–í:\n${client.formatted_visit_history.slice(0, 5).join('\n')}` : ''}

${context.lastSearch ? `–ü–û–°–õ–ï–î–ù–ò–ô –ü–û–ò–°–ö –°–õ–û–¢–û–í:
- –£—Å–ª—É–≥–∞: ${context.lastSearch.service_name}
- –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${context.lastSearch.slots?.length || 0}
- –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${new Date(context.lastSearch.timestamp).toLocaleTimeString('ru-RU')}
` : ''}

–î–û–°–¢–£–ü–ù–´–ï ${terminology.services.toUpperCase()}:
${this.formatServices(services, company.type)}

–ö–¢–û –†–ê–ë–û–¢–ê–ï–¢ –°–ï–ì–û–î–ù–Ø:
${this.formatTodayStaff(staffSchedules, staff)}

–†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–°–¢–ï–†–û–í –ù–ê –ù–ï–î–ï–õ–Æ:
${this.formatStaffSchedules(staffSchedules, staff)}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π):
${this.formatConversation(conversation.slice(-10))}

–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: "${message}"

–ê–ù–ê–õ–ò–ó –ù–ê–ú–ï–†–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê:
–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç, –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:

1. –ó–ê–ü–ò–°–¨ –ù–ê –£–°–õ–£–ì–£ - –∏—Å–ø–æ–ª—å–∑—É–π [SEARCH_SLOTS] –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç:
   - "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è"
   - "–Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å", "—Ö–æ—á—É –ø—Ä–∏–π—Ç–∏", "–º–æ–∂–Ω–æ –∫ –≤–∞–º"
   - "—Ö–∞—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–∏ –ø–ª–∑", "–º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è" (—Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏)
   - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏
   
2. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò - –∏—Å–ø–æ–ª—å–∑—É–π [SEARCH_SLOTS] –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç:
   - "—Å–≤–æ–±–æ–¥–Ω–æ –∑–∞–≤—Ç—Ä–∞?", "–µ—Å—Ç—å –≤—Ä–µ–º—è?", "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ?"
   - "—á—Ç–æ –µ—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?", "–º–æ–∂–Ω–æ –≤–µ—á–µ—Ä–æ–º?"
   - "–∫–∞–¥–∞ –º–æ–∂–Ω–∞", "–µ—Å—Ç—å —á–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞" (—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å)
   - "–º–æ–∂–Ω–æ –≤ –ø—è—Ç–Ω–∏—Ü—É —É—Ç—Ä–æ–º?", "–≤–µ—á–µ—Ä–æ–º —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–±–æ–¥–Ω–æ?"
   - –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏/—Å–ª–æ—Ç–æ–≤
   
3. –¶–ï–ù–´ - –∏—Å–ø–æ–ª—å–∑—É–π [SHOW_PRICES] –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç:
   - "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–∫–∞–∫–∏–µ —Ü–µ–Ω—ã", "–ø—Ä–∞–π—Å"
   - "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞ –Ω–∞", "–ø–æ—á–µ–º"
   - "—Å–∫–æ–∫ —Å—Ç–æ–∏—Ç", "—á–µ –ø–æ —Ü–µ–Ω–∞–º", "—Å–∫–æ–∫ —â–∞—Å —Å—Ç—Ä–∏–∂–∫–∞" (—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å)
   - –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
   
4. –ü–û–†–¢–§–û–õ–ò–û - –∏—Å–ø–æ–ª—å–∑—É–π [SHOW_PORTFOLIO] –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç:
   - "–ø–æ–∫–∞–∂–∏ —Ä–∞–±–æ—Ç—ã", "—Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç", "–ø—Ä–∏–º–µ—Ä—ã"
   - "–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã"
   - "–µ—Å—Ç—å —Ñ–æ—Ç–æ?", "–ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∏–∂–µ–∫"
   
5. –û–¢–ú–ï–ù–ê/–ü–ï–†–ï–ù–û–° - —Å–æ–æ–±—â–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:
   - "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "–Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏", "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏"
   - "–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏", "–æ—Ç–º–µ–Ω—è—é –≤—Å—Ç—Ä–µ—á—É"
   - "–∞—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" (—Å –æ–ø–µ—á–∞—Ç–∫–æ–π)
   
6. –ú–û–ò –ó–ê–ü–ò–°–ò - –ø—Ä–æ–≤–µ—Ä—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:
   - "–º–æ–∏ –∑–∞–ø–∏—Å–∏", "–∫–æ–≥–¥–∞ —è –∑–∞–ø–∏—Å–∞–Ω", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å"
   - "–≤–æ —Å–∫–æ–ª—å–∫–æ —è –∑–∞–ø–∏—Å–∞–Ω?", "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –≤–∏–∑–∏—Ç—ã"

–¢–í–û–ò –ö–û–ú–ê–ù–î–´ (–ò–°–ü–û–õ–¨–ó–£–ô –¢–û–ß–ù–û –¢–ê–ö–û–ô –§–û–†–ú–ê–¢):
1. [SEARCH_SLOTS service_name: –Ω–∞–∑–≤–∞–Ω–∏–µ_—É—Å–ª—É–≥–∏, date: –¥–∞—Ç–∞, time_preference: –≤—Ä–µ–º—è] - –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   –ü—Ä–∏–º–µ—Ä—ã:
   - [SEARCH_SLOTS service_name: —Å—Ç—Ä–∏–∂–∫–∞, date: –∑–∞–≤—Ç—Ä–∞]
   - [SEARCH_SLOTS service_name: –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, date: 2024-07-15, time_preference: –≤–µ—á–µ—Ä]
   - [SEARCH_SLOTS service_name: –º–∞–Ω–∏–∫—é—Ä, staff_name: –û–ª—å–≥–∞, date: —Å–µ–≥–æ–¥–Ω—è]
   
2. [CREATE_BOOKING service_id: id_—É—Å–ª—É–≥–∏, staff_id: id_–º–∞—Å—Ç–µ—Ä–∞, date: –¥–∞—Ç–∞, time: –≤—Ä–µ–º—è] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   –ü—Ä–∏–º–µ—Ä: [CREATE_BOOKING service_id: 123, staff_id: 456, date: 2024-07-15, time: 14:00]
   
3. [SHOW_PRICES] –∏–ª–∏ [SHOW_PRICES category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
   
4. [SHOW_PORTFOLIO] - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: staff_id

–ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´:
1. –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Å–µ–∫—Ü–∏–∏ "–ê–ù–ê–õ–ò–ó –ù–ê–ú–ï–†–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê"
2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–≤ 13:00") –ò —É—Å–ª—É–≥—É - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è –±–µ–∑ —É—Å–ª—É–≥–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Å–ª–æ—Ç–æ–≤ - —É—Ç–æ—á–Ω–∏ —É—Å–ª—É–≥—É
4. –ö–æ–≥–¥–∞ –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—É—Å–ª—É–≥–∞, –≤—Ä–µ–º—è, –º–∞—Å—Ç–µ—Ä) - –∏—Å–ø–æ–ª—å–∑—É–π [CREATE_BOOKING]
5. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π [SEARCH_SLOTS]
6. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π [SHOW_PRICES]
7. –ù–ï –æ—Ç–≤–µ—á–∞–π "—É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

–ü–†–ê–í–ò–õ–ê –û–ë–©–ï–ù–ò–Ø:
1. –ë—É–¥—å ${terminology.communicationStyle}
2. –ö–û–†–û–¢–ö–ò–ï —Å–æ–æ–±—â–µ–Ω–∏—è - –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
3. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–∏–∫–∞–∫–∏—Ö *, _, ~, [], # –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
4. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–∞–º –∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
5. –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
6. –ó–∞–¥–∞–≤–∞–π –û–î–ò–ù –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
7. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å—Ä–∞–∑—É —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã - —Å–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–π —á—Ç–æ –Ω—É–∂–Ω–æ
8. –ê–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –≥–æ–≤–æ—Ä–∏ –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç
9. –ù–ï –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ - –≥–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ —Ç–µ—Ö, –∫—Ç–æ –°–ï–ì–û–î–ù–Ø —Ä–∞–±–æ—Ç–∞–µ—Ç
10. –°–º–æ—Ç—Ä–∏ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–°–¢–ï–†–û–í —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ —á–µ–º –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å
- –ù–µ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–∞–ª–æ–Ω, —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
- –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –µ—Å–ª–∏ –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π

–í–ê–ñ–ù–û –ü–û –ú–ê–°–¢–ï–†–ê–ú:
- –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π –≤ –†–ê–°–ü–ò–°–ê–ù–ò–ò –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è
- –ù–ï –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
- –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–ª–æ—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–π [SEARCH_SLOTS] –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–í–ê–ñ–ù–û:
- –°–µ–≥–æ–¥–Ω—è: ${context.currentTime}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${context.timezone}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏: ${config.business.minBookingMinutesAhead} –º–∏–Ω—É—Ç

–ü–û–ù–ò–ú–ê–ù–ò–ï –î–ù–ï–ô:
- "—Å–µ–≥–æ–¥–Ω—è" = ${new Date().toISOString().split('T')[0]}
- "–∑–∞–≤—Ç—Ä–∞" = ${new Date(Date.now() + 86400000).toISOString().split('T')[0]}
- "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" = ${new Date(Date.now() + 172800000).toISOString().split('T')[0]}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ò–°–ü–û–õ–¨–ó–£–ô –∫–æ–º–∞–Ω–¥—ã [SEARCH_SLOTS], [SHOW_PRICES] –∏ —Ç.–¥. –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
- –ö–æ–º–∞–Ω–¥—ã –ø–∏—à–∏ –í –ö–û–ù–¶–ï –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ù–ï –¥—É–±–ª–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö - –∫–æ–º–∞–Ω–¥–∞ —Å–∞–º–∞ –¥–æ–±–∞–≤–∏—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞—á–∞—Ç
- –ü—Ä–æ–≤–µ—Ä—å –ò–°–¢–û–†–ò–Æ –î–ò–ê–õ–û–ì–ê —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É: [–ö–û–ú–ê–ù–î–ê –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–´–• –û–¢–í–ï–¢–û–í:
–ö–ª–∏–µ–Ω—Ç: "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
–¢—ã: "–ö–æ–Ω–µ—á–Ω–æ! –ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? [SEARCH_SLOTS]"

–ö–ª–∏–µ–Ω—Ç: "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∏–∂–∫–∞?"
–¢—ã: "–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã. [SHOW_PRICES]"

–ö–ª–∏–µ–Ω—Ç: "–µ—Å—Ç—å –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞?"
–¢—ã: "–ü—Ä–æ–≤–µ—Ä—é —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞. [SEARCH_SLOTS date=–∑–∞–≤—Ç—Ä–∞]"

–û—Ç–≤–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∏ –≤—ã–ø–æ–ª–Ω–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async processAIResponse(aiResponse, context) {
    logger.info('Processing AI response...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const commands = this.extractCommands(aiResponse);
    const cleanResponse = this.removeCommands(aiResponse);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    const results = await this.executeCommands(commands, context);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    let finalResponse = cleanResponse;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    for (const result of results) {
      if (result.type === 'slots') {
        finalResponse += '\n\n' + this.formatSlots(result.data, context.company.type);
      } else if (result.type === 'booking_created') {
        finalResponse += '\n\n‚úÖ ' + this.formatBookingConfirmation(result.data, context.company.type);
      } else if (result.type === 'prices') {
        finalResponse += '\n\n' + this.formatPrices(result.data, context.company.type);
      }
    }
    
    return {
      success: true,
      response: finalResponse,
      executedCommands: commands,
      results
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
   */
  extractCommands(response) {
    const commands = [];
    const commandRegex = /\[(SEARCH_SLOTS|CREATE_BOOKING|SHOW_PRICES|SHOW_PORTFOLIO)([^\]]*)\]/g;
    
    let match;
    while ((match = commandRegex.exec(response)) !== null) {
      const [fullMatch, command, paramsString] = match;
      const params = this.parseCommandParams(paramsString);
      
      commands.push({
        command,
        params,
        originalText: fullMatch
      });
    }
    
    return commands;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async executeCommands(commands, context) {
    const results = [];
    
    for (const cmd of commands) {
      logger.info(`Executing command: ${cmd.command}`, cmd.params);
      
      try {
        switch (cmd.command) {
          case 'SEARCH_SLOTS':
            const slots = await this.searchSlots(cmd.params, context);
            results.push({ type: 'slots', data: slots });
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–∏—Å–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            context.lastSearch = {
              service_name: cmd.params.service_name,
              slots: slots,
              timestamp: new Date().toISOString()
            };
            break;
            
          case 'CREATE_BOOKING':
            const booking = await this.createBooking(cmd.params, context);
            results.push({ type: 'booking_created', data: booking });
            break;
            
          case 'SHOW_PRICES':
            const prices = await this.getPrices(cmd.params, context);
            results.push({ type: 'prices', data: prices });
            break;
            
          case 'SHOW_PORTFOLIO':
            const portfolio = await this.getPortfolio(cmd.params, context);
            results.push({ type: 'portfolio', data: portfolio });
            break;
        }
      } catch (error) {
        logger.error(`Command ${cmd.command} failed:`, error);
        results.push({ 
          type: 'error', 
          command: cmd.command,
          error: error.message 
        });
      }
    }
    
    return results;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  async searchSlots(params, context) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π booking service
    const bookingService = require('../booking');
    
    // –ù–∞—Ö–æ–¥–∏–º service –ø–æ –∏–º–µ–Ω–∏
    const service = context.services.find(s => 
      s.title.toLowerCase().includes(params.service_name?.toLowerCase() || '')
    ) || context.services[0]; // Fallback –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —É—Å–ª—É–≥—É
    
    // –ù–∞—Ö–æ–¥–∏–º staff –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    let targetStaff = null;
    if (params.staff_name) {
      targetStaff = context.staff.find(s => s.name.toLowerCase().includes(params.staff_name.toLowerCase()));
    }
    
    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–∏–º—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    const staffToCheck = targetStaff ? [targetStaff] : 
      (context.client?.favorite_staff_ids?.length ? 
        context.staff.filter(s => context.client.favorite_staff_ids.includes(s.yclients_id)) : 
        context.staff.slice(0, 3)); // –ë–µ—Ä–µ–º —Ç–æ–ø-3 –º–∞—Å—Ç–µ—Ä–æ–≤
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    const allSlots = [];
    for (const staff of staffToCheck) {
      try {
        const result = await bookingService.findSuitableSlot({
          companyId: context.company.yclients_id || context.company.company_id,
          serviceId: service?.yclients_id,
          staffId: staff?.yclients_id,
          preferredDate: this.parseRelativeDate(params.date),
          timePreference: params.time_preference
        });
        
        if (result.data?.length) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∫ –∫–∞–∂–¥–æ–º—É —Å–ª–æ—Ç—É
          result.data.forEach(slot => {
            slot.staff_name = staff.name;
            slot.staff_id = staff.yclients_id;
          });
          allSlots.push(...result.data);
        }
      } catch (error) {
        logger.debug(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è ${staff.name}:`, error.message);
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–æ–Ω–∞–º
    return this.organizeSlotsByTimeZones(allSlots, params.time_preference);
  }
  
  /**
   * –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–æ–Ω–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∞
   */
  organizeSlotsByTimeZones(slots, timePreference) {
    if (!slots.length) return [];
    
    const timeZones = {
      morning: { start: 9, end: 12, slots: [] },
      afternoon: { start: 12, end: 17, slots: [] },
      evening: { start: 17, end: 21, slots: [] }
    };
    
    slots.forEach(slot => {
      const hour = parseInt(slot.time?.split(':')[0] || slot.datetime?.split('T')[1]?.split(':')[0]);
      if (hour >= timeZones.morning.start && hour < timeZones.morning.end) {
        timeZones.morning.slots.push(slot);
      } else if (hour >= timeZones.afternoon.start && hour < timeZones.afternoon.end) {
        timeZones.afternoon.slots.push(slot);
      } else if (hour >= timeZones.evening.start && hour < timeZones.evening.end) {
        timeZones.evening.slots.push(slot);
      }
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ—Ç—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    let organizedSlots = [];
    if (timePreference === 'morning') {
      organizedSlots = [...timeZones.morning.slots.slice(0, 3), ...timeZones.afternoon.slots.slice(0, 2)];
    } else if (timePreference === 'evening') {
      organizedSlots = [...timeZones.evening.slots.slice(0, 3), ...timeZones.afternoon.slots.slice(0, 2)];
    } else {
      // –ë–µ—Ä–µ–º –ø–æ 2 —Å–ª–æ—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
      organizedSlots = [
        ...timeZones.morning.slots.slice(0, 2),
        ...timeZones.afternoon.slots.slice(0, 2),
        ...timeZones.evening.slots.slice(0, 2)
      ];
    }
    
    return organizedSlots.slice(0, 6); // –ú–∞–∫—Å–∏–º—É–º 6 —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  async createBooking(params, context) {
    const bookingService = require('../booking');
    
    const bookingData = {
      phone: context.client?.phone || context.phone,
      fullname: context.client?.name || '',
      email: context.client?.email || '',
      comment: "–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ WhatsApp",
      appointments: [{
        id: 1,
        services: [parseInt(params.service_id)],
        staff_id: parseInt(params.staff_id),
        datetime: `${params.date} ${params.time}:00`
      }]
    };
    
    const result = await bookingService.createBooking(
      bookingData, 
      context.company.yclients_id || context.company.company_id
    );
    
    if (!result.success) {
      throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å');
    }
    
    return result.data;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async loadCompany(companyId) {
    const { data, error } = await supabase
      .from('companies')
      .select('*')
      .eq('company_id', companyId)
      .single();
    
    if (error) throw error;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    const businessType = this.detectBusinessType(data);
    return { ...data, type: businessType };
  }

  async loadClient(phone, companyId) {
    const normalizedPhone = phone.replace(/\D/g, '');
    
    const { data } = await supabase
      .from('clients')
      .select('*')
      .eq('company_id', companyId)
      .or(`phone.eq.${normalizedPhone},raw_phone.eq.${normalizedPhone}`)
      .single();
    
    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∏–∑–∏—Ç–æ–≤
    if (data && data.visit_history) {
      data.formatted_visit_history = this.formatVisitHistory(data.visit_history);
    }
    
    return data || {
      name: '–ì–æ—Å—Ç—å',
      phone: normalizedPhone,
      visit_count: 0,
      loyalty_level: 'New',
      visit_history: [],
      formatted_visit_history: []
    };
  }

  async loadServices(companyId) {
    const { data } = await supabase
      .from('services')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .order('weight', { ascending: false })
      .limit(50);
    
    return data || [];
  }
  
  /**
   * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å–ª—É–≥ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
   */
  sortServicesForClient(services, client) {
    if (!services || !Array.isArray(services)) {
      return [];
    }
    
    if (!client || !client.last_service_ids?.length) {
      return services;
    }
    
    // –£—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫–∞–∑—ã–≤–∞–ª —Ä–∞–Ω–µ–µ, –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    const clientServices = [];
    const otherServices = [];
    
    services.forEach(service => {
      if (client?.last_service_ids?.includes(service.yclients_id)) {
        clientServices.push(service);
      } else {
        otherServices.push(service);
      }
    });
    
    return [...clientServices, ...otherServices];
  }

  async loadStaff(companyId) {
    const { data } = await supabase
      .from('staff')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .order('rating', { ascending: false });
    
    return data || [];
  }

  async loadConversation(phone, companyId) {
    try {
      // –£–±–∏—Ä–∞–µ–º @c.us –µ—Å–ª–∏ –µ—Å—Ç—å
      const cleanPhone = phone.replace('@c.us', '');
      
      const { data, error } = await supabase
        .from('dialog_contexts')
        .select('messages')
        .eq('user_id', cleanPhone)
        .eq('company_id', companyId)
        .order('updated_at', { ascending: false })
        .limit(1)
        .maybeSingle();
      
      if (error) {
        logger.error('Error loading conversation:', error);
        return [];
      }
      
      return data?.messages || [];
    } catch (error) {
      logger.error('Error in loadConversation:', error);
      return [];
    }
  }

  async loadBusinessStats(companyId) {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
      const today = new Date().toISOString().split('T')[0];
      
      const { data, error } = await supabase
        .from('appointments_cache')
        .select('*')
        .eq('company_id', companyId)
        .gte('appointment_datetime', today)
        .lt('appointment_datetime', today + 'T23:59:59');
      
      if (error) {
        logger.error('Error loading business stats:', error);
      }
      
      const totalSlots = 50; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ –¥–µ–Ω—å
      const bookedSlots = data?.length || 0;
      const todayLoad = Math.round((bookedSlots / totalSlots) * 100);
      
      return { todayLoad, bookedSlots, totalSlots };
    } catch (error) {
      logger.error('Error in loadBusinessStats:', error);
      return { todayLoad: 0, bookedSlots: 0, totalSlots: 50 };
    }
  }
  
  async loadStaffSchedules(companyId) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    const today = new Date();
    const weekLater = new Date();
    weekLater.setDate(today.getDate() + 7);
    
    const { data } = await supabase
      .from('staff_schedules')
      .select('*')
      .eq('company_id', companyId)
      .gte('date', today.toISOString().split('T')[0])
      .lte('date', weekLater.toISOString().split('T')[0])
      .eq('is_working', true)
      .order('date', { ascending: true });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const scheduleByDate = {};
    data?.forEach(schedule => {
      if (!scheduleByDate[schedule.date]) {
        scheduleByDate[schedule.date] = [];
      }
      scheduleByDate[schedule.date].push(schedule);
    });
    
    return scheduleByDate;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏–∏
   */
  detectBusinessType(company) {
    const title = company.title.toLowerCase();
    const services = company.raw_data?.services || [];
    
    if (title.includes('–±–∞—Ä–±–µ—Ä') || title.includes('barber')) {
      return 'barbershop';
    } else if (title.includes('–Ω–æ–≥—Ç') || title.includes('–º–∞–Ω–∏–∫—é—Ä') || title.includes('nail')) {
      return 'nails';
    } else if (title.includes('–º–∞—Å—Å–∞–∂') || title.includes('—Å–ø–∞') || title.includes('spa')) {
      return 'massage';
    } else if (title.includes('—ç–ø–∏–ª—è—Ü') || title.includes('–ª–∞–∑–µ—Ä')) {
      return 'epilation';
    } else if (title.includes('–±—Ä–æ–≤–∏') || title.includes('—Ä–µ—Å–Ω–∏—Ü')) {
      return 'brows';
    }
    
    return 'beauty'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  getBusinessTerminology(businessType) {
    const terminology = {
      barbershop: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞',
        businessType: '–±–∞—Ä–±–µ—Ä—à–æ–ø',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–±–∞—Ä–±–µ—Ä—ã',
        communicationStyle: '–ø—Ä–æ—Å—Ç—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π',
        suggestions: '—Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ —É—Ö–æ–¥ –∑–∞ –±–æ—Ä–æ–¥–æ–π'
      },
      nails: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞',
        businessType: '–Ω–æ–≥—Ç–µ–≤–∞—è —Å—Ç—É–¥–∏—è',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–º–∞—Å—Ç–µ—Ä–∞',
        communicationStyle: '–≤–µ–∂–ª–∏–≤—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º',
        suggestions: '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –∏ —É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'
      },
      massage: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—Å—Å–∞–∂–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞',
        businessType: '–º–∞—Å—Å–∞–∂–Ω—ã–π —Å–∞–ª–æ–Ω',
        services: '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
        specialists: '–º–∞—Å—Å–∞–∂–∏—Å—Ç—ã',
        communicationStyle: '—Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º',
        suggestions: '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫—É—Ä—Å—ã –º–∞—Å—Å–∞–∂–∞'
      },
      epilation: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏ —ç–ø–∏–ª—è—Ü–∏–∏',
        businessType: '—Å—Ç—É–¥–∏—è –ª–∞–∑–µ—Ä–Ω–æ–π —ç–ø–∏–ª—è—Ü–∏–∏',
        services: '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
        specialists: '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
        communicationStyle: '–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º',
        suggestions: '–∫—É—Ä—Å—ã –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      },
      beauty: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã',
        businessType: '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–º–∞—Å—Ç–µ—Ä–∞',
        communicationStyle: '–ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º',
        suggestions: '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∞–∫—Ü–∏–∏'
      }
    };
    
    return terminology[businessType] || terminology.beauty;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   */
  formatServices(services, businessType) {
    if (!services.length) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥';
    
    return services.slice(0, 20).map(s => {
      const price = s.price_min ? `–æ—Ç ${s.price_min}‚ÇΩ` : '–ø–æ –∑–∞–ø—Ä–æ—Å—É';
      const duration = s.duration ? `${s.duration} –º–∏–Ω` : '';
      return `- ${s.title} (${price}${duration ? ', ' + duration : ''}) [ID: ${s.yclients_id}]`;
    }).join('\n');
  }

  formatStaff(staff, businessType) {
    if (!staff.length) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤';
    
    return staff.map(s => {
      const rating = s.rating ? `‚≠ê ${s.rating}` : '';
      const spec = s.specialization || '—É–Ω–∏–≤–µ—Ä—Å–∞–ª';
      return `- ${s.name} (${spec}${rating ? ', ' + rating : ''}) [ID: ${s.yclients_id}]`;
    }).join('\n');
  }

  formatTodayStaff(scheduleByDate, staffList) {
    if (!scheduleByDate || Object.keys(scheduleByDate).length === 0) {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    const today = new Date().toISOString().split('T')[0];
    const todaySchedule = scheduleByDate[today];
    
    if (!todaySchedule || todaySchedule.length === 0) {
      return '–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ–≥–æ–¥–Ω—è –º–∞—Å—Ç–µ—Ä–æ–≤
    const workingToday = todaySchedule.map(schedule => {
      const staff = staffList.find(s => s.yclients_id === schedule.staff_id);
      if (!staff) return null;
      
      const rating = staff.rating ? ` (‚≠ê ${staff.rating})` : '';
      const time = schedule.work_start && schedule.work_end ? 
        ` ${schedule.work_start}-${schedule.work_end}` : '';
      
      return `- ${staff.name}${rating}${time}`;
    }).filter(Boolean);
    
    return workingToday.join('\n');
  }

  formatStaffSchedules(scheduleByDate, staffList) {
    if (!scheduleByDate || Object.keys(scheduleByDate).length === 0) {
      return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
    }
    
    const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    let result = [];
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    Object.keys(scheduleByDate).slice(0, 3).forEach(date => {
      const dayDate = new Date(date);
      const dayName = days[dayDate.getDay()];
      const formattedDate = `${dayDate.getDate()}.${(dayDate.getMonth() + 1).toString().padStart(2, '0')}`;
      
      const workingStaff = scheduleByDate[date].map(schedule => {
        const staff = staffList.find(s => s.yclients_id === schedule.staff_id);
        return staff ? `${staff.name} (${schedule.work_start}-${schedule.work_end})` : schedule.staff_name;
      });
      
      result.push(`${dayName} ${formattedDate}: ${workingStaff.join(', ')}`);
    });
    
    return result.join('\n');
  }

  formatConversation(messages) {
    if (!messages.length) return '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π';
    
    return messages.map(m => 
      `${m.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ê–¥–º–∏–Ω'}: ${m.content}`
    ).join('\n');
  }

  formatWorkingHours(hours) {
    if (!hours) return '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    return JSON.stringify(hours);
  }

  formatDate(date) {
    return new Date(date).toLocaleDateString('ru-RU');
  }
  
  formatDateForDisplay(dateStr) {
    const date = new Date(dateStr);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    if (dateStr === '–°–µ–≥–æ–¥–Ω—è') return '–°–µ–≥–æ–¥–Ω—è';
    if (date.toDateString() === today.toDateString()) return '–°–µ–≥–æ–¥–Ω—è';
    if (date.toDateString() === tomorrow.toDateString()) return '–ó–∞–≤—Ç—Ä–∞';
    
    return date.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long',
      weekday: 'short'
    });
  }
  
  parseRelativeDate(dateStr) {
    if (!dateStr) return new Date().toISOString().split('T')[0];
    
    const today = new Date();
    const dateStrLower = dateStr.toLowerCase();
    
    if (dateStrLower === '—Å–µ–≥–æ–¥–Ω—è' || dateStrLower === 'today') {
      return today.toISOString().split('T')[0];
    }
    
    if (dateStrLower === '–∑–∞–≤—Ç—Ä–∞' || dateStrLower === 'tomorrow') {
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      return tomorrow.toISOString().split('T')[0];
    }
    
    if (dateStrLower === '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' || dateStrLower === 'after tomorrow') {
      const afterTomorrow = new Date(today);
      afterTomorrow.setDate(afterTomorrow.getDate() + 2);
      return afterTomorrow.toISOString().split('T')[0];
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ ISO –¥–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
      return dateStr;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
    const parsed = new Date(dateStr);
    if (!isNaN(parsed.getTime())) {
      return parsed.toISOString().split('T')[0];
    }
    
    // Fallback –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    return today.toISOString().split('T')[0];
  }

  getStaffNames(staffIds, staffList) {
    return staffIds
      .map(id => staffList.find(s => s.yclients_id === id)?.name)
      .filter(Boolean)
      .join(', ');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  formatSlots(slots, businessType) {
    if (!slots || !slots.length) {
      return 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–µ–Ω—å.';
    }
    
    const terminology = this.getBusinessTerminology(businessType);
    let text = `üìÖ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å
    const byStaff = {};
    slots.forEach(slot => {
      const staffName = slot.staff_name || '–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä';
      if (!byStaff[staffName]) byStaff[staffName] = [];
      byStaff[staffName].push(slot);
    });
    
    Object.entries(byStaff).slice(0, 3).forEach(([staffName, staffSlots]) => {
      text += `üë§ ${staffName}:\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
      const byDate = {};
      staffSlots.forEach(slot => {
        const date = slot.date || (slot.datetime ? slot.datetime.split(' ')[0] : new Date().toISOString().split('T')[0]);
        if (!byDate[date]) byDate[date] = [];
        byDate[date].push(slot);
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
      const sortedDates = Object.keys(byDate).sort();
      
      sortedDates.forEach(date => {
        const formattedDate = this.formatDateForDisplay(date);
        text += `${formattedDate}:\n`;
        
        const times = byDate[date]
          .map(slot => slot.time || (slot.datetime ? slot.datetime.split(' ')[1].substring(0, 5) : ''))
          .filter(time => time)
          .slice(0, 6);
        
        text += times.map(time => `- ${time}`).join('\n');
        text += '\n\n';
      });
    });
    
    return text;
  }

  formatBookingConfirmation(booking, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    return `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å ${booking.date} –≤ ${booking.time}. ${terminology.specialists} ${booking.staff_name} –±—É–¥–µ—Ç –≤–∞—Å –∂–¥–∞—Ç—å.`;
  }

  formatPrices(services, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    let text = `üí∞ –ù–∞—à–∏ ${terminology.services}:\n\n`;
    
    services.slice(0, 10).forEach(s => {
      const price = s.price_min === s.price_max ? 
        `${s.price_min}‚ÇΩ` : 
        `${s.price_min}-${s.price_max}‚ÇΩ`;
      text += `${s.title} - ${price}\n`;
    });
    
    return text;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   */
  parseCommandParams(paramsString) {
    const params = {};
    const paramRegex = /(\w+):\s*([^,\]]+)/g;
    
    let match;
    while ((match = paramRegex.exec(paramsString)) !== null) {
      const [, key, value] = match;
      params[key.trim()] = value.trim();
    }
    
    return params;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
   */
  removeCommands(response) {
    // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    let cleaned = response.replace(/\[(SEARCH_SLOTS|CREATE_BOOKING|SHOW_PRICES|SHOW_PORTFOLIO)[^\]]*\]/g, '');
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
    cleaned = cleaned.replace(/\(–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç.*?\)/g, '');
    cleaned = cleaned.replace(/–≤—ã–ø–æ–ª–Ω—é.*?–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\./g, '');
    cleaned = cleaned.replace(/service_name=.*?(?=\s|$)/g, '');
    cleaned = cleaned.replace(/date=.*?(?=\s|$)/g, '');
    cleaned = cleaned.replace(/time_preference=.*?(?=\s|$)/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = cleaned.replace(/\s+/g, ' ').trim();
    
    return cleaned;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  async saveContext(phone, companyId, context, result) {
    // –£–±–∏—Ä–∞–µ–º @c.us –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanPhone = phone.replace('@c.us', '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.conversation.push({
      role: 'assistant',
      content: result.response,
      timestamp: new Date().toISOString()
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await supabase
      .from('dialog_contexts')
      .upsert({
        user_id: cleanPhone,
        company_id: companyId,
        messages: context.conversation.slice(-50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        updated_at: new Date().toISOString(),
        last_activity: new Date().toISOString(),
        message_count: context.conversation.length
      });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async callAI(prompt) {
    if (!this.aiProvider) {
      this.aiProvider = require('../ai');
    }
    
    return await this.aiProvider._callAI(prompt);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   */
  formatVisitHistory(visitHistory) {
    if (!visitHistory || !Array.isArray(visitHistory)) return [];
    
    return visitHistory.slice(0, 5).map((visit, index) => {
      const date = new Date(visit.date).toLocaleDateString('ru-RU');
      const services = visit.services?.join(', ') || '–£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
      const staff = visit.staff_name || '–ú–∞—Å—Ç–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω';
      const cost = visit.cost ? `${visit.cost}‚ÇΩ` : '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      
      return `  ${index + 1}. ${date} - ${services} (${staff}) - ${cost}`;
    });
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  getErrorMessage(error, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    
    if (error.message.includes('timeout')) {
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: ${terminology.businessType} –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å!`;
    }
    
    return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  cleanupCache() {
    const now = Date.now();
    for (const [key, value] of this.contextCache.entries()) {
      if (now - value.timestamp > 600000) { // 10 –º–∏–Ω—É—Ç
        this.contextCache.delete(key);
      }
    }
  }
}

module.exports = new AIAdminV2();