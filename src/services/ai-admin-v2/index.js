// src/services/ai-admin-v2/index.js
const { supabase } = require('../../database/supabase');
const logger = require('../../utils/logger');
const config = require('../../config');

/**
 * AI –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä v2 - –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è:
 * - AI –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å
 * - –ú–∏–Ω–∏–º—É–º —Å–ª–æ–µ–≤ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
 * - –ú–∞–∫—Å–∏–º—É–º –≥–∏–±–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç—ã
 * - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ª—é–±–æ–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
 */
class AIAdminV2 {
  constructor() {
    this.contextCache = new Map();
    this.aiProvider = null; // Lazy load
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async processMessage(message, phone, companyId) {
    const startTime = Date.now();
    logger.info(`ü§ñ AI Admin v2 processing: "${message}" from ${phone}`);

    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const context = await this.loadFullContext(phone, companyId);
      
      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      context.conversation.push({
        role: 'user',
        content: message,
        timestamp: new Date().toISOString()
      });

      // 3. –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const prompt = this.buildSmartPrompt(message, context);
      
      // 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const aiResponse = await this.callAI(prompt);
      
      // 5. –ü–∞—Ä—Å–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      const result = await this.processAIResponse(aiResponse, context);
      
      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      await this.saveContext(phone, companyId, context, result);
      
      logger.info(`‚úÖ AI Admin v2 completed in ${Date.now() - startTime}ms`);
      return result;

    } catch (error) {
      logger.error('AI Admin v2 error:', error);
      return {
        success: false,
        response: this.getErrorMessage(error, context?.company?.type),
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ–º –í–ï–°–¨ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  async loadFullContext(phone, companyId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `${phone}_${companyId}`;
    const cached = this.contextCache.get(cacheKey);
    
    if (cached && (Date.now() - cached.timestamp < 300000)) { // 5 –º–∏–Ω—É—Ç
      logger.debug('Using cached context');
      return cached.data;
    }

    logger.info('Loading full context from database...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    const [company, client, services, staff, conversation, businessStats] = await Promise.all([
      this.loadCompany(companyId),
      this.loadClient(phone, companyId),
      this.loadServices(companyId),
      this.loadStaff(companyId),
      this.loadConversation(phone, companyId),
      this.loadBusinessStats(companyId)
    ]);

    const context = {
      company,
      client,
      services,
      staff,
      conversation,
      businessStats,
      currentTime: new Date().toISOString(),
      timezone: company.timezone || 'Europe/Moscow'
    };

    // –ö–µ—à–∏—Ä—É–µ–º
    this.contextCache.set(cacheKey, {
      data: context,
      timestamp: Date.now()
    });

    return context;
  }

  /**
   * –°—Ç—Ä–æ–∏–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  buildSmartPrompt(message, context) {
    const { company, client, services, staff, conversation, businessStats } = context;
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –ø–æ–¥ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    const terminology = this.getBusinessTerminology(company.type);
    
    return `–¢—ã - ${terminology.role} –≤ ${company.title}.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ò–ó–ù–ï–°–ï:
- –¢–∏–ø: ${terminology.businessType}
- –ê–¥—Ä–µ—Å: ${company.address}
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${this.formatWorkingHours(company.working_hours)}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${company.phone}
${businessStats ? `- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${businessStats.todayLoad}%` : ''}

–ö–õ–ò–ï–ù–¢:
- –ò–º—è: ${client.name}
- –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}
- –°—Ç–∞—Ç—É—Å: ${client.loyalty_level || '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç'}
- –í–∏–∑–∏—Ç–æ–≤: ${client.visit_count || 0}
${client.last_visit_date ? `- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${this.formatDate(client.last_visit_date)}` : ''}
${client.preferences ? `- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${JSON.stringify(client.preferences)}` : ''}
${client.favorite_staff_ids?.length ? `- –õ—é–±–∏–º—ã–µ ${terminology.specialists}: ${this.getStaffNames(client.favorite_staff_ids, staff)}` : ''}

–î–û–°–¢–£–ü–ù–´–ï ${terminology.services.toUpperCase()}:
${this.formatServices(services, company.type)}

${terminology.specialists.toUpperCase()} –°–ï–ì–û–î–ù–Ø:
${this.formatStaff(staff, company.type)}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π):
${this.formatConversation(conversation.slice(-10))}

–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: "${message}"

–¢–í–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
1. [SEARCH_SLOTS] - –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: service_name, staff_name (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), date, time_preference
   
2. [CREATE_BOOKING] - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: service_id, staff_id, date, time
   
3. [SHOW_PRICES] - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: category (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   
4. [SHOW_PORTFOLIO] - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: staff_id

–ü–†–ê–í–ò–õ–ê:
1. –ë—É–¥—å ${terminology.communicationStyle}
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –¥–ª—è ${terminology.businessType}
3. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π ${terminology.suggestions}
4. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–ª–æ—Ç—ã - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π [SEARCH_SLOTS]
5. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
6. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞
7. –ü—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ

–í–ê–ñ–ù–û:
- –°–µ–≥–æ–¥–Ω—è: ${context.currentTime}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${context.timezone}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏: ${config.business.minBookingMinutesAhead} –º–∏–Ω—É—Ç

–û—Ç–≤–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∏ –≤—ã–ø–æ–ª–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async processAIResponse(aiResponse, context) {
    logger.info('Processing AI response...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const commands = this.extractCommands(aiResponse);
    const cleanResponse = this.removeCommands(aiResponse);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    const results = await this.executeCommands(commands, context);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    let finalResponse = cleanResponse;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    for (const result of results) {
      if (result.type === 'slots') {
        finalResponse += '\n\n' + this.formatSlots(result.data, context.company.type);
      } else if (result.type === 'booking_created') {
        finalResponse += '\n\n‚úÖ ' + this.formatBookingConfirmation(result.data, context.company.type);
      } else if (result.type === 'prices') {
        finalResponse += '\n\n' + this.formatPrices(result.data, context.company.type);
      }
    }
    
    return {
      success: true,
      response: finalResponse,
      executedCommands: commands,
      results
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
   */
  extractCommands(response) {
    const commands = [];
    const commandRegex = /\[(SEARCH_SLOTS|CREATE_BOOKING|SHOW_PRICES|SHOW_PORTFOLIO)([^\]]*)\]/g;
    
    let match;
    while ((match = commandRegex.exec(response)) !== null) {
      const [fullMatch, command, paramsString] = match;
      const params = this.parseCommandParams(paramsString);
      
      commands.push({
        command,
        params,
        originalText: fullMatch
      });
    }
    
    return commands;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async executeCommands(commands, context) {
    const results = [];
    
    for (const cmd of commands) {
      logger.info(`Executing command: ${cmd.command}`, cmd.params);
      
      try {
        switch (cmd.command) {
          case 'SEARCH_SLOTS':
            const slots = await this.searchSlots(cmd.params, context);
            results.push({ type: 'slots', data: slots });
            break;
            
          case 'CREATE_BOOKING':
            const booking = await this.createBooking(cmd.params, context);
            results.push({ type: 'booking_created', data: booking });
            break;
            
          case 'SHOW_PRICES':
            const prices = await this.getPrices(cmd.params, context);
            results.push({ type: 'prices', data: prices });
            break;
            
          case 'SHOW_PORTFOLIO':
            const portfolio = await this.getPortfolio(cmd.params, context);
            results.push({ type: 'portfolio', data: portfolio });
            break;
        }
      } catch (error) {
        logger.error(`Command ${cmd.command} failed:`, error);
        results.push({ 
          type: 'error', 
          command: cmd.command,
          error: error.message 
        });
      }
    }
    
    return results;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  async searchSlots(params, context) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π booking service
    const bookingService = require('../booking');
    
    // –ù–∞—Ö–æ–¥–∏–º service –ø–æ –∏–º–µ–Ω–∏
    const service = context.services.find(s => 
      s.title.toLowerCase().includes(params.service_name?.toLowerCase() || '')
    ) || context.services[0]; // Fallback –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —É—Å–ª—É–≥—É
    
    // –ù–∞—Ö–æ–¥–∏–º staff –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    const staff = params.staff_name ? 
      context.staff.find(s => s.name.toLowerCase().includes(params.staff_name.toLowerCase())) : 
      null;
    
    const result = await bookingService.findSuitableSlot({
      companyId: context.company.yclients_id || context.company.company_id,
      serviceId: service?.yclients_id,
      staffId: staff?.yclients_id,
      preferredDate: params.date || new Date().toISOString().split('T')[0],
      timePreference: params.time_preference
    });
    
    return result.data || [];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  async createBooking(params, context) {
    const bookingService = require('../booking');
    
    const bookingData = {
      phone: context.client.phone,
      fullname: context.client.name,
      email: context.client.email,
      comment: "–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ WhatsApp",
      appointments: [{
        id: 1,
        services: [parseInt(params.service_id)],
        staff_id: parseInt(params.staff_id),
        datetime: `${params.date} ${params.time}:00`
      }]
    };
    
    const result = await bookingService.createBooking(
      bookingData, 
      context.company.yclients_id || context.company.company_id
    );
    
    if (!result.success) {
      throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å');
    }
    
    return result.data;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async loadCompany(companyId) {
    const { data, error } = await supabase
      .from('companies')
      .select('*')
      .eq('company_id', companyId)
      .single();
    
    if (error) throw error;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    const businessType = this.detectBusinessType(data);
    return { ...data, type: businessType };
  }

  async loadClient(phone, companyId) {
    const normalizedPhone = phone.replace(/\D/g, '');
    
    const { data } = await supabase
      .from('clients')
      .select('*')
      .eq('company_id', companyId)
      .or(`phone.eq.${normalizedPhone},raw_phone.eq.${normalizedPhone}`)
      .single();
    
    return data || {
      name: '–ì–æ—Å—Ç—å',
      phone: normalizedPhone,
      visit_count: 0,
      loyalty_level: 'New'
    };
  }

  async loadServices(companyId) {
    const { data } = await supabase
      .from('services')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .order('weight', { ascending: false })
      .limit(50);
    
    return data || [];
  }

  async loadStaff(companyId) {
    const { data } = await supabase
      .from('staff')
      .select('*')
      .eq('company_id', companyId)
      .eq('is_active', true)
      .order('rating', { ascending: false });
    
    return data || [];
  }

  async loadConversation(phone, companyId) {
    const { data } = await supabase
      .from('dialog_contexts')
      .select('messages')
      .eq('user_id', phone)
      .eq('company_id', companyId)
      .order('updated_at', { ascending: false })
      .limit(1)
      .single();
    
    return data?.messages || [];
  }

  async loadBusinessStats(companyId) {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const today = new Date().toISOString().split('T')[0];
    
    const { data } = await supabase
      .from('appointments_cache')
      .select('*')
      .eq('company_id', companyId)
      .gte('appointment_datetime', today)
      .lt('appointment_datetime', today + 'T23:59:59');
    
    const totalSlots = 50; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ –¥–µ–Ω—å
    const bookedSlots = data?.length || 0;
    const todayLoad = Math.round((bookedSlots / totalSlots) * 100);
    
    return { todayLoad, bookedSlots, totalSlots };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏–∏
   */
  detectBusinessType(company) {
    const title = company.title.toLowerCase();
    const services = company.raw_data?.services || [];
    
    if (title.includes('–±–∞—Ä–±–µ—Ä') || title.includes('barber')) {
      return 'barbershop';
    } else if (title.includes('–Ω–æ–≥—Ç') || title.includes('–º–∞–Ω–∏–∫—é—Ä') || title.includes('nail')) {
      return 'nails';
    } else if (title.includes('–º–∞—Å—Å–∞–∂') || title.includes('—Å–ø–∞') || title.includes('spa')) {
      return 'massage';
    } else if (title.includes('—ç–ø–∏–ª—è—Ü') || title.includes('–ª–∞–∑–µ—Ä')) {
      return 'epilation';
    } else if (title.includes('–±—Ä–æ–≤–∏') || title.includes('—Ä–µ—Å–Ω–∏—Ü')) {
      return 'brows';
    }
    
    return 'beauty'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  getBusinessTerminology(businessType) {
    const terminology = {
      barbershop: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä—à–æ–ø–∞',
        businessType: '–±–∞—Ä–±–µ—Ä—à–æ–ø',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–±–∞—Ä–±–µ—Ä—ã',
        communicationStyle: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º',
        suggestions: '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ –∏ —É—Ö–æ–¥ –∑–∞ –±–æ—Ä–æ–¥–æ–π'
      },
      nails: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞',
        businessType: '–Ω–æ–≥—Ç–µ–≤–∞—è —Å—Ç—É–¥–∏—è',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–º–∞—Å—Ç–µ—Ä–∞',
        communicationStyle: '–≤–µ–∂–ª–∏–≤—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º',
        suggestions: '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –∏ —É—Ö–æ–¥–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'
      },
      massage: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—Å—Å–∞–∂–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞',
        businessType: '–º–∞—Å—Å–∞–∂–Ω—ã–π —Å–∞–ª–æ–Ω',
        services: '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
        specialists: '–º–∞—Å—Å–∞–∂–∏—Å—Ç—ã',
        communicationStyle: '—Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º',
        suggestions: '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫—É—Ä—Å—ã –º–∞—Å—Å–∞–∂–∞'
      },
      epilation: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç—É–¥–∏–∏ —ç–ø–∏–ª—è—Ü–∏–∏',
        businessType: '—Å—Ç—É–¥–∏—è –ª–∞–∑–µ—Ä–Ω–æ–π —ç–ø–∏–ª—è—Ü–∏–∏',
        services: '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
        specialists: '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
        communicationStyle: '–¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º',
        suggestions: '–∫—É—Ä—Å—ã –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      },
      beauty: {
        role: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã',
        businessType: '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
        services: '—É—Å–ª—É–≥–∏',
        specialists: '–º–∞—Å—Ç–µ—Ä–∞',
        communicationStyle: '–ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º',
        suggestions: '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∞–∫—Ü–∏–∏'
      }
    };
    
    return terminology[businessType] || terminology.beauty;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   */
  formatServices(services, businessType) {
    if (!services.length) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥';
    
    return services.slice(0, 20).map(s => {
      const price = s.price_min ? `–æ—Ç ${s.price_min}‚ÇΩ` : '–ø–æ –∑–∞–ø—Ä–æ—Å—É';
      const duration = s.duration ? `${s.duration} –º–∏–Ω` : '';
      return `- ${s.title} (${price}${duration ? ', ' + duration : ''}) [ID: ${s.yclients_id}]`;
    }).join('\n');
  }

  formatStaff(staff, businessType) {
    if (!staff.length) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤';
    
    return staff.map(s => {
      const rating = s.rating ? `‚≠ê ${s.rating}` : '';
      const spec = s.specialization || '—É–Ω–∏–≤–µ—Ä—Å–∞–ª';
      return `- ${s.name} (${spec}${rating ? ', ' + rating : ''}) [ID: ${s.yclients_id}]`;
    }).join('\n');
  }

  formatConversation(messages) {
    if (!messages.length) return '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π';
    
    return messages.map(m => 
      `${m.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ê–¥–º–∏–Ω'}: ${m.content}`
    ).join('\n');
  }

  formatWorkingHours(hours) {
    if (!hours) return '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    return JSON.stringify(hours);
  }

  formatDate(date) {
    return new Date(date).toLocaleDateString('ru-RU');
  }

  getStaffNames(staffIds, staffList) {
    return staffIds
      .map(id => staffList.find(s => s.yclients_id === id)?.name)
      .filter(Boolean)
      .join(', ');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  formatSlots(slots, businessType) {
    if (!slots || !slots.length) {
      return 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–µ–Ω—å.';
    }
    
    const terminology = this.getBusinessTerminology(businessType);
    let text = `üìÖ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å
    const byStaff = {};
    slots.forEach(slot => {
      const staffName = slot.staff_name || '–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä';
      if (!byStaff[staffName]) byStaff[staffName] = [];
      byStaff[staffName].push(slot);
    });
    
    Object.entries(byStaff).slice(0, 3).forEach(([staffName, staffSlots]) => {
      text += `üë§ ${staffName}:\n`;
      staffSlots.slice(0, 5).forEach(slot => {
        text += `  ‚Ä¢ ${slot.time || slot.datetime}\n`;
      });
      text += '\n';
    });
    
    return text;
  }

  formatBookingConfirmation(booking, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    return `–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å ${booking.date} –≤ ${booking.time}. ${terminology.specialists} ${booking.staff_name} –±—É–¥–µ—Ç –≤–∞—Å –∂–¥–∞—Ç—å.`;
  }

  formatPrices(services, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    let text = `üí∞ –ù–∞—à–∏ ${terminology.services}:\n\n`;
    
    services.slice(0, 10).forEach(s => {
      const price = s.price_min === s.price_max ? 
        `${s.price_min}‚ÇΩ` : 
        `${s.price_min}-${s.price_max}‚ÇΩ`;
      text += `${s.title} - ${price}\n`;
    });
    
    return text;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
   */
  parseCommandParams(paramsString) {
    const params = {};
    const paramRegex = /(\w+):\s*([^,\]]+)/g;
    
    let match;
    while ((match = paramRegex.exec(paramsString)) !== null) {
      const [, key, value] = match;
      params[key.trim()] = value.trim();
    }
    
    return params;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
   */
  removeCommands(response) {
    return response.replace(/\[(SEARCH_SLOTS|CREATE_BOOKING|SHOW_PRICES|SHOW_PORTFOLIO)[^\]]*\]/g, '').trim();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  async saveContext(phone, companyId, context, result) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.conversation.push({
      role: 'assistant',
      content: result.response,
      timestamp: new Date().toISOString()
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await supabase
      .from('dialog_contexts')
      .upsert({
        user_id: phone,
        company_id: companyId,
        messages: context.conversation.slice(-50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        updated_at: new Date().toISOString(),
        last_activity: new Date().toISOString(),
        message_count: context.conversation.length
      });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async callAI(prompt) {
    if (!this.aiProvider) {
      this.aiProvider = require('../ai');
    }
    
    return await this.aiProvider._callAI(prompt);
  }

  /**
   * –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
   */
  getErrorMessage(error, businessType) {
    const terminology = this.getBusinessTerminology(businessType);
    
    if (error.message.includes('timeout')) {
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: ${terminology.businessType} –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å!`;
    }
    
    return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  cleanupCache() {
    const now = Date.now();
    for (const [key, value] of this.contextCache.entries()) {
      if (now - value.timestamp > 600000) { // 10 –º–∏–Ω—É—Ç
        this.contextCache.delete(key);
      }
    }
  }
}

module.exports = new AIAdminV2();