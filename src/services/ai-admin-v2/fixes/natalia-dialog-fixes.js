/**
 * Исправления критических проблем из диалога с клиентом Наталия
 * Дата: 30 июля 2025
 * 
 * Проблемы:
 * 1. AI теряет контекст через 7 минут
 * 2. AI сохраняет слово "Стрижка" как имя клиента
 * 3. Failed to save booking to database
 * 4. Напоминания отправляются даже если до записи < 4 часов
 */

// ПРОБЛЕМА 1: Потеря контекста
// В data-loader.js сохраняется контекст только в Supabase, но не в Redis
// Нужно добавить сохранение в Redis в методе saveContext

// ПРОБЛЕМА 2: Неправильное извлечение имени
// В command-handler.js метод extractNameFromMessage() имеет паттерн,
// который срабатывает на любое слово с заглавной буквы в отдельной строке
// Паттерн: /^([А-ЯЁ][а-яё]+)$/m

// Исправленный метод extractNameFromMessage:
function extractNameFromMessage(message) {
  if (!message) return null;
  
  // Список слов, которые НЕ являются именами
  const notNames = [
    'стрижка', 'маникюр', 'педикюр', 'окрашивание', 'укладка', 
    'макияж', 'массаж', 'эпиляция', 'брови', 'ресницы',
    'услуга', 'процедура', 'сегодня', 'завтра', 'послезавтра',
    'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота', 'воскресенье',
    'утром', 'днем', 'вечером', 'утро', 'день', 'вечер'
  ];
  
  // Паттерны для поиска имени
  const patterns = [
    /меня зовут\s+([А-ЯЁа-яё]+)/i,
    /я\s+([А-ЯЁа-яё]+)(?:\s|$)/i,  // "я Арсен" - имя после "я" с пробелом
    /я\s*[-–—]\s*([А-ЯЁа-яё]+)/i,
    /это\s+([А-ЯЁа-яё]+)/i,
    // УБИРАЕМ этот паттерн: /^([А-ЯЁ][а-яё]+)$/m
  ];
  
  // Также проверяем распространенные имена в сообщении
  const commonNames = [
    'Александр', 'Алексей', 'Андрей', 'Антон', 'Артем', 'Артур', 'Арсен', 'Арсений', 'Борис', 
    'Вадим', 'Валентин', 'Валерий', 'Василий', 'Виктор', 'Виталий', 'Владимир', 'Владислав',
    'Вячеслав', 'Геннадий', 'Георгий', 'Глеб', 'Григорий', 'Даниил', 'Денис', 'Дмитрий',
    'Евгений', 'Егор', 'Иван', 'Игорь', 'Илья', 'Кирилл', 'Константин', 'Леонид', 'Максим',
    'Марк', 'Матвей', 'Михаил', 'Никита', 'Николай', 'Олег', 'Павел', 'Петр', 'Роман',
    'Руслан', 'Сергей', 'Станислав', 'Степан', 'Тимофей', 'Тимур', 'Федор', 'Филипп', 'Юрий',
    'Ярослав', 'Анна', 'Алена', 'Алина', 'Алиса', 'Алла', 'Анастасия', 'Ангелина', 'Анжела',
    'Валентина', 'Валерия', 'Варвара', 'Василиса', 'Вера', 'Вероника', 'Виктория', 'Галина',
    'Дарья', 'Диана', 'Ева', 'Евгения', 'Екатерина', 'Елена', 'Елизавета', 'Жанна', 'Зинаида',
    'Инна', 'Ирина', 'Карина', 'Кристина', 'Ксения', 'Лариса', 'Лидия', 'Лилия', 'Любовь',
    'Людмила', 'Маргарита', 'Марина', 'Мария', 'Милана', 'Надежда', 'Наталья', 'Наталия', 'Нина', 'Оксана',
    'Ольга', 'Полина', 'Раиса', 'Регина', 'Светлана', 'София', 'Таисия', 'Тамара', 'Татьяна',
    'Ульяна', 'Юлия', 'Яна'
  ];
  
  // Пробуем найти имя по паттернам
  for (const pattern of patterns) {
    const match = message.match(pattern);
    if (match) {
      const potentialName = match[1];
      // Проверяем, что это не услуга или другое слово
      if (!notNames.includes(potentialName.toLowerCase())) {
        logger.debug(`Extracted name from pattern: ${potentialName}`);
        return potentialName;
      }
    }
  }
  
  // Проверяем на распространенные имена
  const words = message.split(/\s+/);
  for (const word of words) {
    // Нормализуем для сравнения
    const normalizedWord = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    if (commonNames.includes(normalizedWord)) {
      logger.debug(`Found common name: ${normalizedWord}`);
      return normalizedWord;
    }
  }
  
  logger.debug(`Could not extract name from message: ${message}`);
  return null;
}

// ПРОБЛЕМА 3: Сохранение в БД
// В логах видно: Failed to save booking to database
// Нужно проверить метод сохранения в Supabase после создания записи

// ПРОБЛЕМА 4: Напоминания для близких записей
// В reminder-scheduler.js нужно добавить проверку:
function shouldScheduleReminder(bookingDateTime) {
  const now = new Date();
  const bookingTime = new Date(bookingDateTime);
  const hoursUntilBooking = (bookingTime - now) / (1000 * 60 * 60);
  
  // Не создаем напоминания если до записи менее 4 часов
  if (hoursUntilBooking < 4) {
    logger.info(`Skipping reminder - booking in ${hoursUntilBooking.toFixed(1)} hours (less than 4)`);
    return false;
  }
  
  return true;
}

module.exports = {
  extractNameFromMessage,
  shouldScheduleReminder
};