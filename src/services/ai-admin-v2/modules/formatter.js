const logger = require('../../../utils/logger').child({ module: 'ai-admin-v2:formatter' });

class Formatter {
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatServices(services, businessType) {
    return services.map(s => 
      `- ${s.title} (${s.duration} –º–∏–Ω, ${s.price} —Ä—É–±)`
    ).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
   */
  formatStaff(staff, businessType) {
    return staff.map(s => 
      `- ${s.name} (—Ä–µ–π—Ç–∏–Ω–≥: ${s.rating || '5.0'})`
    ).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   */
  formatTodayStaff(scheduleByDate, staffList, availableSlots = null) {
    const today = new Date().toISOString().split('T')[0];
    const todaySchedule = scheduleByDate[today] || [];
    
    logger.info(`Formatting today's staff for ${today}:`, {
      scheduleCount: todaySchedule.length,
      scheduleByDateKeys: Object.keys(scheduleByDate),
      staffCount: staffList?.length || 0,
      todaySchedule: todaySchedule,
      scheduleByDate: scheduleByDate
    });
    
    if (todaySchedule.length === 0) {
      logger.warn(`No staff working today (${today})`);
      return "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";
    }
    
    const workingStaffIds = todaySchedule.map(s => s.staff_id);
    
    logger.info(`Staff IDs from schedule:`, workingStaffIds);
    logger.info(`Staff list IDs:`, staffList.map(s => ({ id: s.yclients_id, name: s.name })));
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let workingStaff = staffList.filter(staff => 
      workingStaffIds.includes(staff.yclients_id)
    );
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
    if (availableSlots) {
      const staffWithSlots = new Set();
      availableSlots.forEach(slot => {
        if (slot.staff_id) {
          staffWithSlots.add(slot.staff_id);
        }
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
      workingStaff = workingStaff.filter(staff => 
        staffWithSlots.has(staff.yclients_id)
      );
      
      logger.info(`Filtered by available slots:`, {
        staffWithSlots: Array.from(staffWithSlots),
        filteredCount: workingStaff.length
      });
    }
    
    logger.info(`Working staff today:`, {
      workingStaffIds,
      workingStaffCount: workingStaff.length,
      workingStaff: workingStaff.map(s => ({ id: s.yclients_id, name: s.name }))
    });
    
    if (workingStaff.length === 0) {
      logger.warn(`No working staff found in staffList for IDs: ${workingStaffIds.join(', ')}`);
      return "–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤...";
    }
    
    return workingStaff.map(staff => {
      const schedule = todaySchedule.find(s => s.staff_id === staff.yclients_id);
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –≤ –ë–î –Ω–µ—Ç start_time –∏ end_time
      // const timeRange = schedule ? `${schedule.start_time}-${schedule.end_time}` : '';
      return `- ${staff.name}`;
    }).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
   */
  formatStaffSchedules(scheduleByDate, staffList) {
    const days = Object.keys(scheduleByDate).sort().slice(0, 3);
    return days.map(date => {
      const daySchedule = scheduleByDate[date];
      const staffNames = this.getStaffNames(
        daySchedule.map(s => s.staff_id), 
        staffList
      );
      return `${this.formatDateForDisplay(date)}: ${staffNames}`;
    }).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
   */
  formatConversation(messages) {
    return messages.slice(-5).map(m => 
      `${m.role}: ${m.content}`
    ).join('\n');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
   */
  formatWorkingHours(hours) {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "10:00-22:00")
    if (typeof hours === 'string') {
      return hours;
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –¥–Ω—è–º
    if (hours && typeof hours === 'object' && !hours.start) {
      // –ë–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
      const today = days[new Date().getDay()];
      
      if (hours[today]) {
        return `${hours[today].start || '10:00'}-${hours[today].end || '22:00'}`;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü
      if (hours.monday) {
        return `${hours.monday.start || '10:00'}-${hours.monday.end || '22:00'}`;
      }
    }
    
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –µ–¥–∏–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    return `${hours?.start || '10:00'}-${hours?.end || '22:00'}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
   */
  formatDate(date) {
    return new Date(date).toLocaleDateString('ru-RU');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  formatDateForDisplay(dateStr) {
    const date = new Date(dateStr + 'T12:00:00'); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    const today = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(today.getDate() + 1);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    const dateOnly = dateStr;
    const todayOnly = today.toISOString().split('T')[0];
    const tomorrowOnly = tomorrow.toISOString().split('T')[0];
    
    if (dateOnly === todayOnly) {
      return '–°–µ–≥–æ–¥–Ω—è';
    } else if (dateOnly === tomorrowOnly) {
      return '–ó–∞–≤—Ç—Ä–∞';
    } else {
      const dayNames = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
      const monthNames = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', 
                          '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
      
      const dayOfWeek = dayNames[date.getDay()];
      const day = date.getDate();
      const month = monthNames[date.getMonth()];
      
      return `${dayOfWeek}, ${day} ${month}`;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã
   */
  parseRelativeDate(dateStr) {
    if (!dateStr) return new Date().toISOString().split('T')[0];
    
    const today = new Date();
    const lowerDate = dateStr.toLowerCase();
    
    if (lowerDate === '—Å–µ–≥–æ–¥–Ω—è' || lowerDate === 'today') {
      return today.toISOString().split('T')[0];
    } else if (lowerDate === '–∑–∞–≤—Ç—Ä–∞' || lowerDate === 'tomorrow') {
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);
      return tomorrow.toISOString().split('T')[0];
    } else if (lowerDate === '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞') {
      const dayAfter = new Date(today);
      dayAfter.setDate(today.getDate() + 2);
      return dayAfter.toISOString().split('T')[0];
    } else if (lowerDate.includes('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')) {
      return this.getNextWeekday(1);
    } else if (lowerDate.includes('–≤—Ç–æ—Ä–Ω–∏–∫')) {
      return this.getNextWeekday(2);
    } else if (lowerDate.includes('—Å—Ä–µ–¥–∞')) {
      return this.getNextWeekday(3);
    } else if (lowerDate.includes('—á–µ—Ç–≤–µ—Ä–≥')) {
      return this.getNextWeekday(4);
    } else if (lowerDate.includes('–ø—è—Ç–Ω–∏—Ü–∞')) {
      return this.getNextWeekday(5);
    } else if (lowerDate.includes('—Å—É–±–±–æ—Ç–∞')) {
      return this.getNextWeekday(6);
    } else if (lowerDate.includes('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')) {
      return this.getNextWeekday(0);
    }
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—É—é –¥–∞—Ç—É
    const parsed = new Date(dateStr);
    if (!isNaN(parsed.getTime())) {
      return parsed.toISOString().split('T')[0];
    }
    
    return today.toISOString().split('T')[0];
  }

  getNextWeekday(targetDay) {
    const today = new Date();
    const currentDay = today.getDay();
    const daysUntilTarget = (targetDay - currentDay + 7) % 7 || 7;
    const targetDate = new Date(today);
    targetDate.setDate(today.getDate() + daysUntilTarget);
    return targetDate.toISOString().split('T')[0];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ø–æ ID
   */
  getStaffNames(staffIds, staffList) {
    return staffIds.map(id => {
      const staff = staffList.find(s => s.yclients_id === id);
      return staff ? staff.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä';
    }).join(', ');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatSlots(slots, businessType) {
    if (!slots || !slots.length) {
      return 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–µ–Ω—å.';
    }
    
    let text = '';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å
    const byStaff = {};
    slots.forEach(slot => {
      const staffName = slot.staff_name || '–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä';
      if (!byStaff[staffName]) byStaff[staffName] = [];
      byStaff[staffName].push(slot);
    });
    
    Object.entries(byStaff).slice(0, 3).forEach(([staffName, staffSlots], index) => {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
      const byDate = {};
      staffSlots.forEach(slot => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏–∑ datetime (—É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è)
        let date;
        if (slot.date) {
          date = slot.date;
        } else if (slot.datetime) {
          // –ï—Å–ª–∏ datetime –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
          date = slot.datetime.split('T')[0];
        } else {
          date = new Date().toISOString().split('T')[0];
        }
        
        if (!byDate[date]) byDate[date] = [];
        byDate[date].push(slot);
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
      Object.entries(byDate).forEach(([date, dateSlots]) => {
        const formattedDate = this.formatDateForDisplay(date);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
        const timeGroups = this.groupSlotsByTimeOfDay(dateSlots);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ —Å —Å–ª–æ—Ç–∞–º–∏
        const hasSlots = timeGroups.morning.length > 0 || timeGroups.day.length > 0 || timeGroups.evening.length > 0;
        
        if (hasSlots) {
          text += `–£ ${staffName} —Å–≤–æ–±–æ–¥–Ω–æ ${formattedDate.toLowerCase()}:\n`;
          
          const timePeriods = [];
          if (timeGroups.morning.length > 0) {
            timePeriods.push(`–° —É—Ç—Ä–∞: ${timeGroups.morning.join(', ')}`);
          }
          if (timeGroups.day.length > 0) {
            timePeriods.push(`–î–Ω—ë–º: ${timeGroups.day.join(', ')}`);
          }
          if (timeGroups.evening.length > 0) {
            timePeriods.push(`–í–µ—á–µ—Ä–æ–º: ${timeGroups.evening.join(', ')}`);
          }
          
          text += timePeriods.join('\n') + '\n\n';
        }
      });
    });
    
    return text.trim();
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
   */
  groupSlotsByTimeOfDay(slots) {
    logger.info('groupSlotsByTimeOfDay called with slots:', {
      totalSlots: slots.length,
      slots: slots.map(s => s.time || s.datetime?.split('T')[1]?.substring(0, 5))
    });
    
    const groups = {
      morning: [],  // –¥–æ 12:00
      day: [],      // 12:00 - 17:00
      evening: []   // –ø–æ—Å–ª–µ 17:00
    };
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedSlots = slots.sort((a, b) => {
      const timeA = a.time || (a.datetime ? a.datetime.split(' ')[1].substring(0, 5) : '');
      const timeB = b.time || (b.datetime ? b.datetime.split(' ')[1].substring(0, 5) : '');
      return timeA.localeCompare(timeB);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
    const periodSlots = {
      morning: [],
      day: [],
      evening: []
    };
    
    sortedSlots.forEach(slot => {
      const time = slot.time || (slot.datetime ? slot.datetime.split('T')[1]?.substring(0, 5) : '');
      if (!time) return;
      
      const hour = parseInt(time.split(':')[0]);
      const minutes = parseInt(time.split(':')[1]);
      const hourDecimal = hour + (minutes / 60);
      
      if (hour < 12) {
        periodSlots.morning.push({ time, hour, minutes, hourDecimal, slot });
      } else if (hour < 17) {
        periodSlots.day.push({ time, hour, minutes, hourDecimal, slot });
      } else {
        periodSlots.evening.push({ time, hour, minutes, hourDecimal, slot });
      }
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç—ã —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º 1 —á–∞—Å –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏)
    const selectSlotsWithGaps = (slots, maxCount) => {
      if (slots.length === 0) return [];
      if (slots.length === 1) return [slots[0].time];
      
      const selected = [];
      let lastSelectedHourDecimal = -999; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      
      logger.info('selectSlotsWithGaps called:', { 
        slotsCount: slots.length, 
        maxCount,
        slots: slots.map(s => ({ time: s.time, hourDecimal: s.hourDecimal }))
      });
      
      // –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ maxCount, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
      if (slots.length <= maxCount) {
        return slots.map(s => s.time);
      }
      
      // –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏
      const minGap = 1.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ 1 —á–∞—Å
      
      for (let i = 0; i < slots.length; i++) {
        const slot = slots[i];
        if (selected.length >= maxCount) {
          logger.info('Reached maxCount, stopping selection');
          break;
        }
        
        const gap = slot.hourDecimal - lastSelectedHourDecimal;
        logger.info(`Checking slot ${i+1}/${slots.length}:`, { 
          time: slot.time, 
          hourDecimal: slot.hourDecimal,
          lastSelectedHourDecimal,
          gap,
          willSelect: gap >= minGap,
          currentSelectedCount: selected.length,
          maxCount
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—à–ª–æ –º–∏–Ω–∏–º—É–º 1 —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        if (gap >= minGap) {
          selected.push(slot.time);
          lastSelectedHourDecimal = slot.hourDecimal;
          logger.info(`Selected slot ${selected.length}/${maxCount}:`, slot.time);
        }
      }
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ —Å–ª–æ—Ç—ã
      if (selected.length < maxCount) {
        // –ë–µ—Ä–µ–º —Å–ª–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
        const remainingSlots = slots.filter(s => !selected.includes(s.time));
        const slotsToAdd = maxCount - selected.length;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        if (remainingSlots.length > 0) {
          const step = Math.max(1, Math.floor(remainingSlots.length / slotsToAdd));
          for (let i = 0; i < remainingSlots.length && selected.length < maxCount; i += step) {
            selected.push(remainingSlots[i].time);
            logger.info(`Added additional slot ${selected.length}/${maxCount}:`, remainingSlots[i].time);
          }
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      selected.sort();
      
      return selected;
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é (2-3 —Å–ª–æ—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –ø–µ—Ä–∏–æ–¥–µ)
    groups.morning = selectSlotsWithGaps(periodSlots.morning, 3);
    groups.day = selectSlotsWithGaps(periodSlots.day, 3);
    groups.evening = selectSlotsWithGaps(periodSlots.evening, 3);
    
    // –ü–æ–¥—Ä–æ–±–Ω—ã–π –¥–µ–±–∞–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info('Slot gap selection detailed debug:', {
      morning: {
        input: periodSlots.morning.map(s => ({ 
          time: s.time, 
          hour: s.hour, 
          minutes: s.minutes,
          hourDecimal: s.hourDecimal 
        })),
        output: groups.morning
      },
      day: {
        input: periodSlots.day.map(s => ({ 
          time: s.time, 
          hour: s.hour, 
          minutes: s.minutes,
          hourDecimal: s.hourDecimal 
        })),
        output: groups.day
      },
      evening: {
        input: periodSlots.evening.map(s => ({ 
          time: s.time, 
          hour: s.hour, 
          minutes: s.minutes,
          hourDecimal: s.hourDecimal 
        })),
        output: groups.evening
      }
    });
    
    return groups;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
   */
  formatBookingConfirmation(booking, businessType) {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
    logger.info('formatBookingConfirmation received:', {
      booking: booking,
      bookingType: typeof booking,
      hasRecordId: !!booking?.record_id,
      hasId: !!booking?.id,
      recordIdValue: booking?.record_id,
      idValue: booking?.id
    });
    const recordId = booking?.record_id || booking?.id || booking?.recordId;
    return `–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: ${recordId}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
   */
  formatPrices(services, businessType) {
    if (!services || services.length === 0) {
      return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–µ—Ä–≤–æ–π —É—Å–ª—É–≥–µ
    const firstService = services[0]?.title?.toLowerCase() || '';
    let intro = '';
    
    if (firstService.includes('—Å—Ç—Ä–∏–∂–∫–∞')) {
      intro = '–ù–∞—à–∏ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∏–∂–∫–∏:';
    } else if (firstService.includes('–±–æ—Ä–æ–¥')) {
      intro = '–£—Å–ª—É–≥–∏ –¥–ª—è –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤:';
    } else if (firstService.includes('–º–∞–Ω–∏–∫—é—Ä')) {
      intro = '–ù–∞—à–∏ —Ü–µ–Ω—ã –Ω–∞ –º–∞–Ω–∏–∫—é—Ä:';
    } else if (firstService.includes('–ø–µ–¥–∏–∫—é—Ä')) {
      intro = '–ù–∞—à–∏ —Ü–µ–Ω—ã –Ω–∞ –ø–µ–¥–∏–∫—é—Ä:';
    } else if (firstService.includes('–±—Ä–æ–≤')) {
      intro = '–£—Å–ª—É–≥–∏ –¥–ª—è –±—Ä–æ–≤–µ–π:';
    } else if (firstService.includes('—Ä–µ—Å–Ω–∏—Ü')) {
      intro = '–£—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ—Å–Ω–∏—Ü:';
    } else if (firstService.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ')) {
      intro = '–ù–∞—à–∏ —Ü–µ–Ω—ã –Ω–∞ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ:';
    } else {
      intro = '–ù–∞—à–∏ —É—Å–ª—É–≥–∏:';
    }
    
    let text = intro + '\n\n';
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —É—Å–ª—É–≥–∏ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
    const basicServices = [];
    const complexServices = [];
    
    services.forEach(service => {
      const title = service.title?.toLowerCase() || '';
      if (title.includes(' + ') || title.includes('luxina') || title.includes('–æ—Ç–µ—Ü')) {
        complexServices.push(service);
      } else {
        basicServices.push(service);
      }
    });
    
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    if (basicServices.length > 0) {
      basicServices.forEach(service => {
        const price = service.price_min || service.price || 0;
        const priceStr = price > 0 ? `${price} —Ä—É–±` : '—Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        
        const duration = service.seance_length || 
                        service.duration || 
                        service.raw_data?.duration ||
                        0;
        const durationStr = duration ? ` (${Math.round(duration / 60)} –º–∏–Ω)` : '';
        
        // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        let title = service.title;
        if (title.length > 40) {
          title = title.substring(0, 40) + '...';
        }
        
        text += `${title} - ${priceStr}${durationStr}\n`;
      });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    if (complexServices.length > 0 && services.length > 5) {
      text += '\n–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n';
      complexServices.slice(0, 3).forEach(service => {
        const price = service.price_min || service.price || 0;
        const priceStr = price > 0 ? `${price} —Ä—É–±` : '—Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        
        // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        let title = service.title;
        if (title.length > 40) {
          title = title.substring(0, 40) + '...';
        }
        
        text += `${title} - ${priceStr}\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –µ—Å–ª–∏ —É—Å–ª—É–≥ –º–Ω–æ–≥–æ
    if (services.length > 10) {
      text += '\n–ü–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
    }
    
    return text.trim();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
   */
  formatVisitHistory(visitHistory) {
    if (!visitHistory || visitHistory.length === 0) {
      return '–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç';
    }
    
    const lastVisit = visitHistory[0];
    const visitCount = visitHistory.length;
    
    return `${visitCount} –≤–∏–∑–∏—Ç–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–π: ${this.formatDate(lastVisit.date)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  getErrorMessage(error, businessType) {
    const errorMessages = {
      'no_slots': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–µ–Ω—å.',
      'booking_failed': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.',
      'service_not_found': '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.',
      'default': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    };
    
    return errorMessages[error.code] || errorMessages.default;
  }
}

module.exports = new Formatter();