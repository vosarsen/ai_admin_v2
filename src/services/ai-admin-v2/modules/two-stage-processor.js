/**
 * Two-Stage Processor
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 * 
 * –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (AI ‚Üí JSON —Å –∫–æ–º–∞–Ω–¥–∞–º–∏)
 * –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Üí AI ‚Üí –¢–µ–∫—Å—Ç)
 */

const logger = require('../../../utils/logger').child({ module: 'two-stage-processor' });
const commandHandler = require('./command-handler');

class TwoStageProcessor {
  constructor() {
    this.commandPrompt = require('../prompts/two-stage-command-prompt');
    this.responsePrompt = require('../prompts/two-stage-response-prompt');
    this.performanceMetrics = {
      stage1Times: [],
      stage2Times: [],
      commandExecutionTimes: []
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processTwoStage(message, context, aiService) {
    const startTime = Date.now();
    logger.info('üöÄ Starting Two-Stage processing');
    
    try {
      // ============ –≠–¢–ê–ü 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ö–û–ú–ê–ù–î ============
      const stage1Start = Date.now();
      logger.info('üìã Stage 1: Command extraction');
      
      // –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
      const commandPromptText = this.commandPrompt.getPrompt({
        message,
        phone: context.phone,
        company: context.company,
        client: context.client,
        services: context.services,
        staff: context.staff,
        redisContext: context.redisContext,
        intermediateContext: context.intermediateContext
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º AI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
      const commandsResponse = await aiService.callAI(commandPromptText, {
        message: message,
        promptName: 'two-stage-command'
      });
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      const commands = this.parseCommandsResponse(commandsResponse);
      
      const stage1Time = Date.now() - stage1Start;
      logger.info(`‚úÖ Stage 1 completed in ${stage1Time}ms, found ${commands.length} commands`);
      this.performanceMetrics.stage1Times.push(stage1Time);
      
      // ============ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î ============
      let commandResults = [];
      let executedCommands = [];
      
      if (commands.length > 0) {
        const execStart = Date.now();
        logger.info(`‚öôÔ∏è Executing ${commands.length} commands`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        // –î–æ–±–∞–≤–ª—è–µ–º message –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const commandContext = { ...context, message };
        commandResults = await this.executeCommandsOptimized(commands, commandContext);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        executedCommands = commands.map((cmd, index) => ({
          command: cmd.name,
          params: cmd.params,
          success: commandResults[index]?.success || false,
          result: commandResults[index]
        }));
        
        const execTime = Date.now() - execStart;
        logger.info(`‚úÖ Commands executed in ${execTime}ms`);
        this.performanceMetrics.commandExecutionTimes.push(execTime);
      }
      
      // ============ –≠–¢–ê–ü 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê ============
      const stage2Start = Date.now();
      logger.info('üí¨ Stage 2: Response generation');
      
      // –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞  
      // redisContext —Å–æ–¥–µ—Ä–∂–∏—Ç lastActivity –∏ lastMessageDate –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
      const responsePromptText = this.responsePrompt.getPrompt({
        message,
        company: context.company,
        client: context.client,
        commandResults,
        executedCommands,
        intermediateContext: context.intermediateContext,
        lastActivity: context.redisContext?.lastActivity || context.lastActivity,
        lastMessageDate: context.redisContext?.lastMessageDate || context.lastMessageDate
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
      const finalResponse = await aiService.callAI(responsePromptText, {
        message: message,
        promptName: 'two-stage-response'
      });
      
      const stage2Time = Date.now() - stage2Start;
      logger.info(`‚úÖ Stage 2 completed in ${stage2Time}ms`);
      this.performanceMetrics.stage2Times.push(stage2Time);
      
      // ============ –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø ============
      const totalTime = Date.now() - startTime;
      logger.info(`üéâ Two-Stage processing completed in ${totalTime}ms`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.logPerformanceStats();
      
      return {
        response: finalResponse,
        commands: executedCommands,
        iterations: 2, // –í—Å–µ–≥–¥–∞ 2 —ç—Ç–∞–ø–∞
        metrics: {
          stage1Time,
          stage2Time,
          commandExecutionTime: commandResults.length > 0 ? 
            this.performanceMetrics.commandExecutionTimes[this.performanceMetrics.commandExecutionTimes.length - 1] : 0,
          totalTime
        }
      };
      
    } catch (error) {
      logger.error('Error in Two-Stage processing:', error);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
   */
  parseCommandsResponse(response) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        logger.warn('No JSON found in command response, assuming no commands needed');
        return [];
      }
      
      const parsed = JSON.parse(jsonMatch[0]);
      
      if (!parsed.commands || !Array.isArray(parsed.commands)) {
        logger.warn('Invalid commands structure in response');
        return [];
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      return parsed.commands.filter(cmd => {
        if (!cmd.name) {
          logger.warn('Command without name found, skipping');
          return false;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        cmd.params = cmd.params || {};
        
        return true;
      });
      
    } catch (error) {
      logger.error('Failed to parse commands JSON:', error);
      
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ regex
      return this.fallbackCommandExtraction(response);
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ regex
   */
  fallbackCommandExtraction(response) {
    logger.info('Using fallback command extraction');
    
    const commands = [];
    const commandRegex = /\[(SEARCH_SLOTS|CREATE_BOOKING|SHOW_PRICES|CANCEL_BOOKING|CHECK_STAFF_SCHEDULE)([^\]]*)\]/g;
    
    let match;
    while ((match = commandRegex.exec(response)) !== null) {
      const [, commandName, paramsString] = match;
      
      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const params = {};
      if (paramsString) {
        const paramRegex = /(\w+)[:=]\s*([^,]+)/g;
        let paramMatch;
        while ((paramMatch = paramRegex.exec(paramsString)) !== null) {
          const [, key, value] = paramMatch;
          params[key.trim()] = value.trim();
        }
      }
      
      commands.push({
        name: commandName,
        params
      });
    }
    
    return commands;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async executeCommandsOptimized(commands, context) {
    const results = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–∏–ø—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const independentCommands = [];
    const dependentCommands = [];
    
    for (const cmd of commands) {
      if (cmd.name === 'CREATE_BOOKING') {
        // CREATE_BOOKING –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SEARCH_SLOTS
        dependentCommands.push(cmd);
      } else {
        independentCommands.push(cmd);
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if (independentCommands.length > 0) {
      logger.info(`Executing ${independentCommands.length} independent commands in parallel`);
      
      const independentResults = await Promise.all(
        independentCommands.map(cmd => this.executeSingleCommand(cmd, context))
      );
      
      results.push(...independentResults);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const cmd of dependentCommands) {
      logger.info(`Executing dependent command: ${cmd.name}`);
      const result = await this.executeSingleCommand(cmd, context);
      results.push(result);
    }
    
    return results;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
   */
  async executeSingleCommand(cmd, context) {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è commandHandler
      const commandObj = {
        command: cmd.name,
        params: cmd.params,
        originalText: `[${cmd.name}]`
      };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π commandHandler
      const results = await commandHandler.executeCommands([commandObj], context);
      
      if (results && results.length > 0) {
        const result = results[0];
        return {
          command: cmd.name,
          success: true,
          data: result.data || result,
          ...result
        };
      }
      
      return {
        command: cmd.name,
        success: false,
        error: 'No result returned'
      };
      
    } catch (error) {
      logger.error(`Error executing command ${cmd.name}:`, error);
      return {
        command: cmd.name,
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  logPerformanceStats() {
    const avg = (arr) => arr.length > 0 ? 
      Math.round(arr.reduce((a, b) => a + b, 0) / arr.length) : 0;
    
    const stats = {
      avgStage1: avg(this.performanceMetrics.stage1Times),
      avgStage2: avg(this.performanceMetrics.stage2Times),
      avgCommandExec: avg(this.performanceMetrics.commandExecutionTimes),
      totalCalls: this.performanceMetrics.stage1Times.length
    };
    
    if (stats.totalCalls % 10 === 0 && stats.totalCalls > 0) {
      logger.info('üìä Two-Stage Performance Stats:', stats);
    }
  }

  /**
   * –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  resetMetrics() {
    this.performanceMetrics = {
      stage1Times: [],
      stage2Times: [],
      commandExecutionTimes: []
    };
  }
}

module.exports = new TwoStageProcessor();