const logger = require('../utils/logger');
const bookingMonitor = require('../services/booking-monitor');

/**
 * Worker –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ YClients
 */
async function startBookingMonitorWorker() {
  logger.info('üöÄ Starting booking monitor worker');

  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  bookingMonitor.start();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
  process.on('SIGTERM', async () => {
    logger.info('üìõ SIGTERM received, stopping booking monitor...');
    bookingMonitor.stop();
    process.exit(0);
  });

  process.on('SIGINT', async () => {
    logger.info('üìõ SIGINT received, stopping booking monitor...');
    bookingMonitor.stop();
    process.exit(0);
  });

  // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
  process.on('uncaughtException', (error) => {
    logger.error('‚ùå Uncaught exception:', error);
    bookingMonitor.stop();
    process.exit(1);
  });

  process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚ùå Unhandled rejection:', reason);
    bookingMonitor.stop();
    process.exit(1);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º worker
startBookingMonitorWorker().catch((error) => {
  logger.error('‚ùå Failed to start booking monitor worker:', error);
  process.exit(1);
});