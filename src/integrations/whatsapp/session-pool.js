/**
 * WhatsApp Session Pool Manager
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ WhatsApp —Å–µ—Å—Å–∏—è–º–∏
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è
 */

const { makeWASocket, DisconnectReason, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const pino = require('pino');
const path = require('path');
const fs = require('fs-extra');
const EventEmitter = require('events');
const logger = require('../../utils/logger');

class WhatsAppSessionPool extends EventEmitter {
    constructor() {
        super();
        this.sessions = new Map(); // companyId -> session
        this.authPaths = new Map(); // companyId -> authPath
        this.reconnectAttempts = new Map(); // companyId -> attempts
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 5000;
        
        // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
        this.baseAuthPath = path.join(process.cwd(), 'baileys_sessions');
        this.ensureBaseDirectory();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π
     */
    async ensureBaseDirectory() {
        await fs.ensureDir(this.baseAuthPath);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
     */
    async getOrCreateSession(companyId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        if (this.sessions.has(companyId)) {
            const session = this.sessions.get(companyId);
            if (session.ws && session.ws.readyState === 1) {
                logger.info(`‚úÖ Using existing session for company ${companyId}`);
                return session;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        logger.info(`üîÑ Creating new session for company ${companyId}`);
        return await this.createSession(companyId);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
     */
    async createSession(companyId) {
        try {
            // –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è auth –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
            const authPath = path.join(this.baseAuthPath, `company_${companyId}`);
            await fs.ensureDir(authPath);
            this.authPaths.set(companyId, authPath);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const { state, saveCreds } = await useMultiFileAuthState(authPath);

            // –°–æ–∑–¥–∞–µ–º socket
            const sock = makeWASocket({
                auth: state,
                printQRInTerminal: false,
                logger: pino({ level: 'error' }),
                browser: ['AI Admin', 'Chrome', '1.0.0'],
                markOnlineOnConnect: true,
                generateHighQualityLinkPreview: false,
                syncFullHistory: false
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—É–ª
            this.sessions.set(companyId, sock);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers(companyId, sock, saveCreds);

            return sock;
        } catch (error) {
            logger.error(`Failed to create session for company ${companyId}:`, error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏
     */
    setupEventHandlers(companyId, sock, saveCreds) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;

            if (qr) {
                logger.info(`üì± QR Code generated for company ${companyId}`);
                this.emit('qr', { companyId, qr });
            }

            if (connection === 'close') {
                const shouldReconnect = (lastDisconnect?.error instanceof Boom)
                    ? lastDisconnect.error.output.statusCode !== DisconnectReason.loggedOut
                    : true;

                if (shouldReconnect) {
                    await this.handleReconnect(companyId);
                } else {
                    logger.warn(`Session logged out for company ${companyId}`);
                    await this.removeSession(companyId);
                }
            }

            if (connection === 'open') {
                logger.info(`‚úÖ WhatsApp connected for company ${companyId}`);
                this.reconnectAttempts.set(companyId, 0);
                this.emit('connected', { companyId });
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials
        sock.ev.on('creds.update', saveCreds);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sock.ev.on('messages.upsert', async ({ messages }) => {
            for (const msg of messages) {
                if (!msg.key.fromMe && msg.message) {
                    this.emit('message', { companyId, message: msg });
                }
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
     */
    async handleReconnect(companyId) {
        const attempts = this.reconnectAttempts.get(companyId) || 0;
        
        if (attempts >= this.maxReconnectAttempts) {
            logger.error(`Max reconnection attempts reached for company ${companyId}`);
            await this.removeSession(companyId);
            return;
        }

        const delay = this.reconnectDelay * Math.pow(2, attempts); // Exponential backoff
        logger.info(`üîÑ Reconnecting company ${companyId} in ${delay}ms (attempt ${attempts + 1}/${this.maxReconnectAttempts})`);
        
        this.reconnectAttempts.set(companyId, attempts + 1);
        
        setTimeout(async () => {
            try {
                await this.createSession(companyId);
            } catch (error) {
                logger.error(`Reconnection failed for company ${companyId}:`, error);
            }
        }, delay);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
     */
    async removeSession(companyId) {
        const sock = this.sessions.get(companyId);
        if (sock) {
            sock.ev.removeAllListeners();
            sock.ws?.close();
        }
        
        this.sessions.delete(companyId);
        this.reconnectAttempts.delete(companyId);
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º auth –¥–∞–Ω–Ω—ã–µ
        // const authPath = this.authPaths.get(companyId);
        // if (authPath) {
        //     await fs.remove(authPath);
        // }
        
        logger.info(`üóëÔ∏è Session removed for company ${companyId}`);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
     */
    async sendMessage(companyId, phone, message) {
        const sock = await this.getOrCreateSession(companyId);
        
        if (!sock || sock.ws?.readyState !== 1) {
            throw new Error(`No active session for company ${companyId}`);
        }

        const jid = `${phone}@s.whatsapp.net`;
        
        try {
            const result = await sock.sendMessage(jid, { text: message });
            logger.info(`‚úÖ Message sent for company ${companyId} to ${phone}`);
            return result;
        } catch (error) {
            logger.error(`Failed to send message for company ${companyId}:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
     */
    getSessionStatus(companyId) {
        const sock = this.sessions.get(companyId);
        
        if (!sock) {
            return { connected: false, status: 'not_initialized' };
        }

        const connected = sock.ws?.readyState === 1;
        const status = connected ? 'connected' : 'disconnected';
        
        return { 
            connected, 
            status,
            reconnectAttempts: this.reconnectAttempts.get(companyId) || 0
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –∏ –æ–∂–∏–¥–∞–µ—Ç QR –∫–æ–¥
     */
    async initializeSession(companyId) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        await this.removeSession(companyId);
        
        // –û—á–∏—â–∞–µ–º auth –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        const authPath = path.join(this.baseAuthPath, `company_${companyId}`);
        await fs.remove(authPath);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        const sock = await this.createSession(companyId);
        
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                this.removeListener('qr', qrHandler);
                this.removeListener('connected', connectedHandler);
                reject(new Error('QR code generation timeout'));
            }, 60000); // 1 minute timeout

            const qrHandler = (data) => {
                if (data.companyId === companyId) {
                    clearTimeout(timeout);
                    this.removeListener('connected', connectedHandler);
                    resolve({ qr: data.qr });
                }
            };

            const connectedHandler = (data) => {
                if (data.companyId === companyId) {
                    clearTimeout(timeout);
                    this.removeListener('qr', qrHandler);
                    resolve({ connected: true });
                }
            };

            this.once('qr', qrHandler);
            this.once('connected', connectedHandler);
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
     */
    getActiveSessions() {
        const sessions = [];
        
        for (const [companyId, sock] of this.sessions) {
            sessions.push({
                companyId,
                ...this.getSessionStatus(companyId)
            });
        }
        
        return sessions;
    }

    /**
     * Graceful shutdown
     */
    async shutdown() {
        logger.info('Shutting down WhatsApp Session Pool...');
        
        for (const [companyId] of this.sessions) {
            await this.removeSession(companyId);
        }
        
        logger.info('WhatsApp Session Pool shutdown complete');
    }
}

// Singleton instance
let sessionPool = null;

function getSessionPool() {
    if (!sessionPool) {
        sessionPool = new WhatsAppSessionPool();
    }
    return sessionPool;
}

module.exports = {
    WhatsAppSessionPool,
    getSessionPool
};