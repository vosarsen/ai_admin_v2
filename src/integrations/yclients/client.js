// src/integrations/yclients/api/yclients-client.js
const axios = require('axios');
const logger = require('../../utils/logger');
const Bottleneck = require('bottleneck');

/**
 * üöÄ PRODUCTION-READY YCLIENTS CLIENT
 * Enterprise-grade –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yclients API
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç: YclientsGateway + BaseHttpClient + YclientsEndpoints
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - Rate limiting (500 req/hour)
 * - Smart retry —Å exponential backoff  
 * - Circuit breaker pattern
 * - Request/response caching
 * - Real-time –º–µ—Ç—Ä–∏–∫–∏
 * - Graceful error handling
 */
class YclientsClient {
  // =============== ENDPOINTS –ö–û–ù–°–¢–ê–ù–¢–´ ===============
  static ENDPOINTS = {
    // Company endpoints
    company: (companyId) => `company/${companyId}`,
    services: (companyId) => `company/${companyId}/services`,
    serviceCategories: (companyId) => `company/${companyId}/service_categories`,
    staff: (companyId) => `company/${companyId}/staff`,
    clients: (companyId) => `company/${companyId}/clients`,
    createClient: (companyId) => `clients/${companyId}`,
    searchClients: (companyId) => `company/${companyId}/clients/search`,

    // Booking endpoints (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏)
    bookServices: (companyId) => `book_services/${companyId}`,
    bookStaff: (companyId) => `book_staff/${companyId}`,
    bookDates: (companyId) => `book_dates/${companyId}`,
    bookTimes: (companyId, staffId, date) => `book_times/${companyId}/${staffId}/${date}`,
    bookCheck: (companyId) => `book_check/${companyId}`,
    bookRecord: (companyId) => `book_record/${companyId}`,

    // Records endpoints
    records: (companyId) => `records/${companyId}`,
    record: (companyId, recordId) => `record/${companyId}/${recordId}`,

    // Staff schedule endpoints
    staffSeances: (companyId, staffId) => `book_staff_seances/${companyId}/${staffId}/`
  };

  constructor(config = {}) {
    const appConfig = require("../../config");
    this.config = {
      baseUrl: 'https://api.yclients.com/api/v1',
      bearerToken: config.bearerToken || appConfig.yclients.bearerToken,
      userToken: config.userToken || appConfig.yclients.userToken,
      partnerId: config.partnerId || appConfig.yclients.partnerId,
      companyId: config.companyId || appConfig.yclients.companyId,
      timeout: config.timeout || 30000,
      maxRetries: config.maxRetries || 3,
      retryDelay: config.retryDelay || 1000,

      // Production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      rateLimit: {
        requestsPerHour: 450, // –ó–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 500
        burstLimit: 10,       // –ú–∞–∫—Å–∏–º—É–º –≤ —Å–µ–∫—É–Ω–¥—É
        ...config.rateLimit
      },

      cache: {
        enabled: true,
        ttl: 1800, // 30 –º–∏–Ω—É—Ç
        maxSize: 1000,
        ...config.cache
      },

      monitoring: {
        enabled: true,
        metricsInterval: 60000, // 1 –º–∏–Ω—É—Ç–∞
        ...config.monitoring
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.axiosInstance = this._createAxiosInstance();
    this.rateLimiter = this._createRateLimiter();
    this.slotsRateLimiter = new Bottleneck({
      minTime: 250, // –Ω–µ —á–∞—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 250–º—Å
      maxConcurrent: 5, // –º–∞–∫—Å–∏–º—É–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      reservoir: 500, // –º–∞–∫—Å–∏–º—É–º 500 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
      reservoirRefreshAmount: 500,
      reservoirRefreshInterval: 60 * 60 * 1000 // –∫–∞–∂–¥—ã–π —á–∞—Å
    });
    this.errorHandler = this._createErrorHandler();
    this.cache = new Map();
    this.stats = this._initStats();

    this._setupInterceptors();
    this._startMetricsCollection();

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ Partner ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!this.config.partnerId) {
      logger.warn('‚ö†Ô∏è YCLIENTS_PARTNER_ID not set - this may cause API errors');
    }

    logger.info('üöÄ YclientsClient initialized for production load', {
      hasPartnerId: !!this.config.partnerId,
      hasUserToken: !!this.config.userToken,
      hasBearerToken: !!this.config.bearerToken
    });
  }

  // =============== CORE HTTP METHODS ===============

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
   * –í–∫–ª—é—á–∞–µ—Ç rate limiting, caching, retry –ª–æ–≥–∏–∫—É
   */
  async request(method, endpoint, data = null, params = {}, options = {}) {
    const requestId = this._generateRequestId();
    const cacheKey = this._generateCacheKey(method, endpoint, params);

    logger.info(`üöÄ YclientsClient.request() started [${requestId}]`, { 
      method, endpoint, params, options 
    });

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤)
      if (method === 'GET' && this.config.cache.enabled) {
        const cached = this._getFromCache(cacheKey);
        if (cached) {
          logger.debug(`üíæ Cache hit for ${endpoint}`);
          this.stats.cacheHits++;
          return cached;
        }
      }

      // 2. Rate limiting
      logger.info(`‚è≥ Rate limiting [${requestId}]`, { priority: options.priority || 'normal' });
      await this.rateLimiter.waitForSlot(options.priority || 'normal');
      logger.info(`‚úÖ Rate limiting passed [${requestId}]`);

      // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
      logger.info(`üîÑ Starting _executeWithRetry [${requestId}]`);
      const result = await this._executeWithRetry(method, endpoint, data, params, requestId);

      // 4. –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤)
      if (method === 'GET' && this.config.cache.enabled && result.success) {
        this._saveToCache(cacheKey, result);
      }

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this._updateStats(true, Date.now() - result.startTime);

      return result;

    } catch (error) {
      this._updateStats(false, 0);
      logger.error(`‚ùå Request failed [${requestId}]: ${error.message}`);

      return {
        success: false,
        error: this.errorHandler.formatError(error),
        requestId
      };
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async get(endpoint, params = {}, options = {}) {
    return this.request('GET', endpoint, null, params, options);
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
   */
  async post(endpoint, data, options = {}) {
    return this.request('POST', endpoint, data, {}, {
      priority: 'high', // POST –∑–∞–ø—Ä–æ—Å—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      ...options
    });
  }

  // =============== BUSINESS METHODS ===============

  /**
   * üè¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  async getCompanyInfo(companyId = this.config.companyId) {
    return this.get(YclientsClient.ENDPOINTS.company(companyId), {}, {
      cacheTtl: 3600 // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —á–∞—Å
    });
  }

  /**
   * üõçÔ∏è –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–º–∞—Å—Ç–µ—Ä—É)
   */
  async getServices(params = {}, companyId = this.config.companyId) {
    const endpoint = params.datetime || params.staff_id 
      ? YclientsClient.ENDPOINTS.bookServices(companyId)
      : YclientsClient.ENDPOINTS.services(companyId);

    return this.get(endpoint, params, {
      cacheTtl: 1800 // –£—Å–ª—É–≥–∏ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 30 –º–∏–Ω—É—Ç
    });
  }

  /**
   * üë• –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Å–ª—É–≥–∞–º/–≤—Ä–µ–º–µ–Ω–∏)
   */
  async getStaff(params = {}, companyId = this.config.companyId) {
    const endpoint = params.service_ids || params.datetime
      ? YclientsClient.ENDPOINTS.bookStaff(companyId)
      : YclientsClient.ENDPOINTS.staff(companyId);

    return this.get(endpoint, params, {
      cacheTtl: 1800 // –ú–∞—Å—Ç–µ—Ä–∞ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 30 –º–∏–Ω—É—Ç
    });
  }

  /**
   * üìÖ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
   */
  async getAvailableDates(params = {}, companyId = this.config.companyId) {
    return this.get(YclientsClient.ENDPOINTS.bookDates(companyId), params, {
      cacheTtl: 600, // –î–∞—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 10 –º–∏–Ω—É—Ç
      priority: 'high'
    });
  }

  /**
   * üïê –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (rate limited)
   */
  async getAvailableSlots(staffId, date, params = {}, companyId = this.config.companyId) {
    logger.info('üïê getAvailableSlots called', { staffId, date, params, companyId });
    
    try {
      const result = await this.slotsRateLimiter.schedule(() => {
        logger.info('üìã Rate limiter executing request', { staffId, date });
        
        // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º book_times —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const queryParams = {
          ...params
        };
        
        const endpoint = YclientsClient.ENDPOINTS.bookTimes(companyId, staffId, date);
        const fullUrl = `${this.config.baseUrl}/${endpoint}`;
        const queryString = new URLSearchParams(queryParams).toString();
        logger.info(`üö® CRITICAL: Making request to: ${fullUrl}?${queryString}`);
        
        return this.get(
          endpoint,
          queryParams,
          {
            cacheTtl: 300, // –°–ª–æ—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 5 –º–∏–Ω—É—Ç
            priority: 'high'
          }
        );
      });
      
      logger.info('‚úÖ getAvailableSlots completed', { 
        staffId, 
        date, 
        success: result?.success,
        dataLength: Array.isArray(result?.data) ? result.data.length : 'not-array',
        sampleData: Array.isArray(result?.data) ? result.data.slice(0, 2) : result?.data,
        fullResult: result
      });
      return result;
    } catch (error) {
      logger.error('‚ùå getAvailableSlots failed', { 
        staffId, 
        date, 
        error: error.message,
        stack: error.stack 
      });
      throw error;
    }
  }

  /**
   * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
   */
  async validateBooking(appointments, companyId = this.config.companyId) {
    const result = await this.post(
      YclientsClient.ENDPOINTS.bookCheck(companyId), 
      { appointments },
      { priority: 'critical' }
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!result.success && result.status === 422) {
      return this.errorHandler.parseValidationErrors(result.data);
    }

    return result;
  }

  /**
   * üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
   */
  async createBooking(bookingData, companyId = this.config.companyId) {
    return this.post(
      YclientsClient.ENDPOINTS.bookRecord(companyId), 
      bookingData,
      { priority: 'critical' }
    );
  }

  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  async getRecords(params = {}, companyId = this.config.companyId) {
    return this.get(YclientsClient.ENDPOINTS.records(companyId), params, {
      cacheTtl: 60 // –ó–∞–ø–∏—Å–∏ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    });
  }

  /**
   * üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –∏–º–µ–Ω–∏
   */
  async searchClients(searchQuery, companyId = this.config.companyId) {
    return this.post(
      YclientsClient.ENDPOINTS.searchClients(companyId),
      { search_term: searchQuery },
      { cacheTtl: 300 } // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
    );
  }

  /**
   * üë§ –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
   */
  async createClient(clientData, companyId = this.config.companyId) {
    const payload = {
      name: clientData.name || clientData.fullname,
      phone: clientData.phone,
      email: clientData.email || '',
      comment: clientData.comment || '–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ AI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    };
    
    return this.post(
      YclientsClient.ENDPOINTS.createClient(companyId),
      payload,
      { priority: 'high' }
    );
  }

  // =============== PRIVATE METHODS ===============

  _createAxiosInstance() {
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.yclients.v2+json',
      'Authorization': this._buildAuthHeader(),
      'User-Agent': 'AI-Admin-Enterprise/1.0.0'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º Partner ID –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.config.partnerId) {
      headers['X-Partner-Id'] = this.config.partnerId;
    }

    return axios.create({
      baseURL: this.config.baseUrl,
      timeout: this.config.timeout,
      headers
    });
  }

  _buildAuthHeader() {
    let auth = `Bearer ${this.config.bearerToken}`;
    if (this.config.userToken) {
      auth += `, User ${this.config.userToken}`;
    }
    return auth;
  }

  _createRateLimiter() {
    return {
      requestTimes: [],
      lastRequest: 0,

      async waitForSlot(priority = 'normal') {
        const now = Date.now();
        const hourAgo = now - 3600000;

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        this.requestTimes = this.requestTimes.filter(time => time > hourAgo);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if (this.requestTimes.length >= 450) { // –ó–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 500
          const waitTime = 3600000 - (now - this.requestTimes[0]);
          logger.warn(`‚è±Ô∏è Rate limit reached, waiting ${waitTime}ms`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }

        // Burst protection
        const timeSinceLastRequest = now - this.lastRequest;
        if (timeSinceLastRequest < 100) { // –ú–∏–Ω–∏–º—É–º 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100 - timeSinceLastRequest));
        }

        this.requestTimes.push(now);
        this.lastRequest = now;
      }
    };
  }

  _createErrorHandler() {
    return {
      formatError(error) {
        if (!error.response) {
          return {
            type: 'NETWORK_ERROR',
            message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É',
            retryable: true
          };
        }

        const { status, data } = error.response;

        const errorMap = {
          400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
          401: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 
          403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
          404: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          422: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          429: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
          500: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          502: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          503: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç YClients
        let yclientsErrors = null;
        if (data?.meta?.errors && Array.isArray(data.meta.errors)) {
          yclientsErrors = data.meta.errors;
        }
        
        return {
          type: `HTTP_${status}`,
          message: errorMap[status] || `HTTP ${status} –æ—à–∏–±–∫–∞`,
          details: data?.message || data?.error,
          yclientsErrors: yclientsErrors,
          retryable: [429, 500, 502, 503].includes(status)
        };
      },

      parseValidationErrors(errorData) {
        const errorMap = {
          432: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
          433: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ',
          434: '–ö–ª–∏–µ–Ω—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ',
          435: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞',
          436: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤',
          437: '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–µ–π',
          438: '–£—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        };

        return {
          success: false,
          error: errorMap[errorData.meta?.code] || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
          code: errorData.meta?.code,
          appointmentId: errorData.meta?.appointment_id
        };
      }
    };
  }

  async _executeWithRetry(method, endpoint, data, params, requestId) {
    let lastError;
    const startTime = Date.now();

    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {
      try {
        const config = {
          method,
          url: endpoint,
          data,
          params,
          metadata: { requestId, attempt }
        };

        // ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(`üîç YClients API Request [${requestId}] attempt ${attempt + 1}`, {
          method,
          endpoint,
          params,
          fullUrl: `${this.config.baseUrl}/${endpoint}`,
          headers: this.axiosInstance.defaults.headers
        });

        const response = await this.axiosInstance.request(config);

        return {
          success: true,
          data: response.data,
          status: response.status,
          startTime,
          attempt
        };

      } catch (error) {
        lastError = error;

        // ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        logger.error(`‚ùå YClients API Request Failed [${requestId}] attempt ${attempt + 1}`, {
          error: error.message,
          status: error.response?.status,
          statusText: error.response?.statusText,
          responseData: error.response?.data,
          config: {
            url: error.config?.url,
            method: error.config?.method,
            params: error.config?.params
          }
        });

        if (attempt < this.config.maxRetries && this._isRetryable(error)) {
          const delay = this._calculateRetryDelay(attempt);
          logger.warn(`üîÑ Retry ${attempt + 1}/${this.config.maxRetries} after ${delay}ms`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }

        break;
      }
    }

    throw lastError;
  }

  _isRetryable(error) {
    if (!error.response) return true; // Network errors
    return [429, 500, 502, 503, 504].includes(error.response.status);
  }

  _calculateRetryDelay(attempt) {
    const baseDelay = this.config.retryDelay;
    const exponentialDelay = baseDelay * Math.pow(2, attempt);
    const jitter = Math.random() * 0.1 * exponentialDelay;
    return Math.min(exponentialDelay + jitter, 30000);
  }

  // Cache methods
  _generateCacheKey(method, endpoint, params) {
    return `${method}:${endpoint}:${JSON.stringify(params)}`;
  }

  _getFromCache(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() < cached.expires) {
      return cached.data;
    }
    this.cache.delete(key);
    return null;
  }

  _saveToCache(key, data, customTtl) {
    const ttl = customTtl || this.config.cache.ttl;
    this.cache.set(key, {
      data,
      expires: Date.now() + (ttl * 1000)
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
    if (this.cache.size > this.config.cache.maxSize) {
      const oldestKey = this.cache.keys().next().value;
      this.cache.delete(oldestKey);
    }
  }

  // Metrics methods
  _initStats() {
    return {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      cacheHits: 0,
      rateLimitWaits: 0,
      lastHealthCheck: Date.now()
    };
  }

  _updateStats(success, responseTime) {
    this.stats.totalRequests++;

    if (success) {
      this.stats.successfulRequests++;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
      const currentAvg = this.stats.averageResponseTime;
      const totalRequests = this.stats.totalRequests;
      this.stats.averageResponseTime = ((currentAvg * (totalRequests - 1)) + responseTime) / totalRequests;
    } else {
      this.stats.failedRequests++;
    }
  }

  _startMetricsCollection() {
    if (!this.config.monitoring.enabled) return;

    setInterval(() => {
      const stats = this.getStats();

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      logger.info(`üìä YclientsClient Stats: ${stats.successRate}% success, ${stats.averageResponseTime}ms avg response`);

      // –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      if (stats.successRate < 95) {
        logger.warn(`‚ö†Ô∏è Low success rate: ${stats.successRate}%`);
      }

      if (stats.averageResponseTime > 2000) {
        logger.warn(`‚ö†Ô∏è High response time: ${stats.averageResponseTime}ms`);
      }

    }, this.config.monitoring.metricsInterval);
  }

  _setupInterceptors() {
    // Request interceptor
    this.axiosInstance.interceptors.request.use(
      config => {
        config.metadata = { ...config.metadata, startTime: Date.now() };
        return config;
      },
      error => Promise.reject(error)
    );

    // Response interceptor
    this.axiosInstance.interceptors.response.use(
      response => {
        const duration = Date.now() - response.config.metadata.startTime;
        logger.debug(`‚úÖ ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status} (${duration}ms)`);
        return response;
      },
      error => {
        const duration = error.config?.metadata ? Date.now() - error.config.metadata.startTime : 0;
        logger.error(`‚ùå ${error.config?.method?.toUpperCase()} ${error.config?.url} - ${error.response?.status || 'Network Error'} (${duration}ms)`);
        return Promise.reject(error);
      }
    );
  }

  _generateRequestId() {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // =============== PUBLIC UTILITY METHODS ===============

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getStats() {
    return {
      ...this.stats,
      successRate: this.stats.totalRequests > 0 
        ? Math.round((this.stats.successfulRequests / this.stats.totalRequests) * 100)
        : 100,
      cacheHitRate: this.stats.totalRequests > 0
        ? Math.round((this.stats.cacheHits / this.stats.totalRequests) * 100)
        : 0,
      uptime: Date.now() - this.stats.lastHealthCheck
    };
  }

  /**
   * Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async healthCheck() {
    try {
      const start = Date.now();
      const result = await this.getCompanyInfo();
      const responseTime = Date.now() - start;

      return {
        healthy: result.success,
        responseTime,
        stats: this.getStats(),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        healthy: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
   */
  async getRecords(companyId, params = {}) {
    try {
      logger.info(`üìã Getting records for company ${companyId}`, params);
      
      const queryParams = new URLSearchParams();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      if (params.client_phone) {
        queryParams.append('client_phone', params.client_phone);
      }
      if (params.start_date) {
        queryParams.append('start_date', params.start_date);
      }
      if (params.end_date) {
        queryParams.append('end_date', params.end_date);
      }
      if (params.staff_id) {
        queryParams.append('staff_id', params.staff_id);
      }
      
      const response = await this.api.get(
        `/records/${companyId}?${queryParams.toString()}`,
        {
          headers: {
            'Authorization': `Bearer ${this.partnerToken}, User ${await this._getUserToken(companyId)}`
          }
        }
      );

      if (response.data.success) {
        logger.info(`‚úÖ Found ${response.data.data.length} records`);
        return {
          success: true,
          data: response.data.data
        };
      }

      return {
        success: false,
        error: response.data.meta?.message || 'Failed to get records'
      };
    } catch (error) {
      logger.error('Error getting records:', error);
      const formattedError = this.errorHandler.formatError(error);
      return {
        success: false,
        error: formattedError.message,
        details: formattedError.details,
        yclientsErrors: formattedError.yclientsErrors
      };
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
   */
  async deleteRecord(companyId, recordId) {
    try {
      logger.info(`üö´ Deleting record ${recordId} from company ${companyId}`);
      
      const response = await this.api.delete(
        `/record/${companyId}/${recordId}`,
        {
          headers: {
            'Authorization': `Bearer ${this.partnerToken}, User ${await this._getUserToken(companyId)}`
          }
        }
      );

      if (response.data.success) {
        logger.info(`‚úÖ Successfully deleted record ${recordId}`);
        return {
          success: true,
          data: response.data.data
        };
      }

      return {
        success: false,
        error: response.data.meta?.message || 'Failed to delete record'
      };
    } catch (error) {
      logger.error('Error deleting record:', error);
      const formattedError = this.errorHandler.formatError(error);
      return {
        success: false,
        error: formattedError.message,
        details: formattedError.details,
        yclientsErrors: formattedError.yclientsErrors
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  clearCache() {
    this.cache.clear();
    logger.info('üóëÔ∏è Cache cleared');
  }

  /**
   * Graceful shutdown
   */
  destroy() {
    this.cache.clear();
    logger.info('üí• YclientsClient destroyed');
  }
}

module.exports = { YclientsClient };