#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ReAct –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è AI Admin v2
 */

require('dotenv').config();
const logger = require('./src/utils/logger').child({ module: 'test-react' });

// –í–∫–ª—é—á–∞–µ–º ReAct
process.env.USE_REACT = 'true';
process.env.AI_PROMPT_VERSION = 'react-prompt';

async function testReAct() {
  try {
    logger.info('üöÄ Starting ReAct pattern test...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Admin v2
    const aiAdmin = require('./src/services/ai-admin-v2');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    const promptManager = require('./src/services/ai-admin-v2/prompt-manager');
    await promptManager.loadPrompts();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    const testCases = [
      {
        name: '–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ—Å—Ç—É–ø–Ω–æ–µ)',
        message: '–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É —Å–µ–≥–æ–¥–Ω—è –≤ 19:00',
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã, –Ω–∞–π—Ç–∏ 19:00 –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å'
      },
      {
        name: '–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–∑–∞–Ω—è—Ç–æ–µ)',
        message: '–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É —Å–µ–≥–æ–¥–Ω—è –≤ 17:00',
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç—ã, –Ω–µ –Ω–∞–π—Ç–∏ 17:00 –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'
      },
      {
        name: '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
        message: '–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞?',
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö –∫–ª–∏–µ–Ω—Ç—É'
      },
      {
        name: '–ó–∞–ø–∏—Å—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏',
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∑–∞–≤—Ç—Ä–∞',
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç—ã –∏ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ'
      }
    ];
    
    const phone = '79001234567';
    const companyId = 962302;
    
    for (const testCase of testCases) {
      logger.info(`\n${'='.repeat(80)}`);
      logger.info(`üìù Test: ${testCase.name}`);
      logger.info(`Message: "${testCase.message}"`);
      logger.info(`Expected: ${testCase.expectedBehavior}`);
      logger.info(`${'='.repeat(80)}\n`);
      
      try {
        const result = await aiAdmin.processMessage(
          testCase.message,
          phone,
          companyId
        );
        
        logger.info('‚úÖ Result:', {
          success: result.success,
          response: result.response?.substring(0, 200),
          commandsCount: result.executedCommands?.length || 0,
          commands: result.executedCommands?.map(c => c.command)
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ReAct
        if (result.executedCommands && result.executedCommands.length > 0) {
          logger.info('‚úÖ Commands were executed via ReAct');
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        logger.error(`‚ùå Test failed: ${error.message}`);
      }
    }
    
    logger.info('\n‚úÖ All ReAct tests completed!');
    
  } catch (error) {
    logger.error('Fatal error in test:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testReAct();