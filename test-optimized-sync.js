require('dotenv').config();
const { getSyncManager } = require('./src/sync/sync-manager');
const { supabase } = require('./src/database/supabase');

async function testOptimized() {
  console.log('üöÄ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('='.repeat(50));
  
  // –û–±–Ω—É–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
  console.log('\n1. –û–±–Ω—É–ª—è–µ–º —Ç–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞...');
  
  await supabase
    .from('clients')
    .update({ 
      total_spent: 0, 
      visit_count: 0,
      loyalty_level: 'New'
    })
    .in('name', ['–õ–µ–æ–Ω–∏–¥', '–°–µ—Ä–≥–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ì–µ–Ω–Ω–∞–¥–∏–π', '–õ–µ–≤–æ–Ω', 
                 '–ï–≤–≥–µ–Ω–∏–π', '–í–ª–∞–¥–∏–º–∏—Ä', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞–∫—Å–∏–º', '–î–º–∏—Ç—Ä–∏–π']);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º
  const { count: zeroCount } = await supabase
    .from('clients')
    .select('*', { count: 'exact', head: true })
    .eq('total_spent', 0);
    
  console.log(`   –û–±–Ω—É–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${zeroCount}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  console.log('\n2. –ó–∞–ø—É—Å–∫–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
  
  const syncManager = getSyncManager();
  const startTime = Date.now();
  
  const result = await syncManager.syncClients({
    syncVisitHistory: false
  });
  
  const duration = Math.round((Date.now() - startTime) / 1000);
  
  console.log(`\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥!`);
  console.log('   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', result.processed);
  console.log('   –û—à–∏–±–æ–∫:', result.errors);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { data: topClients } = await supabase
    .from('clients')
    .select('name, total_spent, visit_count')
    .order('total_spent', { ascending: false })
    .limit(5);
    
  console.log('\nüí∞ –¢–û–ü-5 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
  topClients.forEach((client, i) => {
    console.log(`   ${i+1}. ${client.name}: ${client.total_spent} —Ä—É–±`);
  });
  
  console.log('\n' + '='.repeat(50));
  
  if (duration < 60) {
    console.log('üöÄ –û–¢–õ–ò–ß–ù–û! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–´–°–¢–†–û!');
    console.log(`   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: —Å ~6 –º–∏–Ω—É—Ç –¥–æ ${duration} —Å–µ–∫—É–Ω–¥`);
  } else if (duration < 120) {
    console.log('‚úÖ –•–æ—Ä–æ—à–æ! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ');
    console.log(`   –í—Ä–µ–º—è: ${duration} —Å–µ–∫—É–Ω–¥`);
  } else {
    console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è');
    console.log(`   –í—Ä–µ–º—è: ${duration} —Å–µ–∫—É–Ω–¥`);
  }
  
  process.exit(0);
}

testOptimized().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});